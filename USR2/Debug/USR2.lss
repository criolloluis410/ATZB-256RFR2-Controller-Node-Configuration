
USR2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00003c6a  00003cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000497  00800212  00800212  00003d10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000858  00000000  00000000  00003d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cece  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e75  00000000  00000000  000114a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000fa15  00000000  00000000  0001631b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c28  00000000  00000000  00025d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000209b9  00000000  00000000  00027958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007cdf  00000000  00000000  00048311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0004fff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c1d2  00000000  00000000  000507b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	fe c0       	rjmp	.+508    	; 0x236 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fc c0       	rjmp	.+504    	; 0x236 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fa c0       	rjmp	.+500    	; 0x236 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__vector_17>
      48:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__vector_18>
      4c:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <__vector_19>
      50:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__vector_20>
      54:	f0 c0       	rjmp	.+480    	; 0x236 <__bad_interrupt>
      56:	00 00       	nop
      58:	ee c0       	rjmp	.+476    	; 0x236 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ec c0       	rjmp	.+472    	; 0x236 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_32>
      84:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__vector_33>
      88:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__vector_34>
      8c:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__vector_35>
      90:	db c3       	rjmp	.+1974   	; 0x848 <__vector_36>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_42>
      ac:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__vector_43>
      b0:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_44>
      b4:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__vector_45>
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__vector_47>
      c0:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__vector_48>
      c4:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__vector_49>
      c8:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_50>
      cc:	b4 c0       	rjmp	.+360    	; 0x236 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b2 c0       	rjmp	.+356    	; 0x236 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_57>
      e8:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_58>
      ec:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_59>
      f0:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_60>
      f4:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__vector_61>
      f8:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_62>
      fc:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_63>
     100:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_70>
     11c:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_71>
     120:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_72>
     124:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_73>
     128:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_74>
     12c:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__vector_75>
     130:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_76>
     134:	06 0b       	sbc	r16, r22
     136:	2d 0b       	sbc	r18, r29
     138:	21 0b       	sbc	r18, r17
     13a:	3a 0b       	sbc	r19, r26
     13c:	21 0b       	sbc	r18, r17
     13e:	f9 0a       	sbc	r15, r25
     140:	13 0b       	sbc	r17, r19
     142:	21 0b       	sbc	r18, r17
     144:	21 0b       	sbc	r18, r17
     146:	21 0b       	sbc	r18, r17
     148:	21 0b       	sbc	r18, r17
     14a:	21 0b       	sbc	r18, r17
     14c:	cd 0a       	sbc	r12, r29
     14e:	21 0b       	sbc	r18, r17
     150:	21 0b       	sbc	r18, r17
     152:	21 0b       	sbc	r18, r17
     154:	21 0b       	sbc	r18, r17
     156:	21 0b       	sbc	r18, r17
     158:	21 0b       	sbc	r18, r17
     15a:	59 0b       	sbc	r21, r25
     15c:	21 0b       	sbc	r18, r17
     15e:	21 0b       	sbc	r18, r17
     160:	92 0b       	sbc	r25, r18
     162:	07 63       	ori	r16, 0x37	; 55
     164:	42 36       	cpi	r20, 0x62	; 98
     166:	b7 9b       	sbis	0x16, 7	; 22
     168:	d8 a7       	std	Y+40, r29	; 0x28
     16a:	1a 39       	cpi	r17, 0x9A	; 154
     16c:	68 56       	subi	r22, 0x68	; 104
     16e:	18 ae       	std	Y+56, r1	; 0x38
     170:	ba ab       	std	Y+50, r27	; 0x32
     172:	55 8c       	ldd	r5, Z+29	; 0x1d
     174:	1d 3c       	cpi	r17, 0xCD	; 205
     176:	b7 cc       	rjmp	.-1682   	; 0xfffffae6 <__eeprom_end+0xff7efae6>
     178:	57 63       	ori	r21, 0x37	; 55
     17a:	bd 6d       	ori	r27, 0xDD	; 221
     17c:	ed fd       	.word	0xfded	; ????
     17e:	75 3e       	cpi	r23, 0xE5	; 229
     180:	f6 17       	cp	r31, r22
     182:	72 31       	cpi	r23, 0x12	; 18
     184:	bf 00       	.word	0x00bf	; ????
     186:	00 00       	nop
     188:	80 3f       	cpi	r24, 0xF0	; 240
     18a:	08 00       	.word	0x0008	; ????
     18c:	00 00       	nop
     18e:	be 92       	st	-X, r11
     190:	24 49       	sbci	r18, 0x94	; 148
     192:	12 3e       	cpi	r17, 0xE2	; 226
     194:	ab aa       	std	Y+51, r10	; 0x33
     196:	aa 2a       	or	r10, r26
     198:	be cd       	rjmp	.-1156   	; 0xfffffd16 <__eeprom_end+0xff7efd16>
     19a:	cc cc       	rjmp	.-1640   	; 0xfffffb34 <__eeprom_end+0xff7efb34>
     19c:	4c 3e       	cpi	r20, 0xEC	; 236
     19e:	00 00       	nop
     1a0:	00 80       	ld	r0, Z
     1a2:	be ab       	std	Y+54, r27	; 0x36
     1a4:	aa aa       	std	Y+50, r10	; 0x32
     1a6:	aa 3e       	cpi	r26, 0xEA	; 234
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	bf 00       	.word	0x00bf	; ????
     1ae:	00 00       	nop
     1b0:	80 3f       	cpi	r24, 0xF0	; 240
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	00 08       	sbc	r0, r0
     1b8:	41 78       	andi	r20, 0x81	; 129
     1ba:	d3 bb       	out	0x13, r29	; 19
     1bc:	43 87       	std	Z+11, r20	; 0x0b
     1be:	d1 13       	cpse	r29, r17
     1c0:	3d 19       	sub	r19, r13
     1c2:	0e 3c       	cpi	r16, 0xCE	; 206
     1c4:	c3 bd       	out	0x23, r28	; 35
     1c6:	42 82       	std	Z+2, r4	; 0x02
     1c8:	ad 2b       	or	r26, r29
     1ca:	3e 68       	ori	r19, 0x8E	; 142
     1cc:	ec 82       	std	Y+4, r14	; 0x04
     1ce:	76 be       	out	0x36, r7	; 54
     1d0:	d9 8f       	std	Y+25, r29	; 0x19
     1d2:	e1 a9       	ldd	r30, Z+49	; 0x31
     1d4:	3e 4c       	sbci	r19, 0xCE	; 206
     1d6:	80 ef       	ldi	r24, 0xF0	; 240
     1d8:	ff be       	out	0x3f, r15	; 63
     1da:	01 c4       	rjmp	.+2050   	; 0x9de <reverse+0x16>
     1dc:	ff 7f       	andi	r31, 0xFF	; 255
     1de:	3f 00       	.word	0x003f	; ????
     1e0:	00 00       	nop
	...

000001e4 <__trampolines_end>:
     1e4:	04 03       	mulsu	r16, r20
     1e6:	03 02       	muls	r16, r19
     1e8:	02 01       	movw	r0, r4
     1ea:	00 ff       	sbrs	r16, 0
     1ec:	fe fd       	.word	0xfdfe	; ????
     1ee:	fc fb       	.word	0xfbfc	; ????
     1f0:	f9 f7       	brne	.-2      	; 0x1f0 <__trampolines_end+0xc>
     1f2:	f4 ef       	ldi	r31, 0xF4	; 244

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	d1 e8       	ldi	r29, 0x81	; 129
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60

00000204 <__do_copy_data>:
     204:	12 e0       	ldi	r17, 0x02	; 2
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b2 e0       	ldi	r27, 0x02	; 2
     20a:	ea e6       	ldi	r30, 0x6A	; 106
     20c:	fc e3       	ldi	r31, 0x3C	; 60
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	0b bf       	out	0x3b, r16	; 59
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x14>
     214:	07 90       	elpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a2 31       	cpi	r26, 0x12	; 18
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0x10>

0000021e <__do_clear_bss>:
     21e:	26 e0       	ldi	r18, 0x06	; 6
     220:	a2 e1       	ldi	r26, 0x12	; 18
     222:	b2 e0       	ldi	r27, 0x02	; 2
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a9 3a       	cpi	r26, 0xA9	; 169
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 28 18 	call	0x3050	; 0x3050 <main>
     232:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <common_tc_read_count>:
     238:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <tmr_read_count>
     23c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     240:	22 23       	and	r18, r18
     242:	d9 f0       	breq	.+54     	; 0x27a <common_tc_read_count+0x42>
     244:	40 91 9e 06 	lds	r20, 0x069E	; 0x80069e <timer_multiplier>
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     24e:	64 2f       	mov	r22, r20
     250:	73 2f       	mov	r23, r19
     252:	0e 94 a5 1b 	call	0x374a	; 0x374a <__udivmodhi4>
     256:	fb 01       	movw	r30, r22
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	64 2f       	mov	r22, r20
     25e:	73 2f       	mov	r23, r19
     260:	0e 94 a5 1b 	call	0x374a	; 0x374a <__udivmodhi4>
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	62 9f       	mul	r22, r18
     268:	c0 01       	movw	r24, r0
     26a:	63 9f       	mul	r22, r19
     26c:	90 0d       	add	r25, r0
     26e:	72 9f       	mul	r23, r18
     270:	90 0d       	add	r25, r0
     272:	11 24       	eor	r1, r1
     274:	8e 0f       	add	r24, r30
     276:	9f 1f       	adc	r25, r31
     278:	08 95       	ret
     27a:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <timer_multiplier>
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	0e 94 a5 1b 	call	0x374a	; 0x374a <__udivmodhi4>
     284:	cb 01       	movw	r24, r22
     286:	08 95       	ret

00000288 <common_tc_compare_stop>:
     288:	0e 94 d7 13 	call	0x27ae	; 0x27ae <tmr_disable_cc_interrupt>
     28c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <save_cpu_interrupt>
     290:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     294:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
     298:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
     29c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
     2a0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <compare_value+0x1>
     2a4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <compare_value>
     2a8:	0c 94 08 14 	jmp	0x2810	; 0x2810 <restore_cpu_interrupt>

000002ac <common_tc_overflow_stop>:
     2ac:	0e 94 e5 13 	call	0x27ca	; 0x27ca <tmr_disable_ovf_interrupt>
     2b0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     2b4:	08 95       	ret

000002b6 <common_tc_stop>:
     2b6:	e8 df       	rcall	.-48     	; 0x288 <common_tc_compare_stop>
     2b8:	f9 df       	rcall	.-14     	; 0x2ac <common_tc_overflow_stop>
     2ba:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <tmr_stop>

000002be <common_tc_delay>:
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
     2c8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <tmr_read_count>
     2cc:	8c 01       	movw	r16, r24
     2ce:	be 01       	movw	r22, r28
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	20 91 9e 06 	lds	r18, 0x069E	; 0x80069e <timer_multiplier>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	0e 94 96 1b 	call	0x372c	; 0x372c <__mulsi3>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	a8 01       	movw	r20, r16
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	48 0f       	add	r20, r24
     2ee:	59 1f       	adc	r21, r25
     2f0:	6a 1f       	adc	r22, r26
     2f2:	7b 1f       	adc	r23, r27
     2f4:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     2f8:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     2fc:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     300:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     304:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     308:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     30c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     310:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     314:	ab 01       	movw	r20, r22
     316:	66 27       	eor	r22, r22
     318:	77 27       	eor	r23, r23
     31a:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     31e:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     322:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     326:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     32a:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     32e:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     332:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     336:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     33a:	41 15       	cp	r20, r1
     33c:	51 05       	cpc	r21, r1
     33e:	61 05       	cpc	r22, r1
     340:	71 05       	cpc	r23, r1
     342:	91 f0       	breq	.+36     	; 0x368 <common_tc_delay+0xaa>
     344:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     348:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     34c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     350:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	08 0f       	add	r16, r24
     358:	19 1f       	adc	r17, r25
     35a:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     35e:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     362:	0e 94 d7 13 	call	0x27ae	; 0x27ae <tmr_disable_cc_interrupt>
     366:	08 c0       	rjmp	.+16     	; 0x378 <common_tc_delay+0xba>
     368:	08 0f       	add	r16, r24
     36a:	19 1f       	adc	r17, r25
     36c:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     370:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     374:	0e 94 de 13 	call	0x27bc	; 0x27bc <tmr_enable_cc_interrupt>
     378:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     37c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     380:	84 36       	cpi	r24, 0x64	; 100
     382:	91 05       	cpc	r25, r1
     384:	30 f4       	brcc	.+12     	; 0x392 <common_tc_delay+0xd4>
     386:	8c 59       	subi	r24, 0x9C	; 156
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <compare_value+0x1>
     38e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <compare_value>
     392:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     396:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     39a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <tmr_write_cmpreg>
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <common_tc_init>:
     3a8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     3ac:	0e 94 0a 14 	call	0x2814	; 0x2814 <tmr_init>
     3b0:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <timer_multiplier>
     3b4:	08 95       	ret

000003b6 <tmr_ovf_callback>:
     3b6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     3ba:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     3be:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     3c2:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	a1 05       	cpc	r26, r1
     3ca:	b1 05       	cpc	r27, r1
     3cc:	c9 f0       	breq	.+50     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ce:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     3d2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     3d6:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     3da:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	a1 09       	sbc	r26, r1
     3e2:	b1 09       	sbc	r27, r1
     3e4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
     3e8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
     3ec:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__data_end+0x2>
     3f0:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__data_end+0x3>
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	a1 05       	cpc	r26, r1
     3f8:	b1 05       	cpc	r27, r1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	0e 94 de 13 	call	0x27bc	; 0x27bc <tmr_enable_cc_interrupt>
     400:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer_mul_var>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timer_mul_var>
     40a:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <timer_multiplier>
     40e:	89 17       	cp	r24, r25
     410:	48 f0       	brcs	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     412:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     416:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <common_tc_ovf_callback>
     41a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <common_tc_ovf_callback+0x1>
     41e:	30 97       	sbiw	r30, 0x00	; 0
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	19 95       	eicall
     424:	08 95       	ret

00000426 <tmr_cca_callback>:
     426:	0e 94 d7 13 	call	0x27ae	; 0x27ae <tmr_disable_cc_interrupt>
     42a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <common_tc_cca_callback>
     42e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <common_tc_cca_callback+0x1>
     432:	30 97       	sbiw	r30, 0x00	; 0
     434:	09 f0       	breq	.+2      	; 0x438 <tmr_cca_callback+0x12>
     436:	19 95       	eicall
     438:	08 95       	ret

0000043a <set_common_tc_overflow_callback>:
     43a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <common_tc_ovf_callback+0x1>
     43e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <common_tc_ovf_callback>
     442:	08 95       	ret

00000444 <set_common_tc_expiry_callback>:
     444:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <common_tc_cca_callback+0x1>
     448:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <common_tc_cca_callback>
     44c:	08 95       	ret

0000044e <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	7c 01       	movw	r14, r24
     45c:	8b 01       	movw	r16, r22
     45e:	ea 01       	movw	r28, r20
	while (len) {
     460:	20 97       	sbiw	r28, 0x00	; 0
     462:	39 f0       	breq	.+14     	; 0x472 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     464:	f8 01       	movw	r30, r16
     466:	61 91       	ld	r22, Z+
     468:	8f 01       	movw	r16, r30
     46a:	c7 01       	movw	r24, r14
     46c:	4f d0       	rcall	.+158    	; 0x50c <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     46e:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     470:	c9 f7       	brne	.-14     	; 0x464 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	08 95       	ret

00000482 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	7c 01       	movw	r14, r24
     490:	8b 01       	movw	r16, r22
     492:	ea 01       	movw	r28, r20
	while (len) {
     494:	20 97       	sbiw	r28, 0x00	; 0
     496:	39 f0       	breq	.+14     	; 0x4a6 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     498:	c7 01       	movw	r24, r14
     49a:	3f d0       	rcall	.+126    	; 0x51a <usart_getchar>
     49c:	f8 01       	movw	r30, r16
     49e:	81 93       	st	Z+, r24
     4a0:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     4a2:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     4a4:	c9 f7       	brne	.-14     	; 0x498 <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <_read>:
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <stdio_base>
     4c4:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <stdio_base+0x1>
     4c8:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <ptr_get>
     4cc:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <ptr_get+0x1>
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	19 95       	eicall
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	08 2e       	mov	r0, r24
     4dc:	00 0c       	add	r0, r0
     4de:	99 0b       	sbc	r25, r25
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <_write>:
     4e8:	68 2f       	mov	r22, r24
     4ea:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <stdio_base>
     4ee:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <stdio_base+0x1>
     4f2:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <ptr_put>
     4f6:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <ptr_put+0x1>
     4fa:	19 95       	eicall
     4fc:	99 23       	and	r25, r25
     4fe:	1c f0       	brlt	.+6      	; 0x506 <_write+0x1e>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	08 95       	ret
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	9f ef       	ldi	r25, 0xFF	; 255
     50a:	08 95       	ret

0000050c <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     50c:	fc 01       	movw	r30, r24
     50e:	90 81       	ld	r25, Z
     510:	95 ff       	sbrs	r25, 5
     512:	fd cf       	rjmp	.-6      	; 0x50e <usart_putchar+0x2>
     514:	66 83       	std	Z+6, r22	; 0x06
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret

0000051a <usart_getchar>:
     51a:	fc 01       	movw	r30, r24
     51c:	90 81       	ld	r25, Z
     51e:	99 23       	and	r25, r25
     520:	ec f7       	brge	.-6      	; 0x51c <usart_getchar+0x2>
     522:	86 81       	ldd	r24, Z+6	; 0x06
     524:	08 95       	ret

00000526 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
     548:	6a 01       	movw	r12, r20
     54a:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     54c:	28 01       	movw	r4, r16
     54e:	39 01       	movw	r6, r18
     550:	68 94       	set
     552:	12 f8       	bld	r1, 2
     554:	76 94       	lsr	r7
     556:	67 94       	ror	r6
     558:	57 94       	ror	r5
     55a:	47 94       	ror	r4
     55c:	16 94       	lsr	r1
     55e:	d1 f7       	brne	.-12     	; 0x554 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     560:	88 81       	ld	r24, Y
     562:	81 fd       	sbrc	r24, 1
     564:	0e c0       	rjmp	.+28     	; 0x582 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     566:	48 01       	movw	r8, r16
     568:	59 01       	movw	r10, r18
     56a:	07 2e       	mov	r0, r23
     56c:	73 e1       	ldi	r23, 0x13	; 19
     56e:	b6 94       	lsr	r11
     570:	a7 94       	ror	r10
     572:	97 94       	ror	r9
     574:	87 94       	ror	r8
     576:	7a 95       	dec	r23
     578:	d1 f7       	brne	.-12     	; 0x56e <usart_set_baudrate+0x48>
     57a:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     57c:	d3 01       	movw	r26, r6
     57e:	c2 01       	movw	r24, r4
     580:	15 c0       	rjmp	.+42     	; 0x5ac <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     582:	d9 01       	movw	r26, r18
     584:	c8 01       	movw	r24, r16
     586:	68 94       	set
     588:	13 f8       	bld	r1, 3
     58a:	b6 95       	lsr	r27
     58c:	a7 95       	ror	r26
     58e:	97 95       	ror	r25
     590:	87 95       	ror	r24
     592:	16 94       	lsr	r1
     594:	d1 f7       	brne	.-12     	; 0x58a <usart_set_baudrate+0x64>
		min_rate /= 2;
     596:	48 01       	movw	r8, r16
     598:	59 01       	movw	r10, r18
     59a:	07 2e       	mov	r0, r23
     59c:	74 e1       	ldi	r23, 0x14	; 20
     59e:	b6 94       	lsr	r11
     5a0:	a7 94       	ror	r10
     5a2:	97 94       	ror	r9
     5a4:	87 94       	ror	r8
     5a6:	7a 95       	dec	r23
     5a8:	d1 f7       	brne	.-12     	; 0x59e <usart_set_baudrate+0x78>
     5aa:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5ac:	8c 15       	cp	r24, r12
     5ae:	9d 05       	cpc	r25, r13
     5b0:	ae 05       	cpc	r26, r14
     5b2:	bf 05       	cpc	r27, r15
     5b4:	78 f1       	brcs	.+94     	; 0x614 <usart_set_baudrate+0xee>
     5b6:	c8 14       	cp	r12, r8
     5b8:	d9 04       	cpc	r13, r9
     5ba:	ea 04       	cpc	r14, r10
     5bc:	fb 04       	cpc	r15, r11
     5be:	60 f1       	brcs	.+88     	; 0x618 <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     5c0:	88 81       	ld	r24, Y
     5c2:	81 ff       	sbrs	r24, 1
     5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     5c6:	a7 01       	movw	r20, r14
     5c8:	96 01       	movw	r18, r12
     5ca:	22 0f       	add	r18, r18
     5cc:	33 1f       	adc	r19, r19
     5ce:	44 1f       	adc	r20, r20
     5d0:	55 1f       	adc	r21, r21
     5d2:	c3 01       	movw	r24, r6
     5d4:	b2 01       	movw	r22, r4
     5d6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__udivmodsi4>
     5da:	da 01       	movw	r26, r20
     5dc:	c9 01       	movw	r24, r18
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	a1 09       	sbc	r26, r1
     5e2:	b1 09       	sbc	r27, r1
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     5e6:	c9 01       	movw	r24, r18
     5e8:	b8 01       	movw	r22, r16
     5ea:	68 94       	set
     5ec:	13 f8       	bld	r1, 3
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
     5f2:	77 95       	ror	r23
     5f4:	67 95       	ror	r22
     5f6:	16 94       	lsr	r1
     5f8:	d1 f7       	brne	.-12     	; 0x5ee <usart_set_baudrate+0xc8>
     5fa:	a7 01       	movw	r20, r14
     5fc:	96 01       	movw	r18, r12
     5fe:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__udivmodsi4>
     602:	da 01       	movw	r26, r20
     604:	c9 01       	movw	r24, r18
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	a1 09       	sbc	r26, r1
     60a:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     60c:	9d 83       	std	Y+5, r25	; 0x05
     60e:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	03 c0       	rjmp	.+6      	; 0x61a <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <usart_set_baudrate+0xf4>
     618:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     648:	80 3c       	cpi	r24, 0xC0	; 192
     64a:	91 05       	cpc	r25, r1
     64c:	21 f4       	brne	.+8      	; 0x656 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	79 d4       	rcall	.+2290   	; 0xf46 <sysclk_enable_module>
     654:	06 c0       	rjmp	.+12     	; 0x662 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     656:	88 3c       	cpi	r24, 0xC8	; 200
     658:	91 05       	cpc	r25, r1
     65a:	19 f4       	brne	.+6      	; 0x662 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	72 d4       	rcall	.+2276   	; 0xf46 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	8f 73       	andi	r24, 0x3F	; 63
     666:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     668:	f8 01       	movw	r30, r16
     66a:	26 81       	ldd	r18, Z+6	; 0x06
     66c:	35 81       	ldd	r19, Z+5	; 0x05
     66e:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	48 2f       	mov	r20, r24
     674:	43 70       	andi	r20, 0x03	; 3
     676:	44 0f       	add	r20, r20
     678:	99 7f       	andi	r25, 0xF9	; 249
     67a:	94 2b       	or	r25, r20
     67c:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     67e:	99 81       	ldd	r25, Y+1	; 0x01
     680:	84 70       	andi	r24, 0x04	; 4
     682:	88 0f       	add	r24, r24
     684:	88 0f       	add	r24, r24
     686:	9b 7f       	andi	r25, 0xFB	; 251
     688:	89 2b       	or	r24, r25
     68a:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     68c:	8a 81       	ldd	r24, Y+2	; 0x02
     68e:	8f 7c       	andi	r24, 0xCF	; 207
     690:	83 2b       	or	r24, r19
     692:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	97 7f       	andi	r25, 0xF7	; 247
     698:	82 2f       	mov	r24, r18
     69a:	88 0f       	add	r24, r24
     69c:	88 0f       	add	r24, r24
     69e:	88 0f       	add	r24, r24
     6a0:	89 2b       	or	r24, r25
     6a2:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     6a4:	40 81       	ld	r20, Z
     6a6:	51 81       	ldd	r21, Z+1	; 0x01
     6a8:	62 81       	ldd	r22, Z+2	; 0x02
     6aa:	73 81       	ldd	r23, Z+3	; 0x03
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	12 e1       	ldi	r17, 0x12	; 18
     6b0:	2a e7       	ldi	r18, 0x7A	; 122
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	ce 01       	movw	r24, r28
     6b6:	37 df       	rcall	.-402    	; 0x526 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     6b8:	99 81       	ldd	r25, Y+1	; 0x01
     6ba:	98 60       	ori	r25, 0x08	; 8
     6bc:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     6be:	99 81       	ldd	r25, Y+1	; 0x01
     6c0:	90 61       	ori	r25, 0x10	; 16
     6c2:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <usart_serial_getchar>:
}

void sio2host_putchar(uint8_t ch)
{
	sio2host_tx(&ch, 1);
}
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	eb 01       	movw	r28, r22
     6d4:	22 df       	rcall	.-444    	; 0x51a <usart_getchar>
     6d6:	88 83       	st	Y, r24
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <usart_serial_putchar>:
     6de:	16 cf       	rjmp	.-468    	; 0x50c <usart_putchar>
     6e0:	08 95       	ret

000006e2 <sio2host_init>:
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	27 97       	sbiw	r28, 0x07	; 7
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	08 ec       	ldi	r16, 0xC8	; 200
     6fc:	10 e0       	ldi	r17, 0x00	; 0
     6fe:	10 93 aa 05 	sts	0x05AA, r17	; 0x8005aa <stdio_base+0x1>
     702:	00 93 a9 05 	sts	0x05A9, r16	; 0x8005a9 <stdio_base>
     706:	8f e6       	ldi	r24, 0x6F	; 111
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <ptr_put+0x1>
     70e:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <ptr_put>
     712:	87 e6       	ldi	r24, 0x67	; 103
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <ptr_get+0x1>
     71a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <ptr_get>
     71e:	ea e0       	ldi	r30, 0x0A	; 10
     720:	f2 e0       	ldi	r31, 0x02	; 2
     722:	84 81       	ldd	r24, Z+4	; 0x04
     724:	8d 83       	std	Y+5, r24	; 0x05
     726:	85 81       	ldd	r24, Z+5	; 0x05
     728:	8e 83       	std	Y+6, r24	; 0x06
     72a:	86 81       	ldd	r24, Z+6	; 0x06
     72c:	8f 83       	std	Y+7, r24	; 0x07
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	a2 81       	ldd	r26, Z+2	; 0x02
     734:	b3 81       	ldd	r27, Z+3	; 0x03
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	ab 83       	std	Y+3, r26	; 0x03
     73c:	bc 83       	std	Y+4, r27	; 0x04
     73e:	be 01       	movw	r22, r28
     740:	6f 5f       	subi	r22, 0xFF	; 255
     742:	7f 4f       	sbci	r23, 0xFF	; 255
     744:	88 ec       	ldi	r24, 0xC8	; 200
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	79 df       	rcall	.-270    	; 0x63c <usart_init_rs232>
     74a:	6b e5       	ldi	r22, 0x5B	; 91
     74c:	72 e0       	ldi	r23, 0x02	; 2
     74e:	84 e7       	ldi	r24, 0x74	; 116
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 85 1c 	call	0x390a	; 0x390a <fdevopen>
     756:	f8 01       	movw	r30, r16
     758:	81 81       	ldd	r24, Z+1	; 0x01
     75a:	80 68       	ori	r24, 0x80	; 128
     75c:	81 83       	std	Z+1, r24	; 0x01
     75e:	27 96       	adiw	r28, 0x07	; 7
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <sio2host_tx>:
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	8c 01       	movw	r16, r24
     780:	f6 2e       	mov	r15, r22
     782:	c6 2f       	mov	r28, r22
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	ae 01       	movw	r20, r28
     788:	b8 01       	movw	r22, r16
     78a:	88 ec       	ldi	r24, 0xC8	; 200
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	5f de       	rcall	.-834    	; 0x44e <usart_serial_write_packet>
     790:	81 11       	cpse	r24, r1
     792:	f9 cf       	rjmp	.-14     	; 0x786 <sio2host_tx+0x12>
     794:	8f 2d       	mov	r24, r15
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	08 95       	ret

000007a2 <sio2host_rx>:
     7a2:	dc 01       	movw	r26, r24
     7a4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <serial_rx_buf_tail>
     7a8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <serial_rx_buf_head>
     7ac:	89 17       	cp	r24, r25
     7ae:	28 f0       	brcs	.+10     	; 0x7ba <sio2host_rx+0x18>
     7b0:	28 2f       	mov	r18, r24
     7b2:	29 1b       	sub	r18, r25
     7b4:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <serial_rx_count>
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <sio2host_rx+0x22>
     7ba:	2c e9       	ldi	r18, 0x9C	; 156
     7bc:	28 0f       	add	r18, r24
     7be:	29 1b       	sub	r18, r25
     7c0:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <serial_rx_count>
     7c4:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <serial_rx_count>
     7c8:	99 23       	and	r25, r25
     7ca:	31 f1       	breq	.+76     	; 0x818 <sio2host_rx+0x76>
     7cc:	9c 39       	cpi	r25, 0x9C	; 156
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <sio2host_rx+0x3e>
     7d0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <serial_rx_buf_head>
     7d4:	8c e9       	ldi	r24, 0x9C	; 156
     7d6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <serial_rx_count>
     7da:	6c 39       	cpi	r22, 0x9C	; 156
     7dc:	38 f4       	brcc	.+14     	; 0x7ec <sio2host_rx+0x4a>
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <sio2host_rx+0x44>
     7e0:	96 17       	cp	r25, r22
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <sio2host_rx+0x44>
     7e4:	69 2f       	mov	r22, r25
     7e6:	61 11       	cpse	r22, r1
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <sio2host_rx+0x4c>
     7ea:	18 c0       	rjmp	.+48     	; 0x81c <sio2host_rx+0x7a>
     7ec:	6c e9       	ldi	r22, 0x9C	; 156
     7ee:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <serial_rx_buf_head>
     7f2:	26 2f       	mov	r18, r22
     7f4:	e9 2f       	mov	r30, r25
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	e0 5e       	subi	r30, 0xE0	; 224
     7fa:	fd 4f       	sbci	r31, 0xFD	; 253
     7fc:	30 81       	ld	r19, Z
     7fe:	3d 93       	st	X+, r19
     800:	21 50       	subi	r18, 0x01	; 1
     802:	9b 39       	cpi	r25, 0x9B	; 155
     804:	11 f0       	breq	.+4      	; 0x80a <sio2host_rx+0x68>
     806:	9f 5f       	subi	r25, 0xFF	; 255
     808:	01 c0       	rjmp	.+2      	; 0x80c <sio2host_rx+0x6a>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	21 11       	cpse	r18, r1
     80e:	f2 cf       	rjmp	.-28     	; 0x7f4 <sio2host_rx+0x52>
     810:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <serial_rx_buf_head>
     814:	86 2f       	mov	r24, r22
     816:	08 95       	ret
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	08 95       	ret
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret

00000820 <sio2host_getchar_nowait>:

int sio2host_getchar_nowait(void)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8_t c;
	int back = sio2host_rx(&c, 1);
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	b8 df       	rcall	.-144    	; 0x7a2 <sio2host_rx>
	if (back >= 1) {
     832:	88 23       	and	r24, r24
     834:	19 f0       	breq	.+6      	; 0x83c <sio2host_getchar_nowait+0x1c>
		return c;
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <sio2host_getchar_nowait+0x20>
	} else {
		return (-1);
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     840:	0f 90       	pop	r0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	be 01       	movw	r22, r28
     87e:	6f 5f       	subi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	88 ec       	ldi	r24, 0xC8	; 200
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	fd dd       	rcall	.-1030   	; 0x482 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     888:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     88a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <serial_rx_buf_tail>
     88e:	e8 2f       	mov	r30, r24
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	e0 5e       	subi	r30, 0xE0	; 224
     894:	fd 4f       	sbci	r31, 0xFD	; 253
     896:	99 81       	ldd	r25, Y+1	; 0x01
     898:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     89a:	8b 39       	cpi	r24, 0x9B	; 155
     89c:	19 f4       	brne	.+6      	; 0x8a4 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     89e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <serial_rx_buf_tail>
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     8aa:	78 94       	sei
}
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0b be       	out	0x3b, r0	; 59
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     8da:	61 50       	subi	r22, 0x01	; 1
     8dc:	71 09       	sbc	r23, r1
     8de:	81 09       	sbc	r24, r1
     8e0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	81 05       	cpc	r24, r1
     8e8:	91 05       	cpc	r25, r1
     8ea:	b9 f7       	brne	.-18     	; 0x8da <__portable_avr_delay_cycles+0x2>
     8ec:	08 95       	ret

000008ee <usr_frame_received_cb>:
	}
		
}

void usr_frame_received_cb(frame_info_t *frame)
{
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	8c 01       	movw	r16, r24
	memset(&trama_recibida,0,sizeof(trama_recibida));// Elimina informacion previa de la estructura de recepcion
     8f8:	cb ea       	ldi	r28, 0xAB	; 171
     8fa:	d5 e0       	ldi	r29, 0x05	; 5
     8fc:	81 e7       	ldi	r24, 0x71	; 113
     8fe:	de 01       	movw	r26, r28
     900:	1d 92       	st	X+, r1
     902:	8a 95       	dec	r24
     904:	e9 f7       	brne	.-6      	; 0x900 <usr_frame_received_cb+0x12>
	memcpy(&trama_recibida,frame->mpdu,sizeof(trama_recibida));// copia la informacion de la memoria fuente(buffer) al detino
     906:	d8 01       	movw	r26, r16
     908:	17 96       	adiw	r26, 0x07	; 7
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	18 97       	sbiw	r26, 0x08	; 8
     910:	91 e7       	ldi	r25, 0x71	; 113
     912:	de 01       	movw	r26, r28
     914:	01 90       	ld	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	9a 95       	dec	r25
     91a:	e1 f7       	brne	.-8      	; 0x914 <usr_frame_received_cb+0x26>
	//bmm_buffer_free(frame->buffer_header);//Elimina los datos del buffer, evita superpocicion.
	if (trama_recibida.d_dstn==SRC_ADDR) // Si se cumple esta condicion la trama es de subida
     91c:	2e 81       	ldd	r18, Y+6	; 0x06
     91e:	3f 81       	ldd	r19, Y+7	; 0x07
     920:	28 30       	cpi	r18, 0x08	; 8
     922:	31 05       	cpc	r19, r1
     924:	59 f4       	brne	.+22     	; 0x93c <usr_frame_received_cb+0x4e>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	8c b9       	out	0x0c, r24	; 12
	{
		LED_Toggle(LED2);
		sio2host_tx(&(frame->mpdu[FRAME_OVERHEAD-FCS_LEN+1]),(frame->mpdu[0])-FRAME_OVERHEAD);
     92a:	f8 01       	movw	r30, r16
     92c:	87 81       	ldd	r24, Z+7	; 0x07
     92e:	90 85       	ldd	r25, Z+8	; 0x08
     930:	dc 01       	movw	r26, r24
     932:	6c 91       	ld	r22, X
     934:	6b 50       	subi	r22, 0x0B	; 11
     936:	0a 96       	adiw	r24, 0x0a	; 10
     938:	1d df       	rcall	.-454    	; 0x774 <sio2host_tx>
     93a:	3b c0       	rjmp	.+118    	; 0x9b2 <usr_frame_received_cb+0xc4>
	}
	else if(trama_recibida.d_dstn==0xFFFF) // Si se cumple esta condicion la trama es de bajada
     93c:	2f 3f       	cpi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	c1 f5       	brne	.+112    	; 0x9b2 <usr_frame_received_cb+0xc4>
     942:	80 e4       	ldi	r24, 0x40	; 64
     944:	89 b9       	out	0x09, r24	; 9
		//int longitudListaNS_1=sizeof(listaNS);
		int longitudListaNS_1=7;
		// Berificar que el Nivel de energia no ha sido almacenado previamente
		for (int i=0; i<longitudListaNS_1; i++)
		{
			if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
     946:	40 91 b3 05 	lds	r20, 0x05B3	; 0x8005b3 <trama_recibida+0x8>
     94a:	50 91 b4 05 	lds	r21, 0x05B4	; 0x8005b4 <trama_recibida+0x9>
     94e:	ec e1       	ldi	r30, 0x1C	; 28
     950:	f6 e0       	ldi	r31, 0x06	; 6
     952:	68 e3       	ldi	r22, 0x38	; 56
     954:	76 e0       	ldi	r23, 0x06	; 6
		sio2host_tx(&(frame->mpdu[FRAME_OVERHEAD-FCS_LEN+1]),(frame->mpdu[0])-FRAME_OVERHEAD);
	}
	else if(trama_recibida.d_dstn==0xFFFF) // Si se cumple esta condicion la trama es de bajada
	{   LED_Toggle(LED0);
		// Almacenar Niveles de Energia ////////////////////////////////////////////////////////////
		int coincedencia_ID_NS=0;
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
		// Berificar que el Nivel de energia no ha sido almacenado previamente
		for (int i=0; i<longitudListaNS_1; i++)
		{
			if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
			{
				coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	80 e0       	ldi	r24, 0x00	; 0
		//int longitudListaNS_1=sizeof(listaNS);
		int longitudListaNS_1=7;
		// Berificar que el Nivel de energia no ha sido almacenado previamente
		for (int i=0; i<longitudListaNS_1; i++)
		{
			if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
     95e:	22 81       	ldd	r18, Z+2	; 0x02
     960:	33 81       	ldd	r19, Z+3	; 0x03
     962:	24 17       	cp	r18, r20
     964:	35 07       	cpc	r19, r21
     966:	11 f4       	brne	.+4      	; 0x96c <usr_frame_received_cb+0x7e>
			{
				coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
     968:	a9 2f       	mov	r26, r25
     96a:	b8 2f       	mov	r27, r24
     96c:	34 96       	adiw	r30, 0x04	; 4
		// Almacenar Niveles de Energia ////////////////////////////////////////////////////////////
		int coincedencia_ID_NS=0;
		//int longitudListaNS_1=sizeof(listaNS);
		int longitudListaNS_1=7;
		// Berificar que el Nivel de energia no ha sido almacenado previamente
		for (int i=0; i<longitudListaNS_1; i++)
     96e:	e6 17       	cp	r30, r22
     970:	f7 07       	cpc	r31, r23
     972:	a9 f7       	brne	.-22     	; 0x95e <usr_frame_received_cb+0x70>
			if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
			{
				coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
			}
			}
			if (coincedencia_ID_NS==0)// Si esta condicion se cumple, el NS de la trama rx se debe extraer del buffer y almacenarlo
     974:	ab 2b       	or	r26, r27
     976:	e9 f4       	brne	.+58     	; 0x9b2 <usr_frame_received_cb+0xc4>
			{
				// Extraccion del nivel de energia
				uint8_t *payload_ptr=frame->mpdu;
     978:	f8 01       	movw	r30, r16
     97a:	a7 81       	ldd	r26, Z+7	; 0x07
     97c:	b0 85       	ldd	r27, Z+8	; 0x08
				uint8_t mpdu_len =payload_ptr[0]+2;
				uint8_t potencia_trama=payload_ptr[mpdu_len];
				//Agregacion de nuevos datos de NS
				listaNS[cont_NS].NS=potencia_trama;
     97e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <cont_NS>
     982:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <cont_NS+0x1>
     986:	fc 01       	movw	r30, r24
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	e4 5e       	subi	r30, 0xE4	; 228
     992:	f9 4f       	sbci	r31, 0xF9	; 249
			if (coincedencia_ID_NS==0)// Si esta condicion se cumple, el NS de la trama rx se debe extraer del buffer y almacenarlo
			{
				// Extraccion del nivel de energia
				uint8_t *payload_ptr=frame->mpdu;
				uint8_t mpdu_len =payload_ptr[0]+2;
				uint8_t potencia_trama=payload_ptr[mpdu_len];
     994:	2c 91       	ld	r18, X
     996:	2e 5f       	subi	r18, 0xFE	; 254
     998:	a2 0f       	add	r26, r18
     99a:	b1 1d       	adc	r27, r1
				//Agregacion de nuevos datos de NS
				listaNS[cont_NS].NS=potencia_trama;
     99c:	2c 91       	ld	r18, X
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	20 83       	st	Z, r18
				listaNS[cont_NS].ID_DIR_NS=trama_recibida.d_orgn;
     9a4:	53 83       	std	Z+3, r21	; 0x03
     9a6:	42 83       	std	Z+2, r20	; 0x02
				cont_NS++;
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <cont_NS+0x1>
     9ae:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <cont_NS>
			}
	}
	delay_ms(0);
     9b2:	62 e0       	ldi	r22, 0x02	; 2
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	8e df       	rcall	.-228    	; 0x8d8 <__portable_avr_delay_cycles>
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	08 95       	ret

000009c6 <usr_frame_transmitted_cb>:

void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     9c6:	08 95       	ret

000009c8 <reverse>:

///////////////////////////////////////////////////////////////////////////////////

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     9c8:	9b 01       	movw	r18, r22
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	31 09       	sbc	r19, r1
	while (i < j) {
     9ce:	12 16       	cp	r1, r18
     9d0:	13 06       	cpc	r1, r19
     9d2:	84 f4       	brge	.+32     	; 0x9f4 <reverse+0x2c>
     9d4:	fc 01       	movw	r30, r24
     9d6:	e6 0f       	add	r30, r22
     9d8:	f7 1f       	adc	r31, r23
     9da:	dc 01       	movw	r26, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[i];
     9e0:	4c 91       	ld	r20, X
		str[i] = str[j];
     9e2:	52 91       	ld	r21, -Z
     9e4:	5d 93       	st	X+, r21
		str[j] = temp;
     9e6:	40 83       	st	Z, r20
		i++;
     9e8:	01 96       	adiw	r24, 0x01	; 1
		j--;
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	31 09       	sbc	r19, r1
///////////////////////////////////////////////////////////////////////////////////

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     9ee:	82 17       	cp	r24, r18
     9f0:	93 07       	cpc	r25, r19
     9f2:	b4 f3       	brlt	.-20     	; 0x9e0 <reverse+0x18>
     9f4:	08 95       	ret

000009f6 <intToStr>:
		j--;
	}
}

int intToStr(int x, char str[], int d)
{
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	6b 01       	movw	r12, r22
     a08:	8a 01       	movw	r16, r20
	int i = 0;
	while (x) {
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	99 f0       	breq	.+38     	; 0xa34 <intToStr+0x3e>
     a0e:	eb 01       	movw	r28, r22
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	f0 e0       	ldi	r31, 0x00	; 0
		str[i++] = (x % 10) + '0';
     a14:	0f 2e       	mov	r0, r31
     a16:	fa e0       	ldi	r31, 0x0A	; 10
     a18:	ef 2e       	mov	r14, r31
     a1a:	f1 2c       	mov	r15, r1
     a1c:	f0 2d       	mov	r31, r0
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__divmodhi4>
     a26:	80 5d       	subi	r24, 0xD0	; 208
     a28:	89 93       	st	Y+, r24
		x = x / 10;
     a2a:	86 2f       	mov	r24, r22
     a2c:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	b1 f7       	brne	.-20     	; 0xa1e <intToStr+0x28>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <intToStr+0x42>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     a38:	e0 17       	cp	r30, r16
     a3a:	f1 07       	cpc	r31, r17
     a3c:	5c f4       	brge	.+22     	; 0xa54 <intToStr+0x5e>
     a3e:	ec 0d       	add	r30, r12
     a40:	fd 1d       	adc	r31, r13
     a42:	96 01       	movw	r18, r12
     a44:	20 0f       	add	r18, r16
     a46:	31 1f       	adc	r19, r17
	str[i++] = '0';
     a48:	80 e3       	ldi	r24, 0x30	; 48
     a4a:	81 93       	st	Z+, r24
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     a4c:	e2 17       	cp	r30, r18
     a4e:	f3 07       	cpc	r31, r19
     a50:	e1 f7       	brne	.-8      	; 0xa4a <intToStr+0x54>
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <intToStr+0x60>
     a54:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
     a56:	b8 01       	movw	r22, r16
     a58:	c6 01       	movw	r24, r12
     a5a:	b6 df       	rcall	.-148    	; 0x9c8 <reverse>
	str[i] = '\0';
     a5c:	e6 01       	movw	r28, r12
     a5e:	c0 0f       	add	r28, r16
     a60:	d1 1f       	adc	r29, r17
     a62:	18 82       	st	Y, r1
	return i;
}
     a64:	c8 01       	movw	r24, r16
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	08 95       	ret

00000a78 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
     a78:	2f 92       	push	r2
     a7a:	3f 92       	push	r3
     a7c:	4f 92       	push	r4
     a7e:	5f 92       	push	r5
     a80:	6f 92       	push	r6
     a82:	7f 92       	push	r7
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	8a 01       	movw	r16, r20
     aa2:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
     aa4:	0e 94 a7 18 	call	0x314e	; 0x314e <__fixsfsi>
     aa8:	6b 01       	movw	r12, r22
     aaa:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	b8 01       	movw	r22, r16
     ab2:	c6 01       	movw	r24, r12
     ab4:	a0 df       	rcall	.-192    	; 0x9f6 <intToStr>
     ab6:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0) {
     ab8:	20 97       	sbiw	r28, 0x00	; 0
     aba:	91 f1       	breq	.+100    	; 0xb20 <ftoa+0xa8>
		res[i] = '.'; // add dot
     abc:	f8 01       	movw	r30, r16
     abe:	e8 0f       	add	r30, r24
     ac0:	f9 1f       	adc	r31, r25
     ac2:	8e e2       	ldi	r24, 0x2E	; 46
     ac4:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     ac6:	be 01       	movw	r22, r28
     ac8:	0d 2e       	mov	r0, r29
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatsisf>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	91 e4       	ldi	r25, 0x41	; 65
     ae0:	0e 94 c9 19 	call	0x3392	; 0x3392 <pow>
     ae4:	2b 01       	movw	r4, r22
     ae6:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     ae8:	b6 01       	movw	r22, r12
     aea:	dd 0c       	add	r13, r13
     aec:	88 0b       	sbc	r24, r24
     aee:	99 0b       	sbc	r25, r25
     af0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatsisf>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c5 01       	movw	r24, r10
     afa:	b4 01       	movw	r22, r8
     afc:	0e 94 42 18 	call	0x3084	; 0x3084 <__subsf3>
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	22 1a       	sub	r2, r18
     b04:	32 0a       	sbc	r3, r18
     b06:	02 0d       	add	r16, r2
     b08:	13 1d       	adc	r17, r3
     b0a:	a3 01       	movw	r20, r6
     b0c:	92 01       	movw	r18, r4
     b0e:	0e 94 66 19 	call	0x32cc	; 0x32cc <__mulsf3>
     b12:	0e 94 a7 18 	call	0x314e	; 0x314e <__fixsfsi>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	ae 01       	movw	r20, r28
     b1c:	b8 01       	movw	r22, r16
     b1e:	6b df       	rcall	.-298    	; 0x9f6 <intToStr>
	}
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	9f 90       	pop	r9
     b36:	8f 90       	pop	r8
     b38:	7f 90       	pop	r7
     b3a:	6f 90       	pop	r6
     b3c:	5f 90       	pop	r5
     b3e:	4f 90       	pop	r4
     b40:	3f 90       	pop	r3
     b42:	2f 90       	pop	r2
     b44:	08 95       	ret

00000b46 <get_bat_sensor_data>:
////////////////////////////////////////////////////////////////////////////////////7
float get_bat_sensor_data(void)
{
	float bat_voltage;
	bat_voltage = reverse_float(convert_mv_to_v(tfa_get_batmon_voltage()));
     b46:	0e 94 3d 13 	call	0x267a	; 0x267a <tfa_get_batmon_voltage>
	return bat_voltage;
     b4a:	bc 01       	movw	r22, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__floatunsisf>
     b54:	2f e6       	ldi	r18, 0x6F	; 111
     b56:	32 e1       	ldi	r19, 0x12	; 18
     b58:	43 e8       	ldi	r20, 0x83	; 131
     b5a:	5a e3       	ldi	r21, 0x3A	; 58
     b5c:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__mulsf3>
}
     b60:	08 95       	ret

00000b62 <usr_wireless_app_task>:
void reverse(char* str, int len);
int intToStr(int x, char str[], int d);
void ftoa(float n, char* res, int afterpoint);

void usr_wireless_app_task(void)
{
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	cb 54       	subi	r28, 0x4B	; 75
     b6e:	d1 09       	sbc	r29, r1
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	uint8_t mensaje_2[5];
	//mensaje_2[0]=(uint8_t)(direccion >> 8);
	//mensaje_2[1]=(uint8_t)direccion;
	mensaje_2[0]='a';
     b7a:	81 e6       	ldi	r24, 0x61	; 97
     b7c:	89 83       	std	Y+1, r24	; 0x01
	mensaje_2[1]='b';
     b7e:	82 e6       	ldi	r24, 0x62	; 98
     b80:	8a 83       	std	Y+2, r24	; 0x02
	mensaje_2[2]=0x00;
     b82:	1b 82       	std	Y+3, r1	; 0x03
	mensaje_2[3]=0x0A;
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	8c 83       	std	Y+4, r24	; 0x04
	mensaje_2[4]=0xFF;
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	8d 83       	std	Y+5, r24	; 0x05
	
	int8_t chat_input = sio2host_getchar_nowait();
     b8c:	49 de       	rcall	.-878    	; 0x820 <sio2host_getchar_nowait>
     b8e:	18 2f       	mov	r17, r24
	static uint8_t payload_length,payload[aMaxPHYPacketSize-FRAME_OVERHEAD];	
	if (chat_input != -1)
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	09 f4       	brne	.+2      	; 0xb96 <usr_wireless_app_task+0x34>
     b94:	88 c0       	rjmp	.+272    	; 0xca6 <usr_wireless_app_task+0x144>
	{
		if(payload_length == 0)
		{
		//	printf("\n\r TX :");
		}	
		payload[payload_length++] = chat_input;
     b96:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <payload_length.3563>
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	9e 0f       	add	r25, r30
     b9e:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <payload_length.3563>
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	e4 54       	subi	r30, 0x44	; 68
     ba6:	fd 4f       	sbci	r31, 0xFD	; 253
     ba8:	80 83       	st	Z, r24
		
	}
	if((chat_input == '\r')||(payload_length == (aMaxPHYPacketSize-FRAME_OVERHEAD)))
     baa:	1d 30       	cpi	r17, 0x0D	; 13
     bac:	19 f0       	breq	.+6      	; 0xbb4 <usr_wireless_app_task+0x52>
     bae:	94 37       	cpi	r25, 0x74	; 116
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <usr_wireless_app_task+0x52>
     bb2:	75 c0       	rjmp	.+234    	; 0xc9e <usr_wireless_app_task+0x13c>
	{	
		//LED_Toggle(LED0);
		transmit_sample_frame(payload,payload_length-1);	
     bb4:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <payload_length.3563>
     bb8:	61 50       	subi	r22, 0x01	; 1
     bba:	8c eb       	ldi	r24, 0xBC	; 188
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	25 d1       	rcall	.+586    	; 0xe0a <transmit_sample_frame>
		sio2host_tx(mensaje_2,5);
     bc0:	65 e0       	ldi	r22, 0x05	; 5
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	d6 dd       	rcall	.-1108   	; 0x774 <sio2host_tx>
		payload_length = 0;
     bc8:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <payload_length.3563>
     bcc:	68 c0       	rjmp	.+208    	; 0xc9e <usr_wireless_app_task+0x13c>
     bce:	80 e4       	ldi	r24, 0x40	; 64
     bd0:	89 b9       	out	0x09, r24	; 9
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	82 bb       	out	0x12, r24	; 18
     bd6:	8c b9       	out	0x0c, r24	; 12
	if((chat_input == 'c')||(payload_length == (aMaxPHYPacketSize-FRAME_OVERHEAD)))
	{	
		LED_Toggle(LED0);
		LED_Toggle(LED1);
		LED_Toggle(LED2);
		if (cont_NS==0)
     bd8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <cont_NS>
     bdc:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <cont_NS+0x1>
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	39 f4       	brne	.+14     	; 0xbf2 <usr_wireless_app_task+0x90>
		{
			longitudListaNS=1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <longitudListaNS+0x1>
     bec:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <longitudListaNS>
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <usr_wireless_app_task+0x9e>
		}
		else if (cont_NS>0)
     bf2:	18 16       	cp	r1, r24
     bf4:	19 06       	cpc	r1, r25
     bf6:	24 f4       	brge	.+8      	; 0xc00 <usr_wireless_app_task+0x9e>
		{
			longitudListaNS=cont_NS;
     bf8:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <longitudListaNS+0x1>
     bfc:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <longitudListaNS>
		}
		
		// Obtener nivel de Bateria ////////////////////////////////////////////////////////////
		char charBateria[20]; // Almacena el nivel de la bateria comvertido en una cadena de caracteres
		float floatBateria=get_bat_sensor_data();// Obtiene en nivel de bateria
     c00:	a2 df       	rcall	.-188    	; 0xb46 <get_bat_sensor_data>
		ftoa(floatBateria, charBateria, 4);// Combierte el nivel de bateria de float a una cadena de caracteres hexadecimales
     c02:	24 e0       	ldi	r18, 0x04	; 4
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	ae 01       	movw	r20, r28
     c08:	48 5c       	subi	r20, 0xC8	; 200
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
     c0c:	35 df       	rcall	.-406    	; 0xa78 <ftoa>
		NB[0]=(uint8_t)charBateria[0];// almacena los cuatro primeros valores de la cadena en el vector NB
     c0e:	38 ad       	ldd	r19, Y+56	; 0x38
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	30 83       	st	Z, r19
		NB[1]=(uint8_t)charBateria[1];
     c16:	29 ad       	ldd	r18, Y+57	; 0x39
     c18:	21 83       	std	Z+1, r18	; 0x01
		NB[2]=(uint8_t)charBateria[2];
     c1a:	9a ad       	ldd	r25, Y+58	; 0x3a
     c1c:	92 83       	std	Z+2, r25	; 0x02
		NB[3]=(uint8_t)charBateria[3];	
     c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c20:	83 83       	std	Z+3, r24	; 0x03
			
		int indice=0;
		uint8_t TRAMA[50];//Trama de subida
		//-------IDENTIFICADOR FUENTE---------------------------------------//
		TRAMA[0]=(uint8_t)(SRC_ADDR >> 8);
     c22:	1e 82       	std	Y+6, r1	; 0x06
		TRAMA[1]=(uint8_t) SRC_ADDR;
     c24:	48 e0       	ldi	r20, 0x08	; 8
     c26:	4f 83       	std	Y+7, r20	; 0x07
		//-------NIVEL DE BATERIA-------------------------------------------//	
		TRAMA[2]=NB[0];
     c28:	38 87       	std	Y+8, r19	; 0x08
		TRAMA[3]=NB[1];
     c2a:	29 87       	std	Y+9, r18	; 0x09
		TRAMA[4]=NB[2];		
     c2c:	9a 87       	std	Y+10, r25	; 0x0a
		TRAMA[5]=NB[3];	
     c2e:	8b 87       	std	Y+11, r24	; 0x0b
			
		for (int i=0; i<longitudListaNS; i++)
     c30:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <longitudListaNS>
     c34:	70 91 34 03 	lds	r23, 0x0334	; 0x800334 <longitudListaNS+0x1>
     c38:	16 16       	cp	r1, r22
     c3a:	17 06       	cpc	r1, r23
     c3c:	f4 f4       	brge	.+60     	; 0xc7a <usr_wireless_app_task+0x118>
     c3e:	ac e1       	ldi	r26, 0x1C	; 28
     c40:	b6 e0       	ldi	r27, 0x06	; 6
     c42:	fe 01       	movw	r30, r28
     c44:	36 96       	adiw	r30, 0x06	; 6
     c46:	9b 01       	movw	r18, r22
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	2e 0f       	add	r18, r30
     c52:	3f 1f       	adc	r19, r31
		{	
		//-------NIVEL DE SEÑAL--------------------------------------------//
			TRAMA[indice+6]=(uint8_t)(listaNS[i].NS >> 8);
     c54:	8c 91       	ld	r24, X
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	9c 91       	ld	r25, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	96 83       	std	Z+6, r25	; 0x06
			TRAMA[indice+7]=(uint8_t)listaNS[i].NS;
     c5e:	87 83       	std	Z+7, r24	; 0x07
		//-------IDENTIFICADOR DEL NIVEL DE SEÑAL--------------------------//
			TRAMA[indice+8]=(uint8_t)(listaNS[i].ID_DIR_NS >> 8);
     c60:	12 96       	adiw	r26, 0x02	; 2
     c62:	8c 91       	ld	r24, X
     c64:	12 97       	sbiw	r26, 0x02	; 2
     c66:	13 96       	adiw	r26, 0x03	; 3
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	90 87       	std	Z+8, r25	; 0x08
			TRAMA[indice+9]=(uint8_t)listaNS[i].ID_DIR_NS;
     c6e:	81 87       	std	Z+9, r24	; 0x09
     c70:	14 96       	adiw	r26, 0x04	; 4
     c72:	34 96       	adiw	r30, 0x04	; 4
		TRAMA[2]=NB[0];
		TRAMA[3]=NB[1];
		TRAMA[4]=NB[2];		
		TRAMA[5]=NB[3];	
			
		for (int i=0; i<longitudListaNS; i++)
     c74:	e2 17       	cp	r30, r18
     c76:	f3 07       	cpc	r31, r19
     c78:	69 f7       	brne	.-38     	; 0xc54 <usr_wireless_app_task+0xf2>
			TRAMA[indice+8]=(uint8_t)(listaNS[i].ID_DIR_NS >> 8);
			TRAMA[indice+9]=(uint8_t)listaNS[i].ID_DIR_NS;
			
			indice=indice+4;
		}
		TRAMA[(longitudListaNS*4)+6]=0xFE;// CH de parada
     c7a:	fb 01       	movw	r30, r22
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ec 0f       	add	r30, r28
     c86:	fd 1f       	adc	r31, r29
     c88:	8e ef       	ldi	r24, 0xFE	; 254
     c8a:	84 87       	std	Z+12, r24	; 0x0c

		//transmit_sample_frame(TRAMA, (longitudListaNS*4)+7);
		sio2host_tx(TRAMA, (longitudListaNS*4)+7);
     c8c:	66 0f       	add	r22, r22
     c8e:	66 0f       	add	r22, r22
     c90:	69 5f       	subi	r22, 0xF9	; 249
     c92:	ce 01       	movw	r24, r28
     c94:	06 96       	adiw	r24, 0x06	; 6
     c96:	6e dd       	rcall	.-1316   	; 0x774 <sio2host_tx>
		payload_length = 0;
     c98:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <payload_length.3563>
	}
		
}
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <usr_wireless_app_task+0x14e>
		//LED_Toggle(LED0);
		transmit_sample_frame(payload,payload_length-1);	
		sio2host_tx(mensaje_2,5);
		payload_length = 0;
	}
	if((chat_input == 'c')||(payload_length == (aMaxPHYPacketSize-FRAME_OVERHEAD)))
     c9e:	13 36       	cpi	r17, 0x63	; 99
     ca0:	09 f4       	brne	.+2      	; 0xca4 <usr_wireless_app_task+0x142>
     ca2:	95 cf       	rjmp	.-214    	; 0xbce <usr_wireless_app_task+0x6c>
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <usr_wireless_app_task+0x14e>
		//	printf("\n\r TX :");
		}	
		payload[payload_length++] = chat_input;
		
	}
	if((chat_input == '\r')||(payload_length == (aMaxPHYPacketSize-FRAME_OVERHEAD)))
     ca6:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <payload_length.3563>
     caa:	84 37       	cpi	r24, 0x74	; 116
     cac:	09 f4       	brne	.+2      	; 0xcb0 <usr_wireless_app_task+0x14e>
     cae:	82 cf       	rjmp	.-252    	; 0xbb4 <usr_wireless_app_task+0x52>
		//transmit_sample_frame(TRAMA, (longitudListaNS*4)+7);
		sio2host_tx(TRAMA, (longitudListaNS*4)+7);
		payload_length = 0;
	}
		
}
     cb0:	c5 5b       	subi	r28, 0xB5	; 181
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     cc6:	4f 92       	push	r4
     cc8:	5f 92       	push	r5
     cca:	6f 92       	push	r6
     ccc:	7f 92       	push	r7
     cce:	8f 92       	push	r8
     cd0:	af 92       	push	r10
     cd2:	cf 92       	push	r12
     cd4:	ef 92       	push	r14
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     ce2:	a9 e8       	ldi	r26, 0x89	; 137
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ae 19       	sub	r26, r14
     ce8:	b1 09       	sbc	r27, r1
     cea:	fd 01       	movw	r30, r26
     cec:	e9 5c       	subi	r30, 0xC9	; 201
     cee:	fc 4f       	sbci	r31, 0xFC	; 252
     cf0:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     cf2:	ee 20       	and	r14, r14
     cf4:	79 f0       	breq	.+30     	; 0xd14 <transmit_frame+0x4e>
     cf6:	d8 01       	movw	r26, r16
     cf8:	44 24       	eor	r4, r4
     cfa:	4a 94       	dec	r4
     cfc:	4e 0c       	add	r4, r14
     cfe:	51 2c       	mov	r5, r1
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	49 1a       	sub	r4, r25
     d04:	59 0a       	sbc	r5, r25
     d06:	04 0d       	add	r16, r4
     d08:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     d0a:	9d 91       	ld	r25, X+
     d0c:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     d0e:	a0 17       	cp	r26, r16
     d10:	b1 07       	cpc	r27, r17
     d12:	d9 f7       	brne	.-10     	; 0xd0a <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     d14:	42 30       	cpi	r20, 0x02	; 2
     d16:	61 f4       	brne	.+24     	; 0xd30 <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     d18:	3b e0       	ldi	r19, 0x0B	; 11
     d1a:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     d1c:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     d1e:	40 91 85 06 	lds	r20, 0x0685	; 0x800685 <tal_pib+0xc>
     d22:	50 91 86 06 	lds	r21, 0x0686	; 0x800686 <tal_pib+0xd>
     d26:	5e 93       	st	-X, r21
     d28:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e8       	ldi	r21, 0x80	; 128
     d2e:	26 c0       	rjmp	.+76     	; 0xd7c <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     d30:	d3 01       	movw	r26, r6
     d32:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     d34:	31 e1       	ldi	r19, 0x11	; 17
     d36:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     d38:	e9 e7       	ldi	r30, 0x79	; 121
     d3a:	f6 e0       	ldi	r31, 0x06	; 6
     d3c:	90 81       	ld	r25, Z
     d3e:	9c 93       	st	X, r25
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	9c 93       	st	X, r25
     d46:	11 97       	sbiw	r26, 0x01	; 1
     d48:	92 81       	ldd	r25, Z+2	; 0x02
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	9c 93       	st	X, r25
     d4e:	12 97       	sbiw	r26, 0x02	; 2
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	9c 93       	st	X, r25
     d56:	13 97       	sbiw	r26, 0x03	; 3
     d58:	94 81       	ldd	r25, Z+4	; 0x04
     d5a:	14 96       	adiw	r26, 0x04	; 4
     d5c:	9c 93       	st	X, r25
     d5e:	14 97       	sbiw	r26, 0x04	; 4
     d60:	95 81       	ldd	r25, Z+5	; 0x05
     d62:	15 96       	adiw	r26, 0x05	; 5
     d64:	9c 93       	st	X, r25
     d66:	15 97       	sbiw	r26, 0x05	; 5
     d68:	96 81       	ldd	r25, Z+6	; 0x06
     d6a:	16 96       	adiw	r26, 0x06	; 6
     d6c:	9c 93       	st	X, r25
     d6e:	16 97       	sbiw	r26, 0x06	; 6
     d70:	97 81       	ldd	r25, Z+7	; 0x07
     d72:	17 96       	adiw	r26, 0x07	; 7
     d74:	9c 93       	st	X, r25
     d76:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	59 f4       	brne	.+22     	; 0xd96 <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     d80:	fb 01       	movw	r30, r22
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	fd 01       	movw	r30, r26
     d88:	92 93       	st	-Z, r25
     d8a:	82 93       	st	-Z, r24
     d8c:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     d8e:	ca 01       	movw	r24, r20
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	98 60       	ori	r25, 0x08	; 8
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     d96:	3d 01       	movw	r6, r26
     d98:	f8 e0       	ldi	r31, 0x08	; 8
     d9a:	6f 1a       	sub	r6, r31
     d9c:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     d9e:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     da0:	88 e0       	ldi	r24, 0x08	; 8
     da2:	fb 01       	movw	r30, r22
     da4:	d3 01       	movw	r26, r6
     da6:	01 90       	ld	r0, Z+
     da8:	0d 92       	st	X+, r0
     daa:	8a 95       	dec	r24
     dac:	e1 f7       	brne	.-8      	; 0xda6 <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     dae:	ca 01       	movw	r24, r20
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     db4:	4e ef       	ldi	r20, 0xFE	; 254
     db6:	5a ec       	ldi	r21, 0xCA	; 202
     db8:	f3 01       	movw	r30, r6
     dba:	32 97       	sbiw	r30, 0x02	; 2
     dbc:	51 83       	std	Z+1, r21	; 0x01
     dbe:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     dc0:	31 97       	sbiw	r30, 0x01	; 1
     dc2:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     dc4:	c1 10       	cpse	r12, r1
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	01 c0       	rjmp	.+2      	; 0xdce <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     dcc:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     dce:	f3 01       	movw	r30, r6
     dd0:	35 97       	sbiw	r30, 0x05	; 5
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     dd6:	d3 01       	movw	r26, r6
     dd8:	16 97       	sbiw	r26, 0x06	; 6
     dda:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     ddc:	b0 93 3f 03 	sts	0x033F, r27	; 0x80033f <storage_buffer+0x8>
     de0:	a0 93 3e 03 	sts	0x033E, r26	; 0x80033e <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     de4:	48 2d       	mov	r20, r8
     de6:	6a 2d       	mov	r22, r10
     de8:	87 e3       	ldi	r24, 0x37	; 55
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 43 12 	call	0x2486	; 0x2486 <tal_tx_frame>
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ef 90       	pop	r14
     dfa:	cf 90       	pop	r12
     dfc:	af 90       	pop	r10
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	6f 90       	pop	r6
     e04:	5f 90       	pop	r5
     e06:	4f 90       	pop	r4
     e08:	08 95       	ret

00000e0a <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length) 
{
     e0a:	8f 92       	push	r8
     e0c:	af 92       	push	r10
     e0e:	cf 92       	push	r12
     e10:	ef 92       	push	r14
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	1f 92       	push	r1
     e1c:	1f 92       	push	r1
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	3a 83       	std	Y+2, r19	; 0x02
     e28:	29 83       	std	Y+1, r18	; 0x01

	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     e2a:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <seq_num.3458>
     e2e:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <seq_num.3458+0x1>
     e32:	a9 01       	movw	r20, r18
     e34:	4f 5f       	subi	r20, 0xFF	; 255
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	50 93 36 03 	sts	0x0336, r21	; 0x800336 <seq_num.3458+0x1>
     e3c:	40 93 35 03 	sts	0x0335, r20	; 0x800335 <seq_num.3458>
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);

	transmit_frame(
     e40:	81 2c       	mov	r8, r1
     e42:	68 94       	set
     e44:	aa 24       	eor	r10, r10
     e46:	a1 f8       	bld	r10, 1
     e48:	c1 2c       	mov	r12, r1
     e4a:	e6 2e       	mov	r14, r22
     e4c:	8c 01       	movw	r16, r24
     e4e:	42 e0       	ldi	r20, 0x02	; 2
     e50:	be 01       	movw	r22, r28
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	36 df       	rcall	.-404    	; 0xcc6 <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ef 90       	pop	r14
     e68:	cf 90       	pop	r12
     e6a:	af 90       	pop	r10
     e6c:	8f 90       	pop	r8
     e6e:	08 95       	ret

00000e70 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     e70:	86 e0       	ldi	r24, 0x06	; 6
     e72:	0c 94 6f 11 	jmp	0x22de	; 0x22de <tal_rx_enable>
     e76:	08 95       	ret

00000e78 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <wireless_init+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <wireless_init+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     e84:	45 d0       	rcall	.+138    	; 0xf10 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     e86:	36 d0       	rcall	.+108    	; 0xef4 <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     e88:	ba d1       	rcall	.+884    	; 0x11fe <sw_timer_init>
     e8a:	8b d5       	rcall	.+2838   	; 0x19a2 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     e8c:	81 11       	cpse	r24, r1
     e8e:	ff cf       	rjmp	.-2      	; 0xe8e <wireless_init+0x16>
     e90:	78 94       	sei
     e92:	88 e0       	ldi	r24, 0x08	; 8
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     e94:	90 e0       	ldi	r25, 0x00	; 0
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	8e ef       	ldi	r24, 0xFE	; 254
     e9c:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8c e0       	ldi	r24, 0x0C	; 12
     ea4:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     ea6:	1e 82       	std	Y+6, r1	; 0x06
     ea8:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     eaa:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	83 e5       	ldi	r24, 0x53	; 83
     eb0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <tal_pib_set>
     eb4:	be 01       	movw	r22, r28
     eb6:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	80 e5       	ldi	r24, 0x50	; 80
     ebc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <tal_pib_set>
     ec0:	be 01       	movw	r22, r28
     ec2:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <tal_pib_set>
     ecc:	be 01       	movw	r22, r28
     ece:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <tal_pib_set>
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     edc:	0e 94 7f 12 	call	0x24fe	; 0x24fe <tal_ant_div_config>
     ee0:	c7 df       	rcall	.-114    	; 0xe70 <init_data_reception>
    }
    #endif


	init_data_reception();
     ee2:	26 96       	adiw	r28, 0x06	; 6
     ee4:	0f b6       	in	r0, 0x3f	; 63

}
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     ef4:	8d b1       	in	r24, 0x0d	; 13
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     ef8:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     efa:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     efc:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     efe:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     f00:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     f02:	95 60       	ori	r25, 0x05	; 5
     f04:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	8d b9       	out	0x0d, r24	; 13
     f0a:	08 95       	ret

00000f0c <modules_init>:
/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
	sio2host_init();
     f0c:	ea cb       	rjmp	.-2092   	; 0x6e2 <sio2host_init>
     f0e:	08 95       	ret

00000f10 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	1f 92       	push	r1
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     f20:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f24:	8f b7       	in	r24, 0x3f	; 63
     f26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f28:	f8 94       	cli
	return flags;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     f2c:	5f 93       	push	r21
     f2e:	50 e8       	ldi	r21, 0x80	; 128
     f30:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     f3a:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f3c:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f50:	9f b7       	in	r25, 0x3f	; 63
     f52:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f54:	f8 94       	cli
	return flags;
     f56:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	40 f4       	brcc	.+16     	; 0xf6c <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     f5c:	e8 2f       	mov	r30, r24
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ec 59       	subi	r30, 0x9C	; 156
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	60 95       	com	r22
     f66:	80 81       	ld	r24, Z
     f68:	68 23       	and	r22, r24
     f6a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f6c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	1f 92       	push	r1
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f80:	9f b7       	in	r25, 0x3f	; 63
     f82:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f84:	f8 94       	cli
	return flags;
     f86:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	38 f4       	brcc	.+14     	; 0xf9a <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     f8c:	e8 2f       	mov	r30, r24
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ec 59       	subi	r30, 0x9C	; 156
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	68 2b       	or	r22, r24
     f98:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f9a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     fa4:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <running_timers>
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <hw_expiry_cb+0xe>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <timer_trigger>
     fb2:	08 95       	ret

00000fb4 <hw_overflow_cb>:
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <sys_time>
     fc4:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <sys_time+0x1>
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <sys_time+0x1>
     fce:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <sys_time>
     fd2:	8f b7       	in	r24, 0x3f	; 63
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	f8 94       	cli
     fd8:	19 81       	ldd	r17, Y+1	; 0x01
     fda:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <running_timer_queue_head>
     fde:	8f 3f       	cpi	r24, 0xFF	; 255
     fe0:	e9 f1       	breq	.+122    	; 0x105c <hw_overflow_cb+0xa8>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	9c 01       	movw	r18, r24
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	e2 5c       	subi	r30, 0xC2	; 194
     ffe:	f9 4f       	sbci	r31, 0xF9	; 249
    1000:	21 85       	ldd	r18, Z+9	; 0x09
    1002:	21 11       	cpse	r18, r1
    1004:	2b c0       	rjmp	.+86     	; 0x105c <hw_overflow_cb+0xa8>
    1006:	fc 01       	movw	r30, r24
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	e8 0f       	add	r30, r24
    101a:	f9 1f       	adc	r31, r25
    101c:	e2 5c       	subi	r30, 0xC2	; 194
    101e:	f9 4f       	sbci	r31, 0xF9	; 249
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	a2 81       	ldd	r26, Z+2	; 0x02
    1026:	b3 81       	ldd	r27, Z+3	; 0x03
    1028:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <sys_time>
    102c:	30 91 3d 06 	lds	r19, 0x063D	; 0x80063d <sys_time+0x1>
    1030:	2a 17       	cp	r18, r26
    1032:	3b 07       	cpc	r19, r27
    1034:	99 f4       	brne	.+38     	; 0x105c <hw_overflow_cb+0xa8>
    1036:	43 d9       	rcall	.-3450   	; 0x2be <common_tc_delay>
    1038:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <running_timer_queue_head>
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	e2 5c       	subi	r30, 0xC2	; 194
    1056:	f9 4f       	sbci	r31, 0xF9	; 249
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	81 87       	std	Z+9, r24	; 0x09
    105c:	1f bf       	out	0x3f, r17	; 63
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	08 95       	ret

00001068 <load_hw_timer>:
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	c8 2f       	mov	r28, r24
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <load_hw_timer+0x10>
    1076:	60 c0       	rjmp	.+192    	; 0x1138 <load_hw_timer+0xd0>
    1078:	00 91 3c 06 	lds	r16, 0x063C	; 0x80063c <sys_time>
    107c:	10 91 3d 06 	lds	r17, 0x063D	; 0x80063d <sys_time+0x1>
    1080:	db d8       	rcall	.-3658   	; 0x238 <common_tc_read_count>
    1082:	40 91 3c 06 	lds	r20, 0x063C	; 0x80063c <sys_time>
    1086:	50 91 3d 06 	lds	r21, 0x063D	; 0x80063d <sys_time+0x1>
    108a:	04 17       	cp	r16, r20
    108c:	15 07       	cpc	r17, r21
    108e:	a1 f7       	brne	.-24     	; 0x1078 <load_hw_timer+0x10>
    1090:	d0 e0       	ldi	r29, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	fe 01       	movw	r30, r28
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	9e 01       	movw	r18, r28
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	e2 5c       	subi	r30, 0xC2	; 194
    10b0:	f9 4f       	sbci	r31, 0xF9	; 249
    10b2:	ba 01       	movw	r22, r20
    10b4:	55 27       	eor	r21, r21
    10b6:	44 27       	eor	r20, r20
    10b8:	a0 e0       	ldi	r26, 0x00	; 0
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	48 2b       	or	r20, r24
    10be:	59 2b       	or	r21, r25
    10c0:	6a 2b       	or	r22, r26
    10c2:	7b 2b       	or	r23, r27
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	a2 81       	ldd	r26, Z+2	; 0x02
    10ca:	b3 81       	ldd	r27, Z+3	; 0x03
    10cc:	84 1b       	sub	r24, r20
    10ce:	95 0b       	sbc	r25, r21
    10d0:	a6 0b       	sbc	r26, r22
    10d2:	b7 0b       	sbc	r27, r23
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	2f ef       	ldi	r18, 0xFF	; 255
    10d8:	92 07       	cpc	r25, r18
    10da:	a2 07       	cpc	r26, r18
    10dc:	2f e7       	ldi	r18, 0x7F	; 127
    10de:	b2 07       	cpc	r27, r18
    10e0:	38 f5       	brcc	.+78     	; 0x1130 <load_hw_timer+0xc8>
    10e2:	9e 01       	movw	r18, r28
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	22 0f       	add	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	fe 01       	movw	r30, r28
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	e2 0f       	add	r30, r18
    10f8:	f3 1f       	adc	r31, r19
    10fa:	e2 5c       	subi	r30, 0xC2	; 194
    10fc:	f9 4f       	sbci	r31, 0xF9	; 249
    10fe:	21 85       	ldd	r18, Z+9	; 0x09
    1100:	21 11       	cpse	r18, r1
    1102:	1b c0       	rjmp	.+54     	; 0x113a <load_hw_timer+0xd2>
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	a2 07       	cpc	r26, r18
    110a:	b1 05       	cpc	r27, r1
    110c:	b0 f4       	brcc	.+44     	; 0x113a <load_hw_timer+0xd2>
    110e:	d7 d8       	rcall	.-3666   	; 0x2be <common_tc_delay>
    1110:	ce 01       	movw	r24, r28
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	cc 0f       	add	r28, r28
    1118:	dd 1f       	adc	r29, r29
    111a:	cc 0f       	add	r28, r28
    111c:	dd 1f       	adc	r29, r29
    111e:	cc 0f       	add	r28, r28
    1120:	dd 1f       	adc	r29, r29
    1122:	c8 0f       	add	r28, r24
    1124:	d9 1f       	adc	r29, r25
    1126:	c2 5c       	subi	r28, 0xC2	; 194
    1128:	d9 4f       	sbci	r29, 0xF9	; 249
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 87       	std	Y+9, r24	; 0x09
    112e:	05 c0       	rjmp	.+10     	; 0x113a <load_hw_timer+0xd2>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <timer_trigger>
    1136:	01 c0       	rjmp	.+2      	; 0x113a <load_hw_timer+0xd2>
    1138:	a7 d8       	rcall	.-3762   	; 0x288 <common_tc_compare_stop>
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <internal_timer_handler>:
    1144:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <timer_trigger>
    1148:	88 23       	and	r24, r24
    114a:	09 f4       	brne	.+2      	; 0x114e <internal_timer_handler+0xa>
    114c:	57 c0       	rjmp	.+174    	; 0x11fc <internal_timer_handler+0xb8>
    114e:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <timer_trigger>
    1152:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <running_timers>
    1156:	88 23       	and	r24, r24
    1158:	09 f4       	brne	.+2      	; 0x115c <internal_timer_handler+0x18>
    115a:	50 c0       	rjmp	.+160    	; 0x11fc <internal_timer_handler+0xb8>
    115c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <expired_timer_queue_head>
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	59 f4       	brne	.+22     	; 0x117a <internal_timer_handler+0x36>
    1164:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <expired_timer_queue_tail>
    1168:	8f 3f       	cpi	r24, 0xFF	; 255
    116a:	39 f4       	brne	.+14     	; 0x117a <internal_timer_handler+0x36>
    116c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <running_timer_queue_head>
    1170:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <expired_timer_queue_tail>
    1174:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <expired_timer_queue_head>
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <internal_timer_handler+0x60>
    117a:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <running_timer_queue_head>
    117e:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <expired_timer_queue_tail>
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	e8 0f       	add	r30, r24
    1198:	f9 1f       	adc	r31, r25
    119a:	e2 5c       	subi	r30, 0xC2	; 194
    119c:	f9 4f       	sbci	r31, 0xF9	; 249
    119e:	20 87       	std	Z+8, r18	; 0x08
    11a0:	20 93 c3 03 	sts	0x03C3, r18	; 0x8003c3 <expired_timer_queue_tail>
    11a4:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <running_timer_queue_head>
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	e8 0f       	add	r30, r24
    11be:	f9 1f       	adc	r31, r25
    11c0:	e2 5c       	subi	r30, 0xC2	; 194
    11c2:	f9 4f       	sbci	r31, 0xF9	; 249
    11c4:	80 85       	ldd	r24, Z+8	; 0x08
    11c6:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <running_timer_queue_head>
    11ca:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <expired_timer_queue_tail>
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	e2 0f       	add	r30, r18
    11e4:	f3 1f       	adc	r31, r19
    11e6:	e2 5c       	subi	r30, 0xC2	; 194
    11e8:	f9 4f       	sbci	r31, 0xF9	; 249
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	90 87       	std	Z+8, r25	; 0x08
    11ee:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <running_timers>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <running_timers>
    11f8:	91 11       	cpse	r25, r1
    11fa:	36 cf       	rjmp	.-404    	; 0x1068 <load_hw_timer>
    11fc:	08 95       	ret

000011fe <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    11fe:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <running_timers>
	timer_trigger = false;
    1202:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <timer_trigger>
	sys_time = 0;
    1206:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <sys_time+0x1>
    120a:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <sys_time>

	running_timer_queue_head = NO_TIMER;
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
    1214:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
    1218:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <expired_timer_queue_tail>
    121c:	ee e3       	ldi	r30, 0x3E	; 62
    121e:	f6 e0       	ldi	r31, 0x06	; 6
    1220:	20 e7       	ldi	r18, 0x70	; 112
    1222:	36 e0       	ldi	r19, 0x06	; 6

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
    1224:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
    1226:	15 82       	std	Z+5, r1	; 0x05
    1228:	14 82       	std	Z+4, r1	; 0x04
    122a:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
    122c:	e2 17       	cp	r30, r18
    122e:	f3 07       	cpc	r31, r19
    1230:	c9 f7       	brne	.-14     	; 0x1224 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
    1232:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
    1236:	8a ed       	ldi	r24, 0xDA	; 218
    1238:	97 e0       	ldi	r25, 0x07	; 7
    123a:	ff d8       	rcall	.-3586   	; 0x43a <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
    123c:	82 ed       	ldi	r24, 0xD2	; 210
    123e:	97 e0       	ldi	r25, 0x07	; 7
	common_tc_init();
    1240:	01 d9       	rcall	.-3582   	; 0x444 <set_common_tc_expiry_callback>
    1242:	b2 c8       	rjmp	.-3740   	; 0x3a8 <common_tc_init>
    1244:	08 95       	ret

00001246 <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	1f 92       	push	r1
    1250:	1f 92       	push	r1
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1256:	8f b7       	in	r24, 0x3f	; 63
    1258:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    125a:	f8 94       	cli
	return flags;
    125c:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    125e:	72 df       	rcall	.-284    	; 0x1144 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1260:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    1262:	1f ef       	ldi	r17, 0xFF	; 255
    1264:	01 2f       	mov	r16, r17
    1266:	37 c0       	rjmp	.+110    	; 0x12d6 <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1268:	8f b7       	in	r24, 0x3f	; 63
    126a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    126c:	f8 94       	cli
	return flags;
    126e:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    1270:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <expired_timer_queue_head>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	dc 01       	movw	r26, r24
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	a8 0f       	add	r26, r24
    128a:	b9 1f       	adc	r27, r25
    128c:	a2 5c       	subi	r26, 0xC2	; 194
    128e:	b9 4f       	sbci	r27, 0xF9	; 249
    1290:	18 96       	adiw	r26, 0x08	; 8
    1292:	9c 91       	ld	r25, X
    1294:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
    1296:	14 96       	adiw	r26, 0x04	; 4
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
    129e:	16 96       	adiw	r26, 0x06	; 6
    12a0:	4d 91       	ld	r20, X+
    12a2:	5c 91       	ld	r21, X
    12a4:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    12a6:	18 96       	adiw	r26, 0x08	; 8
    12a8:	1c 93       	st	X, r17
    12aa:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    12ac:	15 96       	adiw	r26, 0x05	; 5
    12ae:	1c 92       	st	X, r1
    12b0:	1e 92       	st	-X, r1
    12b2:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
    12b4:	17 96       	adiw	r26, 0x07	; 7
    12b6:	1c 92       	st	X, r1
    12b8:	1e 92       	st	-X, r1
    12ba:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
    12bc:	19 96       	adiw	r26, 0x09	; 9
    12be:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
    12c0:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
    12c4:	9f 3f       	cpi	r25, 0xFF	; 255
    12c6:	11 f4       	brne	.+4      	; 0x12cc <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
    12c8:	00 93 c3 03 	sts	0x03C3, r16	; 0x8003c3 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12cc:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
    12d2:	ca 01       	movw	r24, r20
    12d4:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
    12d6:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <expired_timer_queue_head>
    12da:	8f 3f       	cpi	r24, 0xFF	; 255
    12dc:	29 f6       	brne	.-118    	; 0x1268 <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
    12f0:	aa cf       	rjmp	.-172    	; 0x1246 <sw_timer_service>
    12f2:	08 95       	ret

000012f4 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    12f8:	87 ec       	ldi	r24, 0xC7	; 199
    12fa:	93 e0       	ldi	r25, 0x03	; 3
    12fc:	b0 d0       	rcall	.+352    	; 0x145e <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    12fe:	cc ec       	ldi	r28, 0xCC	; 204
    1300:	d3 e0       	ldi	r29, 0x03	; 3
    1302:	88 ed       	ldi	r24, 0xD8	; 216
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	99 83       	std	Y+1, r25	; 0x01
    1308:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    130a:	be 01       	movw	r22, r28
    130c:	87 ec       	ldi	r24, 0xC7	; 199
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	ad d0       	rcall	.+346    	; 0x146c <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1312:	83 e6       	ldi	r24, 0x63	; 99
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	9d 83       	std	Y+5, r25	; 0x05
    1318:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    131a:	60 ed       	ldi	r22, 0xD0	; 208
    131c:	73 e0       	ldi	r23, 0x03	; 3
    131e:	87 ec       	ldi	r24, 0xC7	; 199
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	a4 d0       	rcall	.+328    	; 0x146c <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1324:	8e ee       	ldi	r24, 0xEE	; 238
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	99 87       	std	Y+9, r25	; 0x09
    132a:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    132c:	64 ed       	ldi	r22, 0xD4	; 212
    132e:	73 e0       	ldi	r23, 0x03	; 3
    1330:	87 ec       	ldi	r24, 0xC7	; 199
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	9b d0       	rcall	.+310    	; 0x146c <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	87 ec       	ldi	r24, 0xC7	; 199
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	b8 c0       	rjmp	.+368    	; 0x14b6 <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    1346:	08 95       	ret

00001348 <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	21 f0       	breq	.+8      	; 0x1354 <bmm_buffer_free+0xc>
    134c:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    134e:	87 ec       	ldi	r24, 0xC7	; 199
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	8c c0       	rjmp	.+280    	; 0x146c <qmm_queue_append>
    1354:	08 95       	ret

00001356 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	1f 92       	push	r1
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1374:	2f b7       	in	r18, 0x3f	; 63
    1376:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1378:	f8 94       	cli
	return flags;
    137a:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    137c:	dc 01       	movw	r26, r24
    137e:	14 96       	adiw	r26, 0x04	; 4
    1380:	2c 91       	ld	r18, X
    1382:	22 23       	and	r18, r18
    1384:	09 f4       	brne	.+2      	; 0x1388 <queue_read_or_remove+0x32>
    1386:	56 c0       	rjmp	.+172    	; 0x1434 <queue_read_or_remove+0xde>
    1388:	7a 01       	movw	r14, r20
    138a:	96 2e       	mov	r9, r22
    138c:	5c 01       	movw	r10, r24
		buffer_current = q->head;
    138e:	fc 01       	movw	r30, r24
    1390:	00 81       	ld	r16, Z
    1392:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    1394:	45 2b       	or	r20, r21
    1396:	e1 f0       	breq	.+56     	; 0x13d0 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    1398:	01 15       	cp	r16, r1
    139a:	11 05       	cpc	r17, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <queue_read_or_remove+0x4a>
    139e:	4d c0       	rjmp	.+154    	; 0x143a <queue_read_or_remove+0xe4>
    13a0:	68 01       	movw	r12, r16
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    13a4:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
    13a6:	d7 01       	movw	r26, r14
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	6d 91       	ld	r22, X+
    13ac:	7c 91       	ld	r23, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	d8 01       	movw	r26, r16
    13b6:	8d 91       	ld	r24, X+
    13b8:	9c 91       	ld	r25, X
    13ba:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
    13bc:	81 11       	cpse	r24, r1
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    13c0:	f8 01       	movw	r30, r16
    13c2:	22 81       	ldd	r18, Z+2	; 0x02
    13c4:	33 81       	ldd	r19, Z+3	; 0x03
    13c6:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    13c8:	21 15       	cp	r18, r1
    13ca:	31 05       	cpc	r19, r1
    13cc:	59 f7       	brne	.-42     	; 0x13a4 <queue_read_or_remove+0x4e>
    13ce:	35 c0       	rjmp	.+106    	; 0x143a <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
    13d0:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
    13d2:	01 15       	cp	r16, r1
    13d4:	11 05       	cpc	r17, r1
    13d6:	99 f1       	breq	.+102    	; 0x143e <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
    13d8:	91 10       	cpse	r9, r1
    13da:	31 c0       	rjmp	.+98     	; 0x143e <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
    13dc:	d5 01       	movw	r26, r10
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	08 17       	cp	r16, r24
    13e6:	19 07       	cpc	r17, r25
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
    13ea:	f8 01       	movw	r30, r16
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	8d 93       	st	X+, r24
    13f2:	9c 93       	st	X, r25
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
    13f6:	d8 01       	movw	r26, r16
    13f8:	12 96       	adiw	r26, 0x02	; 2
    13fa:	8d 91       	ld	r24, X+
    13fc:	9c 91       	ld	r25, X
    13fe:	13 97       	sbiw	r26, 0x03	; 3
    1400:	f6 01       	movw	r30, r12
    1402:	93 83       	std	Z+3, r25	; 0x03
    1404:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
    1406:	d5 01       	movw	r26, r10
    1408:	12 96       	adiw	r26, 0x02	; 2
    140a:	8d 91       	ld	r24, X+
    140c:	9c 91       	ld	r25, X
    140e:	13 97       	sbiw	r26, 0x03	; 3
    1410:	08 17       	cp	r16, r24
    1412:	19 07       	cpc	r17, r25
    1414:	21 f4       	brne	.+8      	; 0x141e <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	dc 92       	st	X, r13
    141a:	ce 92       	st	-X, r12
    141c:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
    141e:	f5 01       	movw	r30, r10
    1420:	84 81       	ldd	r24, Z+4	; 0x04
    1422:	81 50       	subi	r24, 0x01	; 1
    1424:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	89 2b       	or	r24, r25
    142c:	41 f4       	brne	.+16     	; 0x143e <queue_read_or_remove+0xe8>
					q->tail = NULL;
    142e:	13 82       	std	Z+3, r1	; 0x03
    1430:	12 82       	std	Z+2, r1	; 0x02
    1432:	05 c0       	rjmp	.+10     	; 0x143e <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
    1434:	00 e0       	ldi	r16, 0x00	; 0
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <queue_read_or_remove+0xe8>
    143a:	00 e0       	ldi	r16, 0x00	; 0
    143c:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    143e:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    1440:	c8 01       	movw	r24, r16
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	9f 90       	pop	r9
    145a:	8f 90       	pop	r8
    145c:	08 95       	ret

0000145e <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    145e:	fc 01       	movw	r30, r24
	q->head = NULL;
    1460:	11 82       	std	Z+1, r1	; 0x01
    1462:	10 82       	st	Z, r1
	q->tail = NULL;
    1464:	13 82       	std	Z+3, r1	; 0x03
    1466:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
    1468:	14 82       	std	Z+4, r1	; 0x04
    146a:	08 95       	ret

0000146c <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	1f 92       	push	r1
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1478:	8f b7       	in	r24, 0x3f	; 63
    147a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    147c:	f8 94       	cli
	return flags;
    147e:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
    1480:	84 81       	ldd	r24, Z+4	; 0x04
    1482:	81 11       	cpse	r24, r1
    1484:	03 c0       	rjmp	.+6      	; 0x148c <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
    1486:	71 83       	std	Z+1, r23	; 0x01
    1488:	60 83       	st	Z, r22
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
    148c:	a2 81       	ldd	r26, Z+2	; 0x02
    148e:	b3 81       	ldd	r27, Z+3	; 0x03
    1490:	13 96       	adiw	r26, 0x03	; 3
    1492:	7c 93       	st	X, r23
    1494:	6e 93       	st	-X, r22
    1496:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
    1498:	73 83       	std	Z+3, r23	; 0x03
    149a:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
    149c:	db 01       	movw	r26, r22
    149e:	13 96       	adiw	r26, 0x03	; 3
    14a0:	1c 92       	st	X, r1
    14a2:	1e 92       	st	-X, r1
    14a4:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
    14a6:	84 81       	ldd	r24, Z+4	; 0x04
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14ac:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    14b6:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	4d cf       	rjmp	.-358    	; 0x1356 <queue_read_or_remove>
}
    14bc:	08 95       	ret

000014be <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    14c0:	61 50       	subi	r22, 0x01	; 1
    14c2:	71 09       	sbc	r23, r1
    14c4:	81 09       	sbc	r24, r1
    14c6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    14c8:	61 15       	cp	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	81 05       	cpc	r24, r1
    14ce:	91 05       	cpc	r25, r1
    14d0:	b9 f7       	brne	.-18     	; 0x14c0 <__portable_avr_delay_cycles+0x2>
    14d2:	08 95       	ret

000014d4 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    14da:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    14de:	8f 71       	andi	r24, 0x1F	; 31
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	a1 f4       	brne	.+40     	; 0x150c <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    14ea:	89 e0       	ldi	r24, 0x09	; 9
    14ec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    14f0:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
    14f2:	0f e4       	ldi	r16, 0x4F	; 79
    14f4:	11 e0       	ldi	r17, 0x01	; 1
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
    14fa:	80 fd       	sbrc	r24, 0
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
    14fe:	63 e9       	ldi	r22, 0x93	; 147
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	db df       	rcall	.-74     	; 0x14be <__portable_avr_delay_cycles>
    1508:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
    150a:	a9 f7       	brne	.-22     	; 0x14f6 <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	1f 92       	push	r1
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
    1522:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    1526:	8f 30       	cpi	r24, 0x0F	; 15
    1528:	51 f5       	brne	.+84     	; 0x157e <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
    152a:	1f 30       	cpi	r17, 0x0F	; 15
    152c:	09 f4       	brne	.+2      	; 0x1530 <set_trx_state+0x1c>
    152e:	38 c1       	rjmp	.+624    	; 0x17a0 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
    1530:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1534:	8f eb       	ldi	r24, 0xBF	; 191
    1536:	9e e0       	ldi	r25, 0x0E	; 14
    1538:	e1 d2       	rcall	.+1474   	; 0x1afc <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    153a:	8f b7       	in	r24, 0x3f	; 63
    153c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    153e:	f8 94       	cli
	return flags;
    1540:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
    1542:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
    1544:	e9 e3       	ldi	r30, 0x39	; 57
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	80 81       	ld	r24, Z
    154a:	8d 7f       	andi	r24, 0xFD	; 253
    154c:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
    154e:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tal_awake_end_flag>
    1552:	88 23       	and	r24, r24
    1554:	e1 f3       	breq	.-8      	; 0x154e <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1556:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    155e:	88 e4       	ldi	r24, 0x48	; 72
    1560:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1564:	ed e4       	ldi	r30, 0x4D	; 77
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	80 81       	ld	r24, Z
    156a:	84 60       	ori	r24, 0x04	; 4
    156c:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
    156e:	18 30       	cpi	r17, 0x08	; 8
    1570:	11 f0       	breq	.+4      	; 0x1576 <set_trx_state+0x62>
    1572:	13 30       	cpi	r17, 0x03	; 3
    1574:	21 f4       	brne	.+8      	; 0x157e <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>
			return TRX_OFF;
    157c:	11 c1       	rjmp	.+546    	; 0x17a0 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
    157e:	81 2f       	mov	r24, r17
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	33 97       	sbiw	r30, 0x03	; 3
    1586:	e7 31       	cpi	r30, 0x17	; 23
    1588:	f1 05       	cpc	r31, r1
    158a:	08 f0       	brcs	.+2      	; 0x158e <set_trx_state+0x7a>
    158c:	5a c0       	rjmp	.+180    	; 0x1642 <set_trx_state+0x12e>
    158e:	88 27       	eor	r24, r24
    1590:	e6 56       	subi	r30, 0x66	; 102
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    15a0:	ed e4       	ldi	r30, 0x4D	; 77
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	80 81       	ld	r24, Z
    15a6:	8b 7f       	andi	r24, 0xFB	; 251
    15a8:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
    15aa:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    15ae:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
    15b2:	ee e6       	ldi	r30, 0x6E	; 110
    15b4:	f1 e0       	ldi	r31, 0x01	; 1
    15b6:	80 81       	ld	r24, Z
    15b8:	97 70       	andi	r25, 0x07	; 7
    15ba:	88 7f       	andi	r24, 0xF8	; 248
    15bc:	89 2b       	or	r24, r25
    15be:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
    15cc:	62 e0       	ldi	r22, 0x02	; 2
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	74 df       	rcall	.-280    	; 0x14be <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
    15d6:	e9 e3       	ldi	r30, 0x39	; 57
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
    15da:	80 81       	ld	r24, Z
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    15e0:	6f e2       	ldi	r22, 0x2F	; 47
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	6a df       	rcall	.-300    	; 0x14be <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
    15ea:	8f e0       	ldi	r24, 0x0F	; 15
    15ec:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
    15f0:	d7 c0       	rjmp	.+430    	; 0x17a0 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
    15f2:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	21 f1       	breq	.+72     	; 0x1642 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	5a df       	rcall	.-332    	; 0x14be <__portable_avr_delay_cycles>
			break;
    160a:	1b c0       	rjmp	.+54     	; 0x1642 <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
    160c:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    1610:	88 30       	cpi	r24, 0x08	; 8
    1612:	b9 f0       	breq	.+46     	; 0x1642 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    161a:	62 e0       	ldi	r22, 0x02	; 2
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	4d df       	rcall	.-358    	; 0x14be <__portable_avr_delay_cycles>
			break;
    1624:	0e c0       	rjmp	.+28     	; 0x1642 <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
    1626:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	49 f0       	breq	.+18     	; 0x1640 <set_trx_state+0x12c>
    162e:	18 f4       	brcc	.+6      	; 0x1636 <set_trx_state+0x122>
    1630:	86 30       	cpi	r24, 0x06	; 6
    1632:	39 f4       	brne	.+14     	; 0x1642 <set_trx_state+0x12e>
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <set_trx_state+0x134>
    1636:	86 31       	cpi	r24, 0x16	; 22
    1638:	39 f0       	breq	.+14     	; 0x1648 <set_trx_state+0x134>
    163a:	89 31       	cpi	r24, 0x19	; 25
    163c:	11 f4       	brne	.+4      	; 0x1642 <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <set_trx_state+0x134>
    1640:	49 df       	rcall	.-366    	; 0x14d4 <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1642:	e1 e4       	ldi	r30, 0x41	; 65
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	a6 c0       	rjmp	.+332    	; 0x1794 <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1648:	89 e0       	ldi	r24, 0x09	; 9
    164a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    164e:	62 e0       	ldi	r22, 0x02	; 2
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	33 df       	rcall	.-410    	; 0x14be <__portable_avr_delay_cycles>
			break;
    1658:	f4 cf       	rjmp	.-24     	; 0x1642 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
    165a:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	19 f0       	breq	.+6      	; 0x1668 <set_trx_state+0x154>
    1662:	89 30       	cpi	r24, 0x09	; 9
    1664:	71 f3       	breq	.-36     	; 0x1642 <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
    1666:	02 c0       	rjmp	.+4      	; 0x166c <set_trx_state+0x158>
    1668:	35 df       	rcall	.-406    	; 0x14d4 <switch_pll_on>
			break;
    166a:	eb cf       	rjmp	.-42     	; 0x1642 <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    166c:	84 e0       	ldi	r24, 0x04	; 4
    166e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
    1672:	e7 cf       	rjmp	.-50     	; 0x1642 <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
    1674:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    1678:	89 30       	cpi	r24, 0x09	; 9
    167a:	41 f0       	breq	.+16     	; 0x168c <set_trx_state+0x178>
    167c:	18 f4       	brcc	.+6      	; 0x1684 <set_trx_state+0x170>
    167e:	88 30       	cpi	r24, 0x08	; 8
    1680:	71 f0       	breq	.+28     	; 0x169e <set_trx_state+0x18a>
    1682:	df cf       	rjmp	.-66     	; 0x1642 <set_trx_state+0x12e>
    1684:	86 31       	cpi	r24, 0x16	; 22
    1686:	11 f0       	breq	.+4      	; 0x168c <set_trx_state+0x178>
    1688:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    168a:	d9 f6       	brne	.-74     	; 0x1642 <set_trx_state+0x12e>
    168c:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
    168e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
    169a:	11 df       	rcall	.-478    	; 0x14be <__portable_avr_delay_cycles>
    169c:	d2 cf       	rjmp	.-92     	; 0x1642 <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    169e:	1a df       	rcall	.-460    	; 0x14d4 <switch_pll_on>
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    16a6:	62 e0       	ldi	r22, 0x02	; 2
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	07 df       	rcall	.-498    	; 0x14be <__portable_avr_delay_cycles>
			break;
    16b0:	c8 cf       	rjmp	.-112    	; 0x1642 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
    16b2:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    16b6:	88 30       	cpi	r24, 0x08	; 8
    16b8:	91 f0       	breq	.+36     	; 0x16de <set_trx_state+0x1ca>
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <set_trx_state+0x1ae>
    16bc:	86 30       	cpi	r24, 0x06	; 6
    16be:	c9 f0       	breq	.+50     	; 0x16f2 <set_trx_state+0x1de>
    16c0:	c0 cf       	rjmp	.-128    	; 0x1642 <set_trx_state+0x12e>
    16c2:	89 30       	cpi	r24, 0x09	; 9
    16c4:	19 f0       	breq	.+6      	; 0x16cc <set_trx_state+0x1b8>
    16c6:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    16c8:	09 f0       	breq	.+2      	; 0x16cc <set_trx_state+0x1b8>
    16ca:	bb cf       	rjmp	.-138    	; 0x1642 <set_trx_state+0x12e>
    16cc:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
    16ce:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    16d8:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    16da:	f1 de       	rcall	.-542    	; 0x14be <__portable_avr_delay_cycles>
    16dc:	b2 cf       	rjmp	.-156    	; 0x1642 <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    16de:	fa de       	rcall	.-524    	; 0x14d4 <switch_pll_on>
    16e0:	86 e1       	ldi	r24, 0x16	; 22
    16e2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
			break;
    16ee:	e7 de       	rcall	.-562    	; 0x14be <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    16f0:	a8 cf       	rjmp	.-176    	; 0x1642 <set_trx_state+0x12e>
    16f2:	89 e0       	ldi	r24, 0x09	; 9
    16f4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	de de       	rcall	.-580    	; 0x14be <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1702:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1706:	8f 71       	andi	r24, 0x1F	; 31
    1708:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    170c:	89 30       	cpi	r24, 0x09	; 9
    170e:	09 f0       	breq	.+2      	; 0x1712 <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1710:	47 c0       	rjmp	.+142    	; 0x17a0 <set_trx_state+0x28c>
    1712:	86 e1       	ldi	r24, 0x16	; 22
    1714:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	ce de       	rcall	.-612    	; 0x14be <__portable_avr_delay_cycles>
			break;
    1722:	8f cf       	rjmp	.-226    	; 0x1642 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
    1724:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tal_trx_status>
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	51 f1       	breq	.+84     	; 0x1780 <set_trx_state+0x26c>
    172c:	18 f4       	brcc	.+6      	; 0x1734 <set_trx_state+0x220>
    172e:	86 30       	cpi	r24, 0x06	; 6
    1730:	79 f0       	breq	.+30     	; 0x1750 <set_trx_state+0x23c>
    1732:	87 cf       	rjmp	.-242    	; 0x1642 <set_trx_state+0x12e>
    1734:	89 30       	cpi	r24, 0x09	; 9
    1736:	19 f0       	breq	.+6      	; 0x173e <set_trx_state+0x22a>
    1738:	86 31       	cpi	r24, 0x16	; 22
    173a:	51 f0       	breq	.+20     	; 0x1750 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    173c:	82 cf       	rjmp	.-252    	; 0x1642 <set_trx_state+0x12e>
    173e:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
    1740:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
			break;
    174c:	b8 de       	rcall	.-656    	; 0x14be <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    174e:	79 cf       	rjmp	.-270    	; 0x1642 <set_trx_state+0x12e>
    1750:	89 e0       	ldi	r24, 0x09	; 9
    1752:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	af de       	rcall	.-674    	; 0x14be <__portable_avr_delay_cycles>
    1760:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1764:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1766:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    176a:	89 30       	cpi	r24, 0x09	; 9
    176c:	c9 f4       	brne	.+50     	; 0x17a0 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	80 e0       	ldi	r24, 0x00	; 0
			break;
    177a:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    177c:	a0 de       	rcall	.-704    	; 0x14be <__portable_avr_delay_cycles>
    177e:	61 cf       	rjmp	.-318    	; 0x1642 <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1780:	a9 de       	rcall	.-686    	; 0x14d4 <switch_pll_on>
    1782:	89 e1       	ldi	r24, 0x19	; 25
    1784:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	96 de       	rcall	.-724    	; 0x14be <__portable_avr_delay_cycles>
			break;
    1792:	57 cf       	rjmp	.-338    	; 0x1642 <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1794:	80 81       	ld	r24, Z
    1796:	8f 71       	andi	r24, 0x1F	; 31
    1798:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    179c:	8f 31       	cpi	r24, 0x1F	; 31
    179e:	d1 f3       	breq	.-12     	; 0x1794 <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
    17a0:	0f 90       	pop	r0
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	08 95       	ret

000017aa <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    17ae:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <tal_rx_on_required>
    17b2:	88 23       	and	r24, r24
    17b4:	19 f1       	breq	.+70     	; 0x17fc <tal_task+0x52>
    17b6:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <tal_state>
    17ba:	81 11       	cpse	r24, r1
    17bc:	1f c0       	rjmp	.+62     	; 0x17fc <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    17be:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <tal_rx_buffer>
    17c2:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <tal_rx_buffer+0x1>
    17c6:	89 2b       	or	r24, r25
    17c8:	41 f4       	brne	.+16     	; 0x17da <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    17ca:	8b e8       	ldi	r24, 0x8B	; 139
    17cc:	b7 dd       	rcall	.-1170   	; 0x133c <bmm_buffer_alloc>
    17ce:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <tal_rx_buffer+0x1>
    17d2:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    17d6:	89 2b       	or	r24, r25
    17d8:	89 f0       	breq	.+34     	; 0x17fc <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    17da:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    17de:	cc e4       	ldi	r28, 0x4C	; 76
    17e0:	d1 e0       	ldi	r29, 0x01	; 1
    17e2:	88 81       	ld	r24, Y
    17e4:	8f 77       	andi	r24, 0x7F	; 127
    17e6:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    17e8:	63 e0       	ldi	r22, 0x03	; 3
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	66 de       	rcall	.-820    	; 0x14be <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    17f2:	88 81       	ld	r24, Y
    17f4:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    17f6:	88 83       	st	Y, r24
    17f8:	86 e1       	ldi	r24, 0x16	; 22
    17fa:	8c de       	rcall	.-744    	; 0x1514 <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    17fc:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <tal_incoming_frame_queue+0x4>
    1800:	88 23       	and	r24, r24
    1802:	41 f0       	breq	.+16     	; 0x1814 <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	82 e7       	ldi	r24, 0x72	; 114
    180a:	96 e0       	ldi	r25, 0x06	; 6
		if (NULL != rx_frame) {
    180c:	54 de       	rcall	.-856    	; 0x14b6 <qmm_queue_remove>
    180e:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    1810:	09 f0       	breq	.+2      	; 0x1814 <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    1812:	25 d5       	rcall	.+2634   	; 0x225e <process_incoming_frame>
    1814:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <tal_state>
    1818:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    181a:	09 f4       	brne	.+2      	; 0x181e <tal_task+0x74>
    181c:	87 d5       	rcall	.+2830   	; 0x232c <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1824:	04 c0       	rjmp	.+8      	; 0x182e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1826:	61 50       	subi	r22, 0x01	; 1
    1828:	71 09       	sbc	r23, r1
    182a:	81 09       	sbc	r24, r1
    182c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    182e:	61 15       	cp	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	81 05       	cpc	r24, r1
    1834:	91 05       	cpc	r25, r1
    1836:	b9 f7       	brne	.-18     	; 0x1826 <__portable_avr_delay_cycles+0x2>
    1838:	08 95       	ret

0000183a <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1844:	86 e0       	ldi	r24, 0x06	; 6
    1846:	66 de       	rcall	.-820    	; 0x1514 <set_trx_state>
	} while (trx_state != RX_ON);
    1848:	86 30       	cpi	r24, 0x06	; 6
    184a:	e1 f7       	brne	.-8      	; 0x1844 <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    184c:	e5 e5       	ldi	r30, 0x55	; 85
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	80 81       	ld	r24, Z
    1852:	8f 77       	andi	r24, 0x7F	; 127
    1854:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    1856:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    185a:	68 94       	set
    185c:	ff 24       	eor	r15, r15
    185e:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1860:	c0 e0       	ldi	r28, 0x00	; 0
    1862:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1864:	06 e4       	ldi	r16, 0x46	; 70
    1866:	11 e0       	ldi	r17, 0x01	; 1
    1868:	f8 01       	movw	r30, r16
    186a:	90 81       	ld	r25, Z
		seed = seed << 2;
    186c:	cc 0f       	add	r28, r28
    186e:	dd 1f       	adc	r29, r29
    1870:	cc 0f       	add	r28, r28
    1872:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1874:	90 76       	andi	r25, 0x60	; 96
    1876:	29 2f       	mov	r18, r25
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	36 95       	lsr	r19
    187c:	27 95       	ror	r18
    187e:	32 95       	swap	r19
    1880:	22 95       	swap	r18
    1882:	2f 70       	andi	r18, 0x0F	; 15
    1884:	23 27       	eor	r18, r19
    1886:	3f 70       	andi	r19, 0x0F	; 15
    1888:	23 27       	eor	r18, r19
    188a:	c2 2b       	or	r28, r18
    188c:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	c6 df       	rcall	.-116    	; 0x1824 <__portable_avr_delay_cycles>
    1898:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    189a:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    189c:	e5 cf       	rjmp	.-54     	; 0x1868 <tal_generate_rand_seed+0x2e>
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	39 de       	rcall	.-910    	; 0x1514 <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    18a8:	88 e4       	ldi	r24, 0x48	; 72
    18aa:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <srand>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	08 95       	ret

000018c0 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    18cc:	c9 e3       	ldi	r28, 0x39	; 57
    18ce:	d1 e0       	ldi	r29, 0x01	; 1
    18d0:	88 81       	ld	r24, Y
    18d2:	8d 7f       	andi	r24, 0xFD	; 253
    18d4:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    18d6:	61 e4       	ldi	r22, 0x41	; 65
    18d8:	71 e0       	ldi	r23, 0x01	; 1
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a2 df       	rcall	.-188    	; 0x1824 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    18e0:	88 81       	ld	r24, Y
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9a df       	rcall	.-204    	; 0x1824 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    18f0:	88 81       	ld	r24, Y
    18f2:	81 60       	ori	r24, 0x01	; 1
    18f4:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    18f6:	66 e8       	ldi	r22, 0x86	; 134
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	92 df       	rcall	.-220    	; 0x1824 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1900:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1904:	8f 71       	andi	r24, 0x1F	; 31
    1906:	ca e0       	ldi	r28, 0x0A	; 10
    1908:	01 e4       	ldi	r16, 0x41	; 65
    190a:	11 e0       	ldi	r17, 0x01	; 1
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    190e:	66 e8       	ldi	r22, 0x86	; 134
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	86 df       	rcall	.-244    	; 0x1824 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1918:	f8 01       	movw	r30, r16
    191a:	80 81       	ld	r24, Z
    191c:	8f 71       	andi	r24, 0x1F	; 31
    191e:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    1920:	c9 f1       	breq	.+114    	; 0x1994 <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1922:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1924:	a1 f7       	brne	.-24     	; 0x190e <internal_tal_reset+0x4e>
    1926:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    192a:	87 df       	rcall	.-242    	; 0x183a <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    192c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1930:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    1934:	ee e6       	ldi	r30, 0x6E	; 110
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	80 81       	ld	r24, Z
    193a:	97 70       	andi	r25, 0x07	; 7
    193c:	88 7f       	andi	r24, 0xF8	; 248
    193e:	89 2b       	or	r24, r25
    1940:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1942:	80 81       	ld	r24, Z
    1944:	80 62       	ori	r24, 0x20	; 32
    1946:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    1948:	ec e4       	ldi	r30, 0x4C	; 76
    194a:	f1 e0       	ldi	r31, 0x01	; 1
    194c:	80 81       	ld	r24, Z
    194e:	80 68       	ori	r24, 0x80	; 128
    1950:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1952:	88 e4       	ldi	r24, 0x48	; 72
    1954:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    195e:	ed e4       	ldi	r30, 0x4D	; 77
    1960:	f1 e0       	ldi	r31, 0x01	; 1
    1962:	80 81       	ld	r24, Z
    1964:	8c 7f       	andi	r24, 0xFC	; 252
    1966:	82 60       	ori	r24, 0x02	; 2
    1968:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    196a:	aa e4       	ldi	r26, 0x4A	; 74
    196c:	b1 e0       	ldi	r27, 0x01	; 1
    196e:	8c 91       	ld	r24, X
    1970:	80 7f       	andi	r24, 0xF0	; 240
    1972:	83 60       	ori	r24, 0x03	; 3
    1974:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1976:	80 81       	ld	r24, Z
    1978:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    197a:	80 83       	st	Z, r24
    197c:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    197e:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1980:	80 83       	st	Z, r24
    1982:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1984:	30 d2       	rcall	.+1120   	; 0x1de6 <init_tal_pib>
    1986:	7d d2       	rcall	.+1274   	; 0x1e82 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    1988:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    198c:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <tal_rx_on_required>

	return MAC_SUCCESS;
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1994:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	08 95       	ret

000019a2 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
	MCUSR = 0;
    19b2:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    19b4:	80 e1       	ldi	r24, 0x10	; 16
    19b6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    19ba:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    19be:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    19c2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    19c6:	92 dc       	rcall	.-1756   	; 0x12ec <pal_init>
    19c8:	81 11       	cpse	r24, r1
    19ca:	6d c0       	rjmp	.+218    	; 0x1aa6 <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    19cc:	60 e4       	ldi	r22, 0x40	; 64
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	ba da       	rcall	.-2700   	; 0xf46 <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    19d2:	c9 e3       	ldi	r28, 0x39	; 57
    19d4:	d1 e0       	ldi	r29, 0x01	; 1
    19d6:	88 81       	ld	r24, Y
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    19dc:	88 81       	ld	r24, Y
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    19e2:	6b ef       	ldi	r22, 0xFB	; 251
    19e4:	71 e0       	ldi	r23, 0x01	; 1
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	1c df       	rcall	.-456    	; 0x1824 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    19ec:	88 81       	ld	r24, Y
    19ee:	8e 7f       	andi	r24, 0xFE	; 254
    19f0:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    19f2:	62 e0       	ldi	r22, 0x02	; 2
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	14 df       	rcall	.-472    	; 0x1824 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    19fc:	88 81       	ld	r24, Y
    19fe:	81 60       	ori	r24, 0x01	; 1
    1a00:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1a02:	66 e8       	ldi	r22, 0x86	; 134
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0c df       	rcall	.-488    	; 0x1824 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1a0c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1a10:	8f 71       	andi	r24, 0x1F	; 31
    1a12:	ca e0       	ldi	r28, 0x0A	; 10
    1a14:	01 e4       	ldi	r16, 0x41	; 65
    1a16:	11 e0       	ldi	r17, 0x01	; 1

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1a18:	0b c0       	rjmp	.+22     	; 0x1a30 <tal_init+0x8e>
    1a1a:	66 e8       	ldi	r22, 0x86	; 134
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	00 df       	rcall	.-512    	; 0x1824 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 71       	andi	r24, 0x1F	; 31
    1a2a:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <tal_init+0x8e>
    1a2e:	51 c0       	rjmp	.+162    	; 0x1ad2 <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	99 f7       	brne	.-26     	; 0x1a1a <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    1a34:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    1a38:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1a3c:	84 39       	cpi	r24, 0x94	; 148
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <tal_init+0xa0>
    1a40:	48 c0       	rjmp	.+144    	; 0x1ad2 <tal_init+0x130>
    1a42:	35 c0       	rjmp	.+106    	; 0x1aae <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1a44:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <rand>
    1a48:	f8 01       	movw	r30, r16
    1a4a:	81 93       	st	Z+, r24
    1a4c:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1a4e:	ec 15       	cp	r30, r12
    1a50:	fd 05       	cpc	r31, r13
    1a52:	c1 f7       	brne	.-16     	; 0x1a44 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1a54:	f7 01       	movw	r30, r14
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	42 81       	ldd	r20, Z+2	; 0x02
    1a5c:	53 81       	ldd	r21, Z+3	; 0x03
    1a5e:	64 81       	ldd	r22, Z+4	; 0x04
    1a60:	75 81       	ldd	r23, Z+5	; 0x05
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	af ef       	ldi	r26, 0xFF	; 255
    1a68:	0e 94 0f 1c 	call	0x381e	; 0x381e <__adddi3_s8>
    1a6c:	ad ef       	ldi	r26, 0xFD	; 253
    1a6e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__cmpdi2_s8>
    1a72:	21 f0       	breq	.+8      	; 0x1a7c <tal_init+0xda>
    1a74:	18 f0       	brcs	.+6      	; 0x1a7c <tal_init+0xda>
    1a76:	09 e7       	ldi	r16, 0x79	; 121
    1a78:	16 e0       	ldi	r17, 0x06	; 6

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1a7a:	e4 cf       	rjmp	.-56     	; 0x1a44 <tal_init+0xa2>
    1a7c:	8d e9       	ldi	r24, 0x9D	; 157
    1a7e:	9e e0       	ldi	r25, 0x0E	; 14
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1a80:	38 d0       	rcall	.+112    	; 0x1af2 <pal_trx_irq_init_rx_end>
    1a82:	8e ea       	ldi	r24, 0xAE	; 174
    1a84:	9e e0       	ldi	r25, 0x0E	; 14
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1a86:	30 d0       	rcall	.+96     	; 0x1ae8 <pal_trx_irq_init_tx_end>
    1a88:	8f eb       	ldi	r24, 0xBF	; 191
    1a8a:	9e e0       	ldi	r25, 0x0E	; 14
    1a8c:	37 d0       	rcall	.+110    	; 0x1afc <pal_trx_irq_init_awake>
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1a8e:	32 dc       	rcall	.-1948   	; 0x12f4 <bmm_buffer_init>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1a90:	8b e8       	ldi	r24, 0x8B	; 139
    1a92:	54 dc       	rcall	.-1880   	; 0x133c <bmm_buffer_alloc>
    1a94:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <tal_rx_buffer+0x1>
    1a98:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1a9c:	82 e7       	ldi	r24, 0x72	; 114
    1a9e:	96 e0       	ldi	r25, 0x06	; 6
    1aa0:	de dc       	rcall	.-1604   	; 0x145e <qmm_queue_init>
    1aa2:	da d5       	rcall	.+2996   	; 0x2658 <tfa_init>
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1aa4:	17 c0       	rjmp	.+46     	; 0x1ad4 <tal_init+0x132>
    1aa6:	c5 e8       	ldi	r28, 0x85	; 133
#endif

	return MAC_SUCCESS;
    1aa8:	15 c0       	rjmp	.+42     	; 0x1ad4 <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    1aaa:	c5 e8       	ldi	r28, 0x85	; 133
    1aac:	13 c0       	rjmp	.+38     	; 0x1ad4 <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	07 df       	rcall	.-498    	; 0x18c0 <internal_tal_reset>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    1ab2:	c8 2f       	mov	r28, r24
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	f9 cf       	rjmp	.-14     	; 0x1aaa <tal_init+0x108>
    1ab8:	0f 2e       	mov	r0, r31
    1aba:	f9 e7       	ldi	r31, 0x79	; 121
    1abc:	ef 2e       	mov	r14, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1abe:	f6 e0       	ldi	r31, 0x06	; 6
    1ac0:	ff 2e       	mov	r15, r31
    1ac2:	f0 2d       	mov	r31, r0
    1ac4:	0f 2e       	mov	r0, r31
    1ac6:	f1 e8       	ldi	r31, 0x81	; 129
    1ac8:	cf 2e       	mov	r12, r31
    1aca:	f6 e0       	ldi	r31, 0x06	; 6
    1acc:	df 2e       	mov	r13, r31
    1ace:	f0 2d       	mov	r31, r0
    1ad0:	c1 cf       	rjmp	.-126    	; 0x1a54 <tal_init+0xb2>
    1ad2:	c5 e8       	ldi	r28, 0x85	; 133
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	df 91       	pop	r29
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    1ad8:	cf 91       	pop	r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	08 95       	ret

00001ae8 <pal_trx_irq_init_tx_end>:
    1ae8:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <irq_hdl_trx_tx_end+0x1>
    1aec:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <irq_hdl_trx_tx_end>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    1af0:	08 95       	ret

00001af2 <pal_trx_irq_init_rx_end>:
    1af2:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <irq_hdl_trx_rx_end+0x1>
    1af6:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <irq_hdl_trx_rx_end>
    1afa:	08 95       	ret

00001afc <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1afc:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <irq_hdl_trx_awake+0x1>
    1b00:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <irq_hdl_trx_awake>
    1b04:	08 95       	ret

00001b06 <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	0b b6       	in	r0, 0x3b	; 59
    1b12:	0f 92       	push	r0
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1b2c:	e0 91 81 05 	lds	r30, 0x0581	; 0x800581 <irq_hdl_trx_tx_end>
    1b30:	f0 91 82 05 	lds	r31, 0x0582	; 0x800582 <irq_hdl_trx_tx_end+0x1>
    1b34:	19 95       	eicall
}
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0b be       	out	0x3b, r0	; 59
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	0b b6       	in	r0, 0x3b	; 59
    1b68:	0f 92       	push	r0
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1b82:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <irq_hdl_trx_rx_end>
    1b86:	f0 91 80 05 	lds	r31, 0x0580	; 0x800580 <irq_hdl_trx_rx_end+0x1>
    1b8a:	19 95       	eicall
}
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	bf 91       	pop	r27
    1b92:	af 91       	pop	r26
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	7f 91       	pop	r23
    1b9a:	6f 91       	pop	r22
    1b9c:	5f 91       	pop	r21
    1b9e:	4f 91       	pop	r20
    1ba0:	3f 91       	pop	r19
    1ba2:	2f 91       	pop	r18
    1ba4:	0f 90       	pop	r0
    1ba6:	0b be       	out	0x3b, r0	; 59
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

00001bb2 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    1bb2:	1f 92       	push	r1
    1bb4:	0f 92       	push	r0
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	0f 92       	push	r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	0b b6       	in	r0, 0x3b	; 59
    1bbe:	0f 92       	push	r0
    1bc0:	2f 93       	push	r18
    1bc2:	3f 93       	push	r19
    1bc4:	4f 93       	push	r20
    1bc6:	5f 93       	push	r21
    1bc8:	6f 93       	push	r22
    1bca:	7f 93       	push	r23
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	af 93       	push	r26
    1bd2:	bf 93       	push	r27
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    1bd8:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <irq_hdl_trx_cca_ed>
    1bdc:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <irq_hdl_trx_cca_ed+0x1>
    1be0:	19 95       	eicall
}
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0b be       	out	0x3b, r0	; 59
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
	irq_hdl_trx_awake();
    1c2e:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <irq_hdl_trx_awake>
    1c32:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <irq_hdl_trx_awake+0x1>
    1c36:	19 95       	eicall
}
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0b be       	out	0x3b, r0	; 59
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1c90:	0f 90       	pop	r0
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	0f 90       	pop	r0
    1c96:	1f 90       	pop	r1
    1c98:	18 95       	reti

00001c9a <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	0f 92       	push	r0
    1cb6:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	0f 92       	push	r0
    1cf2:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	0f 90       	pop	r0
    1d0e:	1f 90       	pop	r1
    1d10:	18 95       	reti

00001d12 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    1d12:	1f 92       	push	r1
    1d14:	0f 92       	push	r0
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	0f 92       	push	r0
    1d1a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	1f 92       	push	r1
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d46:	8f b7       	in	r24, 0x3f	; 63
    1d48:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1d4a:	f8 94       	cli
	return flags;
    1d4c:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    1d4e:	19 d2       	rcall	.+1074   	; 0x2182 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d50:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	08 95       	ret

00001d5c <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	1f 92       	push	r1
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d68:	8f b7       	in	r24, 0x3f	; 63
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1d6c:	f8 94       	cli
	return flags;
    1d6e:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    1d70:	a9 d3       	rcall	.+1874   	; 0x24c4 <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d72:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    1d74:	0f 90       	pop	r0
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	08 95       	ret

00001d7e <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <tal_awake_end_flag>
    1d84:	08 95       	ret

00001d86 <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    1d86:	85 fd       	sbrc	r24, 5
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <limit_tx_pwr+0xa>
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	9f 73       	andi	r25, 0x3F	; 63
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <limit_tx_pwr+0x12>
    1d90:	98 2f       	mov	r25, r24
    1d92:	91 95       	neg	r25
    1d94:	9f 71       	andi	r25, 0x1F	; 31
    1d96:	91 95       	neg	r25
    1d98:	e4 ee       	ldi	r30, 0xE4	; 228
    1d9a:	f1 e0       	ldi	r31, 0x01	; 1
    1d9c:	24 91       	lpm	r18, Z
    1d9e:	29 17       	cp	r18, r25
    1da0:	54 f4       	brge	.+20     	; 0x1db6 <limit_tx_pwr+0x30>
    1da2:	84 91       	lpm	r24, Z
    1da4:	80 3e       	cpi	r24, 0xE0	; 224
    1da6:	b4 f0       	brlt	.+44     	; 0x1dd4 <limit_tx_pwr+0x4e>
    1da8:	80 32       	cpi	r24, 0x20	; 32
    1daa:	b4 f4       	brge	.+44     	; 0x1dd8 <limit_tx_pwr+0x52>
    1dac:	88 23       	and	r24, r24
    1dae:	cc f4       	brge	.+50     	; 0x1de2 <limit_tx_pwr+0x5c>
    1db0:	8f 71       	andi	r24, 0x1F	; 31
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	16 c0       	rjmp	.+44     	; 0x1de2 <limit_tx_pwr+0x5c>
    1db6:	e3 ef       	ldi	r30, 0xF3	; 243
    1db8:	f1 e0       	ldi	r31, 0x01	; 1
    1dba:	24 91       	lpm	r18, Z
    1dbc:	92 17       	cp	r25, r18
    1dbe:	8c f4       	brge	.+34     	; 0x1de2 <limit_tx_pwr+0x5c>
    1dc0:	84 91       	lpm	r24, Z
    1dc2:	80 3e       	cpi	r24, 0xE0	; 224
    1dc4:	5c f0       	brlt	.+22     	; 0x1ddc <limit_tx_pwr+0x56>
    1dc6:	80 32       	cpi	r24, 0x20	; 32
    1dc8:	5c f4       	brge	.+22     	; 0x1de0 <limit_tx_pwr+0x5a>
    1dca:	88 23       	and	r24, r24
    1dcc:	54 f4       	brge	.+20     	; 0x1de2 <limit_tx_pwr+0x5c>
    1dce:	8f 71       	andi	r24, 0x1F	; 31
    1dd0:	80 62       	ori	r24, 0x20	; 32
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <limit_tx_pwr+0x5c>
    1dd4:	80 e2       	ldi	r24, 0x20	; 32
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <limit_tx_pwr+0x5c>
    1dd8:	8f e1       	ldi	r24, 0x1F	; 31
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <limit_tx_pwr+0x5c>
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <limit_tx_pwr+0x5c>
    1de0:	8f e1       	ldi	r24, 0x1F	; 31
    1de2:	80 68       	ori	r24, 0x80	; 128
    1de4:	08 95       	ret

00001de6 <init_tal_pib>:
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	c9 e7       	ldi	r28, 0x79	; 121
    1dec:	d6 e0       	ldi	r29, 0x06	; 6
    1dee:	84 e0       	ldi	r24, 0x04	; 4
    1df0:	8c 8b       	std	Y+20, r24	; 0x14
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	8d 8b       	std	Y+21, r24	; 0x15
    1df6:	2f ef       	ldi	r18, 0xFF	; 255
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	3f 87       	std	Y+15, r19	; 0x0f
    1dfc:	2e 87       	std	Y+14, r18	; 0x0e
    1dfe:	3d 87       	std	Y+13, r19	; 0x0d
    1e00:	2c 87       	std	Y+12, r18	; 0x0c
    1e02:	9b e0       	ldi	r25, 0x0B	; 11
    1e04:	9b 8b       	std	Y+19, r25	; 0x13
    1e06:	18 8e       	std	Y+24, r1	; 0x18
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	58 ef       	ldi	r21, 0xF8	; 248
    1e0c:	6f ef       	ldi	r22, 0xFF	; 255
    1e0e:	77 e0       	ldi	r23, 0x07	; 7
    1e10:	48 87       	std	Y+8, r20	; 0x08
    1e12:	59 87       	std	Y+9, r21	; 0x09
    1e14:	6a 87       	std	Y+10, r22	; 0x0a
    1e16:	7b 87       	std	Y+11, r23	; 0x0b
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	31 e0       	ldi	r19, 0x01	; 1
    1e1c:	39 8b       	std	Y+17, r19	; 0x11
    1e1e:	28 8b       	std	Y+16, r18	; 0x10
    1e20:	9a e0       	ldi	r25, 0x0A	; 10
    1e22:	99 8f       	std	Y+25, r25	; 0x19
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	9a 8f       	std	Y+26, r25	; 0x1a
    1e28:	95 e0       	ldi	r25, 0x05	; 5
    1e2a:	9b 8f       	std	Y+27, r25	; 0x1b
    1e2c:	8c 8f       	std	Y+28, r24	; 0x1c
    1e2e:	84 e8       	ldi	r24, 0x84	; 132
    1e30:	aa df       	rcall	.-172    	; 0x1d86 <limit_tx_pwr>
    1e32:	8f 8b       	std	Y+23, r24	; 0x17
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	8a 8b       	std	Y+18, r24	; 0x12
    1e38:	1e 8a       	std	Y+22, r1	; 0x16
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    1e40:	85 fd       	sbrc	r24, 5
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <convert_phyTransmitPower_to_reg_value+0x8>
    1e44:	8f 73       	andi	r24, 0x3F	; 63
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <convert_phyTransmitPower_to_reg_value+0xe>
    1e48:	81 95       	neg	r24
    1e4a:	8f 71       	andi	r24, 0x1F	; 31
    1e4c:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1e4e:	e4 ee       	ldi	r30, 0xE4	; 228
    1e50:	f1 e0       	ldi	r31, 0x01	; 1
    1e52:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    1e54:	89 17       	cp	r24, r25
    1e56:	3c f4       	brge	.+14     	; 0x1e66 <convert_phyTransmitPower_to_reg_value+0x26>
    1e58:	e5 ee       	ldi	r30, 0xE5	; 229
    1e5a:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1e5c:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1e5e:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    1e60:	89 17       	cp	r24, r25
    1e62:	3c f0       	brlt	.+14     	; 0x1e72 <convert_phyTransmitPower_to_reg_value+0x32>
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1e66:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    1e68:	98 17       	cp	r25, r24
    1e6a:	4c f4       	brge	.+18     	; 0x1e7e <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	82 0f       	add	r24, r18
    1e70:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1e72:	2f 5f       	subi	r18, 0xFF	; 255
    1e74:	31 96       	adiw	r30, 0x01	; 1
    1e76:	20 31       	cpi	r18, 0x10	; 16
    1e78:	91 f7       	brne	.-28     	; 0x1e5e <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	08 95       	ret
    1e7e:	82 2f       	mov	r24, r18
}
    1e80:	08 95       	ret

00001e82 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    1e86:	e9 e7       	ldi	r30, 0x79	; 121
    1e88:	f6 e0       	ldi	r31, 0x06	; 6
    1e8a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e8c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    1e90:	87 85       	ldd	r24, Z+15	; 0x0f
    1e92:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1e96:	e4 e6       	ldi	r30, 0x64	; 100
    1e98:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    1e9a:	a9 e7       	ldi	r26, 0x79	; 121
    1e9c:	b6 e0       	ldi	r27, 0x06	; 6
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    1ea2:	ec 36       	cpi	r30, 0x6C	; 108
    1ea4:	31 e0       	ldi	r19, 0x01	; 1
    1ea6:	f3 07       	cpc	r31, r19
    1ea8:	d1 f7       	brne	.-12     	; 0x1e9e <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    1eaa:	e9 e7       	ldi	r30, 0x79	; 121
    1eac:	f6 e0       	ldi	r31, 0x06	; 6
    1eae:	84 85       	ldd	r24, Z+12	; 0x0c
    1eb0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    1eb4:	85 85       	ldd	r24, Z+13	; 0x0d
    1eb6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    1eba:	48 e4       	ldi	r20, 0x48	; 72
    1ebc:	51 e0       	ldi	r21, 0x01	; 1
    1ebe:	da 01       	movw	r26, r20
    1ec0:	8c 91       	ld	r24, X
    1ec2:	22 89       	ldd	r18, Z+18	; 0x12
    1ec4:	b0 e2       	ldi	r27, 0x20	; 32
    1ec6:	2b 9f       	mul	r18, r27
    1ec8:	90 01       	movw	r18, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	20 76       	andi	r18, 0x60	; 96
    1ece:	8f 79       	andi	r24, 0x9F	; 159
    1ed0:	82 2b       	or	r24, r18
    1ed2:	da 01       	movw	r26, r20
    1ed4:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    1ed6:	cf e6       	ldi	r28, 0x6F	; 111
    1ed8:	d1 e0       	ldi	r29, 0x01	; 1
    1eda:	88 81       	ld	r24, Y
    1edc:	95 89       	ldd	r25, Z+21	; 0x15
    1ede:	9f 70       	andi	r25, 0x0F	; 15
    1ee0:	80 7f       	andi	r24, 0xF0	; 240
    1ee2:	89 2b       	or	r24, r25
    1ee4:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    1ee6:	2e e6       	ldi	r18, 0x6E	; 110
    1ee8:	31 e0       	ldi	r19, 0x01	; 1
    1eea:	d9 01       	movw	r26, r18
    1eec:	8c 91       	ld	r24, X
    1eee:	96 89       	ldd	r25, Z+22	; 0x16
    1ef0:	99 0f       	add	r25, r25
    1ef2:	99 0f       	add	r25, r25
    1ef4:	99 0f       	add	r25, r25
    1ef6:	98 70       	andi	r25, 0x08	; 8
    1ef8:	87 7f       	andi	r24, 0xF7	; 247
    1efa:	89 2b       	or	r24, r25
    1efc:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    1efe:	28 81       	ld	r18, Y
    1f00:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f02:	b0 e1       	ldi	r27, 0x10	; 16
    1f04:	9b 9f       	mul	r25, r27
    1f06:	c0 01       	movw	r24, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	92 2f       	mov	r25, r18
    1f0c:	9f 70       	andi	r25, 0x0F	; 15
    1f0e:	89 2b       	or	r24, r25
    1f10:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    1f12:	da 01       	movw	r26, r20
    1f14:	8c 91       	ld	r24, X
    1f16:	93 89       	ldd	r25, Z+19	; 0x13
    1f18:	9f 71       	andi	r25, 0x1F	; 31
    1f1a:	80 7e       	andi	r24, 0xE0	; 224
    1f1c:	89 2b       	or	r24, r25
    1f1e:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    1f20:	87 89       	ldd	r24, Z+23	; 0x17
    1f22:	8e df       	rcall	.-228    	; 0x1e40 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    1f24:	e5 e4       	ldi	r30, 0x45	; 69
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	90 81       	ld	r25, Z
    1f2a:	90 7f       	andi	r25, 0xF0	; 240
    1f2c:	8f 70       	andi	r24, 0x0F	; 15
    1f2e:	89 2b       	or	r24, r25
    1f30:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    1f3c:	8e 34       	cpi	r24, 0x4E	; 78
    1f3e:	41 f0       	breq	.+16     	; 0x1f50 <tal_pib_set+0x18>
    1f40:	89 35       	cpi	r24, 0x59	; 89
    1f42:	61 f4       	brne	.+24     	; 0x1f5c <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    1f44:	fb 01       	movw	r30, r22
    1f46:	80 81       	ld	r24, Z
    1f48:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    1f4e:	0b c1       	rjmp	.+534    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    1f50:	fb 01       	movw	r30, r22
    1f52:	80 81       	ld	r24, Z
    1f54:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1f58:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    1f5a:	05 c1       	rjmp	.+522    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    1f5c:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <tal_trx_status>
    1f60:	9f 30       	cpi	r25, 0x0F	; 15
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <tal_pib_set+0x2e>
    1f64:	dc c0       	rjmp	.+440    	; 0x211e <__EEPROM_REGION_LENGTH__+0x11e>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    1f66:	8b 30       	cpi	r24, 0x0B	; 11
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <tal_pib_set+0x34>
    1f6a:	c9 c0       	rjmp	.+402    	; 0x20fe <__EEPROM_REGION_LENGTH__+0xfe>
    1f6c:	80 f4       	brcc	.+32     	; 0x1f8e <tal_pib_set+0x56>
    1f6e:	eb 01       	movw	r28, r22
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <tal_pib_set+0x3e>
    1f74:	84 c0       	rjmp	.+264    	; 0x207e <__EEPROM_REGION_LENGTH__+0x7e>
    1f76:	20 f4       	brcc	.+8      	; 0x1f80 <tal_pib_set+0x48>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <tal_pib_set+0x46>
    1f7c:	46 c0       	rjmp	.+140    	; 0x200a <__EEPROM_REGION_LENGTH__+0xa>
    1f7e:	d1 c0       	rjmp	.+418    	; 0x2122 <__EEPROM_REGION_LENGTH__+0x122>
    1f80:	83 30       	cpi	r24, 0x03	; 3
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <tal_pib_set+0x4e>
    1f84:	8c c0       	rjmp	.+280    	; 0x209e <__EEPROM_REGION_LENGTH__+0x9e>
    1f86:	84 30       	cpi	r24, 0x04	; 4
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <tal_pib_set+0x54>
    1f8a:	5a c0       	rjmp	.+180    	; 0x2040 <__EEPROM_REGION_LENGTH__+0x40>
    1f8c:	ca c0       	rjmp	.+404    	; 0x2122 <__EEPROM_REGION_LENGTH__+0x122>
    1f8e:	83 35       	cpi	r24, 0x53	; 83
    1f90:	79 f1       	breq	.+94     	; 0x1ff0 <tal_pib_set+0xb8>
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <tal_pib_set+0x66>
    1f94:	8f 34       	cpi	r24, 0x4F	; 79
    1f96:	51 f0       	breq	.+20     	; 0x1fac <tal_pib_set+0x74>
    1f98:	80 35       	cpi	r24, 0x50	; 80
    1f9a:	e9 f0       	breq	.+58     	; 0x1fd6 <tal_pib_set+0x9e>
    1f9c:	c2 c0       	rjmp	.+388    	; 0x2122 <__EEPROM_REGION_LENGTH__+0x122>
    1f9e:	87 35       	cpi	r24, 0x57	; 87
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <tal_pib_set+0x6c>
    1fa2:	56 c0       	rjmp	.+172    	; 0x2050 <__EEPROM_REGION_LENGTH__+0x50>
    1fa4:	80 3f       	cpi	r24, 0xF0	; 240
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <tal_pib_set+0x72>
    1fa8:	8b c0       	rjmp	.+278    	; 0x20c0 <__EEPROM_REGION_LENGTH__+0xc0>
    1faa:	bb c0       	rjmp	.+374    	; 0x2122 <__EEPROM_REGION_LENGTH__+0x122>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    1fac:	fb 01       	movw	r30, r22
    1fae:	80 81       	ld	r24, Z
    1fb0:	e9 e7       	ldi	r30, 0x79	; 121
    1fb2:	f6 e0       	ldi	r31, 0x06	; 6
    1fb4:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    1fb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fb8:	98 17       	cp	r25, r24
    1fba:	10 f4       	brcc	.+4      	; 0x1fc0 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    1fbc:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    1fc0:	ef e6       	ldi	r30, 0x6F	; 111
    1fc2:	f1 e0       	ldi	r31, 0x01	; 1
    1fc4:	80 81       	ld	r24, Z
    1fc6:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <tal_pib+0x15>
    1fca:	9f 70       	andi	r25, 0x0F	; 15
    1fcc:	80 7f       	andi	r24, 0xF0	; 240
    1fce:	89 2b       	or	r24, r25
    1fd0:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    1fd4:	c8 c0       	rjmp	.+400    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	90 81       	ld	r25, Z
    1fda:	81 81       	ldd	r24, Z+1	; 0x01
    1fdc:	e9 e7       	ldi	r30, 0x79	; 121
    1fde:	f6 e0       	ldi	r31, 0x06	; 6
    1fe0:	96 87       	std	Z+14, r25	; 0x0e
    1fe2:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    1fe4:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    1fe8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1fec:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    1fee:	bb c0       	rjmp	.+374    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    1ff0:	fb 01       	movw	r30, r22
    1ff2:	90 81       	ld	r25, Z
    1ff4:	81 81       	ldd	r24, Z+1	; 0x01
    1ff6:	e9 e7       	ldi	r30, 0x79	; 121
    1ff8:	f6 e0       	ldi	r31, 0x06	; 6
    1ffa:	94 87       	std	Z+12, r25	; 0x0c
    1ffc:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    1ffe:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    2002:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2006:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    2008:	ae c0       	rjmp	.+348    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    200a:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <tal_state>
    200e:	81 11       	cpse	r24, r1
    2010:	8a c0       	rjmp	.+276    	; 0x2126 <__EEPROM_REGION_LENGTH__+0x126>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    2012:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	58 ef       	ldi	r21, 0xF8	; 248
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	77 e0       	ldi	r23, 0x07	; 7
    201c:	08 2e       	mov	r0, r24
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <__EEPROM_REGION_LENGTH__+0x28>
    2020:	76 95       	lsr	r23
    2022:	67 95       	ror	r22
    2024:	57 95       	ror	r21
    2026:	47 95       	ror	r20
    2028:	0a 94       	dec	r0
    202a:	d2 f7       	brpl	.-12     	; 0x2020 <__EEPROM_REGION_LENGTH__+0x20>
    202c:	40 ff       	sbrs	r20, 0
    202e:	7d c0       	rjmp	.+250    	; 0x212a <__EEPROM_REGION_LENGTH__+0x12a>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    2030:	98 30       	cpi	r25, 0x08	; 8
    2032:	09 f4       	brne	.+2      	; 0x2036 <__EEPROM_REGION_LENGTH__+0x36>
    2034:	80 c0       	rjmp	.+256    	; 0x2136 <__EEPROM_REGION_LENGTH__+0x136>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	6d da       	rcall	.-2854   	; 0x1514 <set_trx_state>
							TRX_OFF);
    203a:	88 30       	cpi	r24, 0x08	; 8
    203c:	e1 f7       	brne	.-8      	; 0x2036 <__EEPROM_REGION_LENGTH__+0x36>
    203e:	86 c0       	rjmp	.+268    	; 0x214c <__EEPROM_REGION_LENGTH__+0x14c>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    2040:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <tal_state>
    2044:	81 11       	cpse	r24, r1
    2046:	73 c0       	rjmp	.+230    	; 0x212e <__EEPROM_REGION_LENGTH__+0x12e>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    2048:	88 81       	ld	r24, Y
    204a:	81 11       	cpse	r24, r1
    204c:	72 c0       	rjmp	.+228    	; 0x2132 <__EEPROM_REGION_LENGTH__+0x132>
    204e:	8b c0       	rjmp	.+278    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    2050:	fb 01       	movw	r30, r22
    2052:	90 81       	ld	r25, Z
    2054:	e9 e7       	ldi	r30, 0x79	; 121
    2056:	f6 e0       	ldi	r31, 0x06	; 6
    2058:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    205a:	85 89       	ldd	r24, Z+21	; 0x15
    205c:	98 17       	cp	r25, r24
    205e:	10 f4       	brcc	.+4      	; 0x2064 <__EEPROM_REGION_LENGTH__+0x64>
				tal_pib.MinBE = tal_pib.MaxBE;
    2060:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    2064:	ef e6       	ldi	r30, 0x6F	; 111
    2066:	f1 e0       	ldi	r31, 0x01	; 1
    2068:	80 81       	ld	r24, Z
    206a:	28 2f       	mov	r18, r24
    206c:	2f 70       	andi	r18, 0x0F	; 15
    206e:	30 e1       	ldi	r19, 0x10	; 16
    2070:	93 9f       	mul	r25, r19
    2072:	c0 01       	movw	r24, r0
    2074:	11 24       	eor	r1, r1
    2076:	82 2b       	or	r24, r18
    2078:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    207a:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    207c:	74 c0       	rjmp	.+232    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    207e:	88 81       	ld	r24, Y
    2080:	c9 e7       	ldi	r28, 0x79	; 121
    2082:	d6 e0       	ldi	r29, 0x06	; 6

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    2084:	8f 8b       	std	Y+23, r24	; 0x17
    2086:	7f de       	rcall	.-770    	; 0x1d86 <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    2088:	8f 8b       	std	Y+23, r24	; 0x17
    208a:	da de       	rcall	.-588    	; 0x1e40 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    208c:	e5 e4       	ldi	r30, 0x45	; 69
    208e:	f1 e0       	ldi	r31, 0x01	; 1
    2090:	90 81       	ld	r25, Z
    2092:	90 7f       	andi	r25, 0xF0	; 240
    2094:	8f 70       	andi	r24, 0x0F	; 15
    2096:	89 2b       	or	r24, r25
    2098:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    209a:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    209c:	64 c0       	rjmp	.+200    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    209e:	88 81       	ld	r24, Y
    20a0:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    20a4:	e8 e4       	ldi	r30, 0x48	; 72
    20a6:	f1 e0       	ldi	r31, 0x01	; 1
    20a8:	20 81       	ld	r18, Z
    20aa:	30 e2       	ldi	r19, 0x20	; 32
    20ac:	83 9f       	mul	r24, r19
    20ae:	c0 01       	movw	r24, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	80 76       	andi	r24, 0x60	; 96
    20b4:	92 2f       	mov	r25, r18
    20b6:	9f 79       	andi	r25, 0x9F	; 159
    20b8:	89 2b       	or	r24, r25
    20ba:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    20bc:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    20be:	53 c0       	rjmp	.+166    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    20c0:	fb 01       	movw	r30, r22
    20c2:	b0 81       	ld	r27, Z
    20c4:	a1 81       	ldd	r26, Z+1	; 0x01
    20c6:	52 81       	ldd	r21, Z+2	; 0x02
    20c8:	43 81       	ldd	r20, Z+3	; 0x03
    20ca:	34 81       	ldd	r19, Z+4	; 0x04
    20cc:	25 81       	ldd	r18, Z+5	; 0x05
    20ce:	96 81       	ldd	r25, Z+6	; 0x06
    20d0:	87 81       	ldd	r24, Z+7	; 0x07
    20d2:	e9 e7       	ldi	r30, 0x79	; 121
    20d4:	f6 e0       	ldi	r31, 0x06	; 6
    20d6:	b0 83       	st	Z, r27
    20d8:	a1 83       	std	Z+1, r26	; 0x01
    20da:	52 83       	std	Z+2, r21	; 0x02
    20dc:	43 83       	std	Z+3, r20	; 0x03
    20de:	34 83       	std	Z+4, r19	; 0x04
    20e0:	25 83       	std	Z+5, r18	; 0x05
    20e2:	96 83       	std	Z+6, r25	; 0x06
    20e4:	87 83       	std	Z+7, r24	; 0x07
    20e6:	e4 e6       	ldi	r30, 0x64	; 100
    20e8:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    20ea:	a9 e7       	ldi	r26, 0x79	; 121
    20ec:	b6 e0       	ldi	r27, 0x06	; 6

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    20ee:	8d 91       	ld	r24, X+
    20f0:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    20f2:	ec 36       	cpi	r30, 0x6C	; 108
    20f4:	31 e0       	ldi	r19, 0x01	; 1
    20f6:	f3 07       	cpc	r31, r19
    20f8:	d1 f7       	brne	.-12     	; 0x20ee <__EEPROM_REGION_LENGTH__+0xee>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	34 c0       	rjmp	.+104    	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    20fe:	fb 01       	movw	r30, r22
    2100:	80 81       	ld	r24, Z
    2102:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    2106:	ee e6       	ldi	r30, 0x6E	; 110
    2108:	f1 e0       	ldi	r31, 0x01	; 1
    210a:	90 81       	ld	r25, Z
    210c:	88 0f       	add	r24, r24
    210e:	88 0f       	add	r24, r24
    2110:	88 0f       	add	r24, r24
    2112:	88 70       	andi	r24, 0x08	; 8
    2114:	97 7f       	andi	r25, 0xF7	; 247
    2116:	89 2b       	or	r24, r25
    2118:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    211a:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    211c:	24 c0       	rjmp	.+72     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    211e:	81 e8       	ldi	r24, 0x81	; 129
    2120:	22 c0       	rjmp	.+68     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    2122:	84 ef       	ldi	r24, 0xF4	; 244
    2124:	20 c0       	rjmp	.+64     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2126:	86 e8       	ldi	r24, 0x86	; 134
    2128:	1e c0       	rjmp	.+60     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    212a:	88 ee       	ldi	r24, 0xE8	; 232
    212c:	1c c0       	rjmp	.+56     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    212e:	86 e8       	ldi	r24, 0x86	; 134
    2130:	1a c0       	rjmp	.+52     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    2132:	88 ee       	ldi	r24, 0xE8	; 232
    2134:	18 c0       	rjmp	.+48     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    2136:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    213a:	e8 e4       	ldi	r30, 0x48	; 72
    213c:	f1 e0       	ldi	r31, 0x01	; 1
    213e:	90 81       	ld	r25, Z
    2140:	90 7e       	andi	r25, 0xE0	; 224
    2142:	8f 71       	andi	r24, 0x1F	; 31
    2144:	89 2b       	or	r24, r25
    2146:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <__EEPROM_REGION_LENGTH__+0x166>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    214c:	88 81       	ld	r24, Y
    214e:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    2152:	e8 e4       	ldi	r30, 0x48	; 72
    2154:	f1 e0       	ldi	r31, 0x01	; 1
    2156:	90 81       	ld	r25, Z
    2158:	90 7e       	andi	r25, 0xE0	; 224
    215a:	8f 71       	andi	r24, 0x1F	; 31
    215c:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    215e:	80 83       	st	Z, r24
    2160:	86 e1       	ldi	r24, 0x16	; 22
    2162:	d8 d9       	rcall	.-3152   	; 0x1514 <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2164:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    216e:	61 50       	subi	r22, 0x01	; 1
    2170:	71 09       	sbc	r23, r1
    2172:	81 09       	sbc	r24, r1
    2174:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2176:	61 15       	cp	r22, r1
    2178:	71 05       	cpc	r23, r1
    217a:	81 05       	cpc	r24, r1
    217c:	91 05       	cpc	r25, r1
    217e:	b9 f7       	brne	.-18     	; 0x216e <__portable_avr_delay_cycles+0x2>
    2180:	08 95       	ret

00002182 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    2192:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <tal_rx_buffer>
    2196:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <tal_rx_buffer+0x1>
    219a:	30 97       	sbiw	r30, 0x00	; 0
    219c:	71 f4       	brne	.+28     	; 0x21ba <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    219e:	cc e4       	ldi	r28, 0x4C	; 76
    21a0:	d1 e0       	ldi	r29, 0x01	; 1
    21a2:	88 81       	ld	r24, Y
    21a4:	8f 77       	andi	r24, 0x7F	; 127
    21a6:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	dd df       	rcall	.-70     	; 0x216c <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    21b2:	88 81       	ld	r24, Y
    21b4:	80 68       	ori	r24, 0x80	; 128
    21b6:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    21b8:	49 c0       	rjmp	.+146    	; 0x224c <handle_received_frame_irq+0xca>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    21ba:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    21be:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    21c2:	11 23       	and	r17, r17
    21c4:	0c f4       	brge	.+2      	; 0x21c8 <handle_received_frame_irq+0x46>
    21c6:	42 c0       	rjmp	.+132    	; 0x224c <handle_received_frame_irq+0xca>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    21c8:	e0 80       	ld	r14, Z
    21ca:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	81 0f       	add	r24, r17
    21d0:	eb e8       	ldi	r30, 0x8B	; 139
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	e8 1b       	sub	r30, r24
    21d6:	f1 09       	sbc	r31, r1
    21d8:	e7 01       	movw	r28, r14
    21da:	ce 0f       	add	r28, r30
    21dc:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    21de:	c1 2e       	mov	r12, r17
    21e0:	d1 2c       	mov	r13, r1
    21e2:	a6 01       	movw	r20, r12
    21e4:	4f 5f       	subi	r20, 0xFF	; 255
    21e6:	5f 4f       	sbci	r21, 0xFF	; 255
    21e8:	60 e8       	ldi	r22, 0x80	; 128
    21ea:	71 e0       	ldi	r23, 0x01	; 1
    21ec:	ce 01       	movw	r24, r28
    21ee:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <memcpy>
	frame_ptr--;
    21f2:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    21f4:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    21f6:	d7 01       	movw	r26, r14
    21f8:	18 96       	adiw	r26, 0x08	; 8
    21fa:	fc 93       	st	X, r31
    21fc:	ee 93       	st	-X, r30
    21fe:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    2200:	ec 0d       	add	r30, r12
    2202:	fd 1d       	adc	r31, r13
    2204:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    2206:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <tal_rx_buffer>
    220a:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <tal_rx_buffer+0x1>
    220e:	82 e7       	ldi	r24, 0x72	; 114
    2210:	96 e0       	ldi	r25, 0x06	; 6
    2212:	2c d9       	rcall	.-3496   	; 0x146c <qmm_queue_append>

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    2214:	8b e8       	ldi	r24, 0x8B	; 139
    2216:	92 d8       	rcall	.-3804   	; 0x133c <bmm_buffer_alloc>
    2218:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <tal_rx_buffer+0x1>
    221c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_buffer>
    2220:	89 2b       	or	r24, r25

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    2222:	21 f4       	brne	.+8      	; 0x222c <handle_received_frame_irq+0xaa>
    2224:	81 e0       	ldi	r24, 0x01	; 1
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    2226:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <tal_rx_on_required>
    222a:	0d c0       	rjmp	.+26     	; 0x2246 <handle_received_frame_irq+0xc4>
    222c:	cc e4       	ldi	r28, 0x4C	; 76
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    222e:	d1 e0       	ldi	r29, 0x01	; 1
    2230:	88 81       	ld	r24, Y
    2232:	8f 77       	andi	r24, 0x7F	; 127
    2234:	88 83       	st	Y, r24
    2236:	63 e0       	ldi	r22, 0x03	; 3
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	96 df       	rcall	.-212    	; 0x216c <__portable_avr_delay_cycles>
    2240:	88 81       	ld	r24, Y
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    2242:	80 68       	ori	r24, 0x80	; 128
    2244:	88 83       	st	Y, r24
    2246:	80 e4       	ldi	r24, 0x40	; 64
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    2248:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    224c:	df 91       	pop	r29
}
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	ef 90       	pop	r14
    2258:	df 90       	pop	r13
    225a:	cf 90       	pop	r12
    225c:	08 95       	ret

0000225e <process_incoming_frame>:
    225e:	cf 93       	push	r28
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    2260:	df 93       	push	r29
    2262:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    2264:	fc 01       	movw	r30, r24
    2266:	c0 81       	ld	r28, Z
    2268:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    226a:	af 81       	ldd	r26, Y+7	; 0x07
    226c:	b8 85       	ldd	r27, Y+8	; 0x08
    226e:	8c 91       	ld	r24, X
    2270:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    2274:	e8 2f       	mov	r30, r24
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	31 96       	adiw	r30, 0x01	; 1
    227a:	ea 0f       	add	r30, r26
    227c:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    227e:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    2280:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    2282:	3d 33       	cpi	r19, 0x3D	; 61
    2284:	20 f4       	brcc	.+8      	; 0x228e <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    2286:	31 11       	cpse	r19, r1
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <process_incoming_frame+0x32>
		ed_value = 1;
    228a:	31 e0       	ldi	r19, 0x01	; 1
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    228e:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    2290:	82 95       	swap	r24
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	83 70       	andi	r24, 0x03	; 3
    2298:	2f ef       	ldi	r18, 0xFF	; 255
    229a:	82 9f       	mul	r24, r18
    229c:	c0 01       	movw	r24, r0
    229e:	11 24       	eor	r1, r1
    22a0:	38 9f       	mul	r19, r24
    22a2:	b0 01       	movw	r22, r0
    22a4:	39 9f       	mul	r19, r25
    22a6:	70 0d       	add	r23, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	9b 01       	movw	r18, r22
    22ac:	a3 e8       	ldi	r26, 0x83	; 131
    22ae:	bd e2       	ldi	r27, 0x2D	; 45
    22b0:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__umulhisi3>
    22b4:	96 95       	lsr	r25
    22b6:	87 95       	ror	r24
    22b8:	92 95       	swap	r25
    22ba:	82 95       	swap	r24
    22bc:	8f 70       	andi	r24, 0x0F	; 15
    22be:	89 27       	eor	r24, r25
    22c0:	9f 70       	andi	r25, 0x0F	; 15
    22c2:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    22c4:	8f 3f       	cpi	r24, 0xFF	; 255
    22c6:	91 05       	cpc	r25, r1
    22c8:	11 f0       	breq	.+4      	; 0x22ce <process_incoming_frame+0x70>
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <process_incoming_frame+0x70>
		return 255;
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    22ce:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    22d0:	5a 83       	std	Y+2, r21	; 0x02
    22d2:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    22d4:	ce 01       	movw	r24, r28
    22d6:	ca d6       	rcall	.+3476   	; 0x306c <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    22de:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <tal_state>
    22e2:	91 11       	cpse	r25, r1
    22e4:	16 c0       	rjmp	.+44     	; 0x2312 <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    22e6:	88 30       	cpi	r24, 0x08	; 8
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    22ea:	14 d9       	rcall	.-3544   	; 0x1514 <set_trx_state>
		tal_rx_on_required = false;
    22ec:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <tal_rx_on_required>
		return TRX_OFF;
    22f0:	88 e0       	ldi	r24, 0x08	; 8
    22f2:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    22f4:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <tal_rx_buffer>
    22f8:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <tal_rx_buffer+0x1>
    22fc:	89 2b       	or	r24, r25
    22fe:	21 f0       	breq	.+8      	; 0x2308 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    2300:	86 e1       	ldi	r24, 0x16	; 22
    2302:	08 d9       	rcall	.-3568   	; 0x1514 <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    2304:	86 e0       	ldi	r24, 0x06	; 6
    2306:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    230e:	86 e0       	ldi	r24, 0x06	; 6
    2310:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    2312:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    2314:	08 95       	ret

00002316 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2318:	61 50       	subi	r22, 0x01	; 1
    231a:	71 09       	sbc	r23, r1
    231c:	81 09       	sbc	r24, r1
    231e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2320:	61 15       	cp	r22, r1
    2322:	71 05       	cpc	r23, r1
    2324:	81 05       	cpc	r24, r1
    2326:	91 05       	cpc	r25, r1
    2328:	b9 f7       	brne	.-18     	; 0x2318 <__portable_avr_delay_cycles+0x2>
    232a:	08 95       	ret

0000232c <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    232c:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    2330:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <trx_trac_status>
    2334:	83 30       	cpi	r24, 0x03	; 3
    2336:	69 f0       	breq	.+26     	; 0x2352 <tx_done_handling+0x26>
    2338:	28 f4       	brcc	.+10     	; 0x2344 <tx_done_handling+0x18>
    233a:	88 23       	and	r24, r24
    233c:	91 f0       	breq	.+36     	; 0x2362 <tx_done_handling+0x36>
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	31 f0       	breq	.+12     	; 0x234e <tx_done_handling+0x22>
    2342:	0d c0       	rjmp	.+26     	; 0x235e <tx_done_handling+0x32>
    2344:	85 30       	cpi	r24, 0x05	; 5
    2346:	39 f0       	breq	.+14     	; 0x2356 <tx_done_handling+0x2a>
    2348:	87 30       	cpi	r24, 0x07	; 7
    234a:	39 f0       	breq	.+14     	; 0x235a <tx_done_handling+0x2e>
    234c:	08 c0       	rjmp	.+16     	; 0x235e <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    234e:	87 e8       	ldi	r24, 0x87	; 135
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    2352:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    2356:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    235a:	85 e8       	ldi	r24, 0x85	; 133
		break;
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    235e:	85 e8       	ldi	r24, 0x85	; 133
		break;
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    2362:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    2364:	60 91 77 06 	lds	r22, 0x0677	; 0x800677 <mac_frame_ptr>
    2368:	70 91 78 06 	lds	r23, 0x0678	; 0x800678 <mac_frame_ptr+0x1>
    236c:	7c c6       	rjmp	.+3320   	; 0x3066 <tal_tx_frame_done_cb>
    236e:	08 95       	ret

00002370 <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	1f 92       	push	r1
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    237e:	66 23       	and	r22, r22
    2380:	81 f0       	breq	.+32     	; 0x23a2 <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    2382:	ec e6       	ldi	r30, 0x6C	; 108
    2384:	f1 e0       	ldi	r31, 0x01	; 1
    2386:	20 81       	ld	r18, Z
    2388:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <tal_pib+0x1c>
    238c:	30 e1       	ldi	r19, 0x10	; 16
    238e:	93 9f       	mul	r25, r19
    2390:	c0 01       	movw	r24, r0
    2392:	11 24       	eor	r1, r1
    2394:	92 2f       	mov	r25, r18
    2396:	9f 70       	andi	r25, 0x0F	; 15
    2398:	89 2b       	or	r24, r25
    239a:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    239c:	12 30       	cpi	r17, 0x02	; 2
    239e:	e0 f4       	brcc	.+56     	; 0x23d8 <send_frame+0x68>
    23a0:	08 c0       	rjmp	.+16     	; 0x23b2 <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    23a2:	ec e6       	ldi	r30, 0x6C	; 108
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	80 81       	ld	r24, Z
    23a8:	8f 70       	andi	r24, 0x0F	; 15
    23aa:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    23ac:	12 30       	cpi	r17, 0x02	; 2
    23ae:	a0 f4       	brcc	.+40     	; 0x23d8 <send_frame+0x68>
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    23b2:	ec e6       	ldi	r30, 0x6C	; 108
    23b4:	f1 e0       	ldi	r31, 0x01	; 1
    23b6:	80 81       	ld	r24, Z
    23b8:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <tal_pib+0x14>
    23bc:	99 0f       	add	r25, r25
    23be:	9e 70       	andi	r25, 0x0E	; 14
    23c0:	81 7f       	andi	r24, 0xF1	; 241
    23c2:	89 2b       	or	r24, r25
    23c4:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    23c6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    23ca:	1a c0       	rjmp	.+52     	; 0x2400 <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    23cc:	ec e6       	ldi	r30, 0x6C	; 108
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
    23d0:	80 81       	ld	r24, Z
    23d2:	8e 60       	ori	r24, 0x0E	; 14
    23d4:	80 83       	st	Z, r24
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    23d8:	e9 e7       	ldi	r30, 0x79	; 121
    23da:	f6 e0       	ldi	r31, 0x06	; 6
    23dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    23de:	20 e1       	ldi	r18, 0x10	; 16
    23e0:	82 9f       	mul	r24, r18
    23e2:	c0 01       	movw	r24, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	95 89       	ldd	r25, Z+21	; 0x15
    23e8:	89 2b       	or	r24, r25
    23ea:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    23ee:	ac e6       	ldi	r26, 0x6C	; 108
    23f0:	b1 e0       	ldi	r27, 0x01	; 1
    23f2:	8c 91       	ld	r24, X
    23f4:	94 89       	ldd	r25, Z+20	; 0x14
    23f6:	99 0f       	add	r25, r25
    23f8:	9e 70       	andi	r25, 0x0E	; 14
    23fa:	81 7f       	andi	r24, 0xF1	; 241
    23fc:	89 2b       	or	r24, r25
    23fe:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    2400:	89 e1       	ldi	r24, 0x19	; 25
    2402:	88 d8       	rcall	.-3824   	; 0x1514 <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    2404:	89 31       	cpi	r24, 0x19	; 25
    2406:	e1 f7       	brne	.-8      	; 0x2400 <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    2408:	11 30       	cpi	r17, 0x01	; 1
    240a:	a1 f4       	brne	.+40     	; 0x2434 <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    240c:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <last_frame_length>
    2410:	83 31       	cpi	r24, 0x13	; 19
    2412:	40 f0       	brcs	.+16     	; 0x2424 <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	73 e0       	ldi	r23, 0x03	; 3
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	7c df       	rcall	.-264    	; 0x2316 <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    241e:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <last_frame_length>
    2422:	0d c0       	rjmp	.+26     	; 0x243e <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2424:	6b ea       	ldi	r22, 0xAB	; 171
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	74 df       	rcall	.-280    	; 0x2316 <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    242e:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <last_frame_length>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    2434:	6c e0       	ldi	r22, 0x0C	; 12
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	6c df       	rcall	.-296    	; 0x2316 <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    243e:	8f b7       	in	r24, 0x3f	; 63
    2440:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2442:	f8 94       	cli
	return flags;
    2444:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    2446:	e9 e3       	ldi	r30, 0x39	; 57
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	80 81       	ld	r24, Z
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    2450:	00 00       	nop
    2452:	00 00       	nop
	TRX_SLP_TR_LOW();
    2454:	80 81       	ld	r24, Z
    2456:	8d 7f       	andi	r24, 0xFD	; 253
    2458:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    245a:	60 91 9a 06 	lds	r22, 0x069A	; 0x80069a <tal_frame_to_tx>
    245e:	70 91 9b 06 	lds	r23, 0x069B	; 0x80069b <tal_frame_to_tx+0x1>
    2462:	fb 01       	movw	r30, r22
    2464:	40 81       	ld	r20, Z
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	41 50       	subi	r20, 0x01	; 1
    246a:	51 09       	sbc	r21, r1
    246c:	80 e8       	ldi	r24, 0x80	; 128
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <memcpy>

	tal_state = TAL_TX_AUTO;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    247a:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	08 95       	ret

00002486 <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    2486:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    2488:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <tal_state>
    248c:	91 11       	cpse	r25, r1
    248e:	16 c0       	rjmp	.+44     	; 0x24bc <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    2490:	f0 93 78 06 	sts	0x0678, r31	; 0x800678 <mac_frame_ptr+0x1>
    2494:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    2498:	07 80       	ldd	r0, Z+7	; 0x07
    249a:	f0 85       	ldd	r31, Z+8	; 0x08
    249c:	e0 2d       	mov	r30, r0
    249e:	f0 93 9b 06 	sts	0x069B, r31	; 0x80069b <tal_frame_to_tx+0x1>
    24a2:	e0 93 9a 06 	sts	0x069A, r30	; 0x80069a <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    24a6:	80 81       	ld	r24, Z
    24a8:	81 50       	subi	r24, 0x01	; 1
    24aa:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    24ae:	ef 2b       	or	r30, r31
    24b0:	39 f0       	breq	.+14     	; 0x24c0 <tal_tx_frame+0x3a>
    24b2:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    24b4:	64 2f       	mov	r22, r20
    24b6:	5c df       	rcall	.-328    	; 0x2370 <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    24bc:	86 e8       	ldi	r24, 0x86	; 134
    24be:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    24c0:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    24c2:	08 95       	ret

000024c4 <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    24c4:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <tal_state>
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	c1 f4       	brne	.+48     	; 0x24fc <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    24cc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    24d0:	82 95       	swap	r24
    24d2:	86 95       	lsr	r24
    24d4:	87 70       	andi	r24, 0x07	; 7
    24d6:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    24e0:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <tal_rx_buffer>
    24e4:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <tal_rx_buffer+0x1>
    24e8:	89 2b       	or	r24, r25
    24ea:	31 f4       	brne	.+12     	; 0x24f8 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    24ec:	89 e0       	ldi	r24, 0x09	; 9
    24ee:	12 d8       	rcall	.-4060   	; 0x1514 <set_trx_state>
		tal_rx_on_required = true;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <tal_rx_on_required>
    24f6:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    24f8:	86 e1       	ldi	r24, 0x16	; 22
    24fa:	0c c8       	rjmp	.-4072   	; 0x1514 <set_trx_state>
    24fc:	08 95       	ret

000024fe <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    24fe:	88 23       	and	r24, r24
    2500:	29 f1       	breq	.+74     	; 0x254c <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    2502:	ed e4       	ldi	r30, 0x4D	; 77
    2504:	f1 e0       	ldi	r31, 0x01	; 1
    2506:	80 81       	ld	r24, Z
    2508:	8c 7f       	andi	r24, 0xFC	; 252
    250a:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    250c:	80 81       	ld	r24, Z
    250e:	88 60       	ori	r24, 0x08	; 8
    2510:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    2512:	aa e4       	ldi	r26, 0x4A	; 74
    2514:	b1 e0       	ldi	r27, 0x01	; 1
    2516:	8c 91       	ld	r24, X
    2518:	80 7f       	andi	r24, 0xF0	; 240
    251a:	83 60       	ori	r24, 0x03	; 3
    251c:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    251e:	80 81       	ld	r24, Z
    2520:	84 60       	ori	r24, 0x04	; 4
    2522:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    2524:	80 81       	ld	r24, Z
    2526:	83 70       	andi	r24, 0x03	; 3
    2528:	09 f0       	breq	.+2      	; 0x252c <tal_ant_div_config+0x2e>
    252a:	54 c0       	rjmp	.+168    	; 0x25d4 <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    252c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    2530:	83 ff       	sbrs	r24, 3
    2532:	52 c0       	rjmp	.+164    	; 0x25d8 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    2534:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    2538:	82 ff       	sbrs	r24, 2
    253a:	50 c0       	rjmp	.+160    	; 0x25dc <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    253c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    2540:	8f 70       	andi	r24, 0x0F	; 15
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	09 f0       	breq	.+2      	; 0x2548 <tal_ant_div_config+0x4a>
    2546:	4c c0       	rjmp	.+152    	; 0x25e0 <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    254c:	ed e4       	ldi	r30, 0x4D	; 77
    254e:	f1 e0       	ldi	r31, 0x01	; 1
    2550:	80 81       	ld	r24, Z
    2552:	87 7f       	andi	r24, 0xF7	; 247
    2554:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    2556:	aa e4       	ldi	r26, 0x4A	; 74
    2558:	b1 e0       	ldi	r27, 0x01	; 1
    255a:	8c 91       	ld	r24, X
    255c:	80 7f       	andi	r24, 0xF0	; 240
    255e:	87 60       	ori	r24, 0x07	; 7
    2560:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    2562:	80 81       	ld	r24, Z
    2564:	84 60       	ori	r24, 0x04	; 4
    2566:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    2568:	61 30       	cpi	r22, 0x01	; 1
    256a:	31 f4       	brne	.+12     	; 0x2578 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    256c:	80 81       	ld	r24, Z
    256e:	8c 7f       	andi	r24, 0xFC	; 252
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2574:	85 e8       	ldi	r24, 0x85	; 133
    2576:	17 c0       	rjmp	.+46     	; 0x25a6 <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    2578:	62 30       	cpi	r22, 0x02	; 2
    257a:	41 f4       	brne	.+16     	; 0x258c <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    257c:	ed e4       	ldi	r30, 0x4D	; 77
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	80 81       	ld	r24, Z
    2582:	8c 7f       	andi	r24, 0xFC	; 252
    2584:	82 60       	ori	r24, 0x02	; 2
    2586:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2588:	85 e8       	ldi	r24, 0x85	; 133
    258a:	0d c0       	rjmp	.+26     	; 0x25a6 <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    258c:	66 23       	and	r22, r22
    258e:	11 f0       	breq	.+4      	; 0x2594 <tal_ant_div_config+0x96>
    2590:	63 30       	cpi	r22, 0x03	; 3
    2592:	41 f4       	brne	.+16     	; 0x25a4 <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    2594:	ed e4       	ldi	r30, 0x4D	; 77
    2596:	f1 e0       	ldi	r31, 0x01	; 1
    2598:	80 81       	ld	r24, Z
    259a:	8c 7f       	andi	r24, 0xFC	; 252
    259c:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    259e:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    25a4:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    25a6:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    25aa:	23 70       	andi	r18, 0x03	; 3
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	26 17       	cp	r18, r22
    25b2:	37 07       	cpc	r19, r23
    25b4:	b9 f4       	brne	.+46     	; 0x25e4 <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    25b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    25ba:	93 fd       	sbrc	r25, 3
    25bc:	15 c0       	rjmp	.+42     	; 0x25e8 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    25be:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    25c2:	92 fd       	sbrc	r25, 2
    25c4:	13 c0       	rjmp	.+38     	; 0x25ec <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    25c6:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    25ca:	9f 70       	andi	r25, 0x0F	; 15
    25cc:	93 30       	cpi	r25, 0x03	; 3
    25ce:	79 f4       	brne	.+30     	; 0x25ee <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    25d4:	85 e8       	ldi	r24, 0x85	; 133
    25d6:	08 95       	ret
    25d8:	85 e8       	ldi	r24, 0x85	; 133
    25da:	08 95       	ret
    25dc:	85 e8       	ldi	r24, 0x85	; 133
    25de:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    25e0:	85 e8       	ldi	r24, 0x85	; 133
    25e2:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    25e4:	85 e8       	ldi	r24, 0x85	; 133
    25e6:	08 95       	ret
    25e8:	85 e8       	ldi	r24, 0x85	; 133
    25ea:	08 95       	ret
    25ec:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    25ee:	08 95       	ret

000025f0 <__portable_avr_delay_cycles>:
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
	/* Switch receiver off again */
	set_trx_state(CMD_TRX_OFF);

	return ed_value;
}
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <__portable_avr_delay_cycles+0xa>
    25f2:	61 50       	subi	r22, 0x01	; 1
    25f4:	71 09       	sbc	r23, r1
    25f6:	81 09       	sbc	r24, r1
    25f8:	91 09       	sbc	r25, r1
    25fa:	61 15       	cp	r22, r1
    25fc:	71 05       	cpc	r23, r1
    25fe:	81 05       	cpc	r24, r1
    2600:	91 05       	cpc	r25, r1
    2602:	b9 f7       	brne	.-18     	; 0x25f2 <__portable_avr_delay_cycles+0x2>
    2604:	08 95       	ret

00002606 <tfa_pib_set>:
    2606:	81 11       	cpse	r24, r1
    2608:	25 c0       	rjmp	.+74     	; 0x2654 <tfa_pib_set+0x4e>
    260a:	fb 01       	movw	r30, r22
    260c:	80 81       	ld	r24, Z
    260e:	80 3d       	cpi	r24, 0xD0	; 208
    2610:	2c f0       	brlt	.+10     	; 0x261c <tfa_pib_set+0x16>
    2612:	8f ec       	ldi	r24, 0xCF	; 207
    2614:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tfa_pib_rx_sens>
    2618:	6f e0       	ldi	r22, 0x0F	; 15
    261a:	13 c0       	rjmp	.+38     	; 0x2642 <tfa_pib_set+0x3c>
    261c:	87 3a       	cpi	r24, 0xA7	; 167
    261e:	2c f4       	brge	.+10     	; 0x262a <tfa_pib_set+0x24>
    2620:	86 ea       	ldi	r24, 0xA6	; 166
    2622:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tfa_pib_rx_sens>
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	0c c0       	rjmp	.+24     	; 0x2642 <tfa_pib_set+0x3c>
    262a:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tfa_pib_rx_sens>
    262e:	08 2e       	mov	r0, r24
    2630:	00 0c       	add	r0, r0
    2632:	99 0b       	sbc	r25, r25
    2634:	86 5a       	subi	r24, 0xA6	; 166
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	63 e0       	ldi	r22, 0x03	; 3
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__divmodhi4>
    2640:	6f 5f       	subi	r22, 0xFF	; 255
    2642:	e5 e5       	ldi	r30, 0x55	; 85
    2644:	f1 e0       	ldi	r31, 0x01	; 1
    2646:	80 81       	ld	r24, Z
    2648:	80 7f       	andi	r24, 0xF0	; 240
    264a:	6f 70       	andi	r22, 0x0F	; 15
    264c:	68 2b       	or	r22, r24
    264e:	60 83       	st	Z, r22
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	08 95       	ret
    2654:	84 ef       	ldi	r24, 0xF4	; 244
    2656:	08 95       	ret

00002658 <tfa_init>:
    2658:	86 ea       	ldi	r24, 0xA6	; 166
    265a:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <tfa_pib_rx_sens>
    265e:	64 e8       	ldi	r22, 0x84	; 132
    2660:	75 e0       	ldi	r23, 0x05	; 5
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	d0 df       	rcall	.-96     	; 0x2606 <tfa_pib_set>
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    266e:	60 e1       	ldi	r22, 0x10	; 16
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	08 95       	ret

0000267a <tfa_get_batmon_voltage>:
 * \brief Get the transceiver's supply voltage
 *
 * \return mv Milli Volt; 0 if below threshold, 0xFFFF if above threshold
 */
uint16_t tfa_get_batmon_voltage(void)
{
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
	uint8_t vth_val;
	uint8_t i;
	uint16_t mv = 1; /* 1 used as indicator flag */
	bool range;

	previous_trx_status = tal_trx_status;
    2684:	f0 90 98 06 	lds	r15, 0x0698	; 0x800698 <tal_trx_status>
	if (tal_trx_status == TRX_SLEEP) {
    2688:	8f e0       	ldi	r24, 0x0F	; 15
    268a:	f8 12       	cpse	r15, r24
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <tfa_get_batmon_voltage+0x1a>
		set_trx_state(CMD_TRX_OFF);
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	0e 94 8a 0a 	call	0x1514	; 0x1514 <set_trx_state>

	/*
	 * Disable all trx interrupts.
	 * This needs to be done AFTER the transceiver has been woken up.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    2694:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Check if supply voltage is within lower range */
	trx_bit_write(SR_BATMON_HR, BATMON_LOW_RANGE);
    2698:	c1 e5       	ldi	r28, 0x51	; 81
    269a:	d1 e0       	ldi	r29, 0x01	; 1
    269c:	88 81       	ld	r24, Y
    269e:	8f 7e       	andi	r24, 0xEF	; 239
    26a0:	88 83       	st	Y, r24
	trx_bit_write(SR_BATMON_VTH, 0x0F);
    26a2:	88 81       	ld	r24, Y
    26a4:	8f 60       	ori	r24, 0x0F	; 15
    26a6:	88 83       	st	Y, r24
	pal_timer_delay(5); /* Wait until Batmon has been settled. */
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9f df       	rcall	.-194    	; 0x25f0 <__portable_avr_delay_cycles>
	if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
    26b2:	88 81       	ld	r24, Y
    26b4:	85 fd       	sbrc	r24, 5
    26b6:	17 c0       	rjmp	.+46     	; 0x26e6 <tfa_get_batmon_voltage+0x6c>
		/* Lower range */
		/* Check if supply voltage is below lower limit */
		trx_bit_write(SR_BATMON_VTH, 0);
    26b8:	88 81       	ld	r24, Y
    26ba:	80 7f       	andi	r24, 0xF0	; 240
    26bc:	88 83       	st	Y, r24
		pal_timer_delay(2); /* Wait until Batmon has been settled. */
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	94 df       	rcall	.-216    	; 0x25f0 <__portable_avr_delay_cycles>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
    26c8:	88 81       	ld	r24, Y
			/* below lower limit */
			mv = SUPPLY_VOLTAGE_BELOW_LOWER_LIMIT;
    26ca:	21 e0       	ldi	r18, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	85 fb       	bst	r24, 5
    26d0:	00 27       	eor	r16, r16
    26d2:	00 f9       	bld	r16, 0
    26d4:	10 e0       	ldi	r17, 0x00	; 0
    26d6:	85 ff       	sbrs	r24, 5
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	c2 2f       	mov	r28, r18
    26dc:	d9 2f       	mov	r29, r25

		range = HIGH;
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
    26de:	01 2b       	or	r16, r17
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <tfa_get_batmon_voltage+0x6a>
    26e2:	41 c0       	rjmp	.+130    	; 0x2766 <tfa_get_batmon_voltage+0xec>
    26e4:	12 c0       	rjmp	.+36     	; 0x270a <tfa_get_batmon_voltage+0x90>
		}

		range = LOW;
	} else {
		/* Higher range */
		trx_bit_write(SR_BATMON_HR, BATMON_HIGH_RANGE);
    26e6:	c1 e5       	ldi	r28, 0x51	; 81
    26e8:	d1 e0       	ldi	r29, 0x01	; 1
    26ea:	88 81       	ld	r24, Y
    26ec:	80 61       	ori	r24, 0x10	; 16
    26ee:	88 83       	st	Y, r24
		/* Check if supply voltage is above upper limit */
		trx_bit_write(SR_BATMON_VTH, 0x0F);
    26f0:	88 81       	ld	r24, Y
    26f2:	8f 60       	ori	r24, 0x0F	; 15
    26f4:	88 83       	st	Y, r24
		pal_timer_delay(5); /* Wait until Batmon has been settled. */
    26f6:	67 e0       	ldi	r22, 0x07	; 7
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	78 df       	rcall	.-272    	; 0x25f0 <__portable_avr_delay_cycles>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_ABOVE_THRES) {
    2700:	88 81       	ld	r24, Y
    2702:	85 fd       	sbrc	r24, 5
    2704:	2e c0       	rjmp	.+92     	; 0x2762 <tfa_get_batmon_voltage+0xe8>
			/* above upper limit */
			mv = SUPPLY_VOLTAGE_ABOVE_UPPER_LIMIT;
		}

		range = HIGH;
    2706:	d1 e0       	ldi	r29, 0x01	; 1
    2708:	01 c0       	rjmp	.+2      	; 0x270c <tfa_get_batmon_voltage+0x92>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
			/* below lower limit */
			mv = SUPPLY_VOLTAGE_BELOW_LOWER_LIMIT;
		}

		range = LOW;
    270a:	d0 e0       	ldi	r29, 0x00	; 0
    270c:	c0 e0       	ldi	r28, 0x00	; 0

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
		for (i = 0; i < 16; i++) {
			trx_bit_write(SR_BATMON_VTH, i);
    270e:	01 e5       	ldi	r16, 0x51	; 81
    2710:	11 e0       	ldi	r17, 0x01	; 1
    2712:	f8 01       	movw	r30, r16
    2714:	80 81       	ld	r24, Z
    2716:	80 7f       	andi	r24, 0xF0	; 240
    2718:	9c 2f       	mov	r25, r28
    271a:	9f 70       	andi	r25, 0x0F	; 15
    271c:	89 2b       	or	r24, r25
    271e:	80 83       	st	Z, r24
			pal_timer_delay(2); /* Wait until Batmon has been
    2720:	63 e0       	ldi	r22, 0x03	; 3
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	63 df       	rcall	.-314    	; 0x25f0 <__portable_avr_delay_cycles>
			                     * settled. */
			if (trx_bit_read(SR_BATMON_OK) ==
    272a:	f8 01       	movw	r30, r16
    272c:	80 81       	ld	r24, Z
    272e:	85 fd       	sbrc	r24, 5
    2730:	04 c0       	rjmp	.+8      	; 0x273a <tfa_get_batmon_voltage+0xc0>
					BATMON_BELOW_THRES) {
				if (i > 0) {
    2732:	cc 23       	and	r28, r28
    2734:	31 f0       	breq	.+12     	; 0x2742 <tfa_get_batmon_voltage+0xc8>
					vth_val = i - 1;
    2736:	c1 50       	subi	r28, 0x01	; 1
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <tfa_get_batmon_voltage+0xc8>
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
		for (i = 0; i < 16; i++) {
    273a:	cf 5f       	subi	r28, 0xFF	; 255
    273c:	c0 31       	cpi	r28, 0x10	; 16
    273e:	49 f7       	brne	.-46     	; 0x2712 <tfa_get_batmon_voltage+0x98>
		range = HIGH;
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
    2740:	cf e0       	ldi	r28, 0x0F	; 15

				break;
			}
		}

		if (range == HIGH) {
    2742:	dd 23       	and	r29, r29
    2744:	39 f0       	breq	.+14     	; 0x2754 <tfa_get_batmon_voltage+0xda>
			mv = 2550 + (75 * vth_val);
    2746:	fb e4       	ldi	r31, 0x4B	; 75
    2748:	cf 9f       	mul	r28, r31
    274a:	e0 01       	movw	r28, r0
    274c:	11 24       	eor	r1, r1
    274e:	ca 50       	subi	r28, 0x0A	; 10
    2750:	d6 4f       	sbci	r29, 0xF6	; 246
    2752:	09 c0       	rjmp	.+18     	; 0x2766 <tfa_get_batmon_voltage+0xec>
		} else {
			mv = 1700 + (50 * vth_val);
    2754:	82 e3       	ldi	r24, 0x32	; 50
    2756:	c8 9f       	mul	r28, r24
    2758:	e0 01       	movw	r28, r0
    275a:	11 24       	eor	r1, r1
    275c:	cc 55       	subi	r28, 0x5C	; 92
    275e:	d9 4f       	sbci	r29, 0xF9	; 249
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <tfa_get_batmon_voltage+0xec>
		/* Check if supply voltage is above upper limit */
		trx_bit_write(SR_BATMON_VTH, 0x0F);
		pal_timer_delay(5); /* Wait until Batmon has been settled. */
		if (trx_bit_read(SR_BATMON_OK) == BATMON_ABOVE_THRES) {
			/* above upper limit */
			mv = SUPPLY_VOLTAGE_ABOVE_UPPER_LIMIT;
    2762:	cf ef       	ldi	r28, 0xFF	; 255
    2764:	df ef       	ldi	r29, 0xFF	; 255
		} else {
			mv = 1700 + (50 * vth_val);
		}
	}

	trx_reg_read(RG_IRQ_STATUS);
    2766:	ef e4       	ldi	r30, 0x4F	; 79
    2768:	f1 e0       	ldi	r31, 0x01	; 1
    276a:	80 81       	ld	r24, Z

	/* Clear all pending interrupts. */
	pal_trx_irq_flag_clr_rx_end();
    276c:	88 e0       	ldi	r24, 0x08	; 8
    276e:	80 83       	st	Z, r24
	pal_trx_irq_flag_clr_tx_end();
    2770:	80 e4       	ldi	r24, 0x40	; 64
    2772:	80 83       	st	Z, r24
	pal_trx_irq_flag_clr_tstamp();
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	80 83       	st	Z, r24

	/*
	 * Enable all trx interrupts.
	 * This needs to be done BEFORE putting the transceiver back to slee.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    2778:	88 e4       	ldi	r24, 0x48	; 72
    277a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	if (previous_trx_status == TRX_SLEEP) {
    277e:	ef e0       	ldi	r30, 0x0F	; 15
    2780:	fe 12       	cpse	r15, r30
    2782:	03 c0       	rjmp	.+6      	; 0x278a <tfa_get_batmon_voltage+0x110>
		set_trx_state(CMD_SLEEP);
    2784:	8f e0       	ldi	r24, 0x0F	; 15
    2786:	0e 94 8a 0a 	call	0x1514	; 0x1514 <set_trx_state>
	}

	return mv;
}
    278a:	ce 01       	movw	r24, r28
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	08 95       	ret

00002798 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    2798:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <tmr_ovf_callback>
    279c:	08 95       	ret

0000279e <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    279e:	0c 94 13 02 	jmp	0x426	; 0x426 <tmr_cca_callback>
    27a2:	08 95       	ret

000027a4 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    27a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    27a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    27ac:	08 95       	ret

000027ae <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    27ae:	ef e6       	ldi	r30, 0x6F	; 111
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8d 7f       	andi	r24, 0xFD	; 253
    27b6:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    27b8:	b1 9a       	sbi	0x16, 1	; 22
    27ba:	08 95       	ret

000027bc <tmr_enable_cc_interrupt>:
    27bc:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    27be:	ef e6       	ldi	r30, 0x6F	; 111
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	82 60       	ori	r24, 0x02	; 2
    27c6:	80 83       	st	Z, r24
    27c8:	08 95       	ret

000027ca <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    27ca:	ef e6       	ldi	r30, 0x6F	; 111
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	81 60       	ori	r24, 0x01	; 1
    27d2:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    27d4:	b0 9a       	sbi	0x16, 0	; 22
    27d6:	08 95       	ret

000027d8 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    27d8:	80 e8       	ldi	r24, 0x80	; 128
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	82 c3       	rjmp	.+1796   	; 0x2ee2 <tc_disable>
    27de:	08 95       	ret

000027e0 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    27e0:	e9 e8       	ldi	r30, 0x89	; 137
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	20 81       	ld	r18, Z
    27e6:	92 2b       	or	r25, r18
    27e8:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    27ea:	e8 e8       	ldi	r30, 0x88	; 136
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	90 81       	ld	r25, Z
    27f0:	89 2b       	or	r24, r25
    27f2:	80 83       	st	Z, r24
    27f4:	08 95       	ret

000027f6 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	1f 92       	push	r1
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2800:	8f b7       	in	r24, 0x3f	; 63
    2802:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2804:	f8 94       	cli
	return flags;
    2806:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2808:	0f 90       	pop	r0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	08 95       	ret

00002810 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2810:	8f bf       	out	0x3f, r24	; 63
    2812:	08 95       	ret

00002814 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2818:	80 e8       	ldi	r24, 0x80	; 128
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	eb d2       	rcall	.+1494   	; 0x2df4 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    281e:	6c ec       	ldi	r22, 0xCC	; 204
    2820:	73 e1       	ldi	r23, 0x13	; 19
    2822:	80 e8       	ldi	r24, 0x80	; 128
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	d4 d3       	rcall	.+1960   	; 0x2fd0 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2828:	cf e6       	ldi	r28, 0x6F	; 111
    282a:	d0 e0       	ldi	r29, 0x00	; 0
    282c:	88 81       	ld	r24, Y
    282e:	81 60       	ori	r24, 0x01	; 1
    2830:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2832:	6f ec       	ldi	r22, 0xCF	; 207
    2834:	73 e1       	ldi	r23, 0x13	; 19
    2836:	80 e8       	ldi	r24, 0x80	; 128
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	ea d3       	rcall	.+2004   	; 0x3010 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    283c:	88 81       	ld	r24, Y
    283e:	8d 7f       	andi	r24, 0xFD	; 253
    2840:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2842:	e1 e8       	ldi	r30, 0x81	; 129
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	81 60       	ori	r24, 0x01	; 1
    284a:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    284c:	88 e0       	ldi	r24, 0x08	; 8
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	08 95       	ret

00002854 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2854:	1f 92       	push	r1
    2856:	0f 92       	push	r0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	0f 92       	push	r0
    285c:	11 24       	eor	r1, r1
    285e:	0b b6       	in	r0, 0x3b	; 59
    2860:	0f 92       	push	r0
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    287a:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <tc_tccr1_ovf_callback>
    287e:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <tc_tccr1_ovf_callback+0x1>
    2882:	30 97       	sbiw	r30, 0x00	; 0
    2884:	09 f0       	breq	.+2      	; 0x2888 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2886:	19 95       	eicall
	}
}
    2888:	ff 91       	pop	r31
    288a:	ef 91       	pop	r30
    288c:	bf 91       	pop	r27
    288e:	af 91       	pop	r26
    2890:	9f 91       	pop	r25
    2892:	8f 91       	pop	r24
    2894:	7f 91       	pop	r23
    2896:	6f 91       	pop	r22
    2898:	5f 91       	pop	r21
    289a:	4f 91       	pop	r20
    289c:	3f 91       	pop	r19
    289e:	2f 91       	pop	r18
    28a0:	0f 90       	pop	r0
    28a2:	0b be       	out	0x3b, r0	; 59
    28a4:	0f 90       	pop	r0
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	0f 90       	pop	r0
    28aa:	1f 90       	pop	r1
    28ac:	18 95       	reti

000028ae <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    28ae:	1f 92       	push	r1
    28b0:	0f 92       	push	r0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	0f 92       	push	r0
    28b6:	11 24       	eor	r1, r1
    28b8:	0b b6       	in	r0, 0x3b	; 59
    28ba:	0f 92       	push	r0
    28bc:	2f 93       	push	r18
    28be:	3f 93       	push	r19
    28c0:	4f 93       	push	r20
    28c2:	5f 93       	push	r21
    28c4:	6f 93       	push	r22
    28c6:	7f 93       	push	r23
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	af 93       	push	r26
    28ce:	bf 93       	push	r27
    28d0:	ef 93       	push	r30
    28d2:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    28d4:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <tc_tccr1_compa_callback>
    28d8:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <tc_tccr1_compa_callback+0x1>
    28dc:	30 97       	sbiw	r30, 0x00	; 0
    28de:	09 f0       	breq	.+2      	; 0x28e2 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    28e0:	19 95       	eicall
	}
}
    28e2:	ff 91       	pop	r31
    28e4:	ef 91       	pop	r30
    28e6:	bf 91       	pop	r27
    28e8:	af 91       	pop	r26
    28ea:	9f 91       	pop	r25
    28ec:	8f 91       	pop	r24
    28ee:	7f 91       	pop	r23
    28f0:	6f 91       	pop	r22
    28f2:	5f 91       	pop	r21
    28f4:	4f 91       	pop	r20
    28f6:	3f 91       	pop	r19
    28f8:	2f 91       	pop	r18
    28fa:	0f 90       	pop	r0
    28fc:	0b be       	out	0x3b, r0	; 59
    28fe:	0f 90       	pop	r0
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	0f 90       	pop	r0
    2904:	1f 90       	pop	r1
    2906:	18 95       	reti

00002908 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2908:	1f 92       	push	r1
    290a:	0f 92       	push	r0
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	0f 92       	push	r0
    2910:	11 24       	eor	r1, r1
    2912:	0b b6       	in	r0, 0x3b	; 59
    2914:	0f 92       	push	r0
    2916:	2f 93       	push	r18
    2918:	3f 93       	push	r19
    291a:	4f 93       	push	r20
    291c:	5f 93       	push	r21
    291e:	6f 93       	push	r22
    2920:	7f 93       	push	r23
    2922:	8f 93       	push	r24
    2924:	9f 93       	push	r25
    2926:	af 93       	push	r26
    2928:	bf 93       	push	r27
    292a:	ef 93       	push	r30
    292c:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    292e:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <tc_tccr1_compb_callback>
    2932:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <tc_tccr1_compb_callback+0x1>
    2936:	30 97       	sbiw	r30, 0x00	; 0
    2938:	09 f0       	breq	.+2      	; 0x293c <__vector_18+0x34>
		tc_tccr1_compb_callback();
    293a:	19 95       	eicall
	}
}
    293c:	ff 91       	pop	r31
    293e:	ef 91       	pop	r30
    2940:	bf 91       	pop	r27
    2942:	af 91       	pop	r26
    2944:	9f 91       	pop	r25
    2946:	8f 91       	pop	r24
    2948:	7f 91       	pop	r23
    294a:	6f 91       	pop	r22
    294c:	5f 91       	pop	r21
    294e:	4f 91       	pop	r20
    2950:	3f 91       	pop	r19
    2952:	2f 91       	pop	r18
    2954:	0f 90       	pop	r0
    2956:	0b be       	out	0x3b, r0	; 59
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	0f 90       	pop	r0
    295e:	1f 90       	pop	r1
    2960:	18 95       	reti

00002962 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2962:	1f 92       	push	r1
    2964:	0f 92       	push	r0
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	0f 92       	push	r0
    296a:	11 24       	eor	r1, r1
    296c:	0b b6       	in	r0, 0x3b	; 59
    296e:	0f 92       	push	r0
    2970:	2f 93       	push	r18
    2972:	3f 93       	push	r19
    2974:	4f 93       	push	r20
    2976:	5f 93       	push	r21
    2978:	6f 93       	push	r22
    297a:	7f 93       	push	r23
    297c:	8f 93       	push	r24
    297e:	9f 93       	push	r25
    2980:	af 93       	push	r26
    2982:	bf 93       	push	r27
    2984:	ef 93       	push	r30
    2986:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2988:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <tc_tccr1_compc_callback>
    298c:	f0 91 9e 05 	lds	r31, 0x059E	; 0x80059e <tc_tccr1_compc_callback+0x1>
    2990:	30 97       	sbiw	r30, 0x00	; 0
    2992:	09 f0       	breq	.+2      	; 0x2996 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    2994:	19 95       	eicall
	}
}
    2996:	ff 91       	pop	r31
    2998:	ef 91       	pop	r30
    299a:	bf 91       	pop	r27
    299c:	af 91       	pop	r26
    299e:	9f 91       	pop	r25
    29a0:	8f 91       	pop	r24
    29a2:	7f 91       	pop	r23
    29a4:	6f 91       	pop	r22
    29a6:	5f 91       	pop	r21
    29a8:	4f 91       	pop	r20
    29aa:	3f 91       	pop	r19
    29ac:	2f 91       	pop	r18
    29ae:	0f 90       	pop	r0
    29b0:	0b be       	out	0x3b, r0	; 59
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	0f 90       	pop	r0
    29b8:	1f 90       	pop	r1
    29ba:	18 95       	reti

000029bc <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    29bc:	1f 92       	push	r1
    29be:	0f 92       	push	r0
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	0f 92       	push	r0
    29c4:	11 24       	eor	r1, r1
    29c6:	0b b6       	in	r0, 0x3b	; 59
    29c8:	0f 92       	push	r0
    29ca:	2f 93       	push	r18
    29cc:	3f 93       	push	r19
    29ce:	4f 93       	push	r20
    29d0:	5f 93       	push	r21
    29d2:	6f 93       	push	r22
    29d4:	7f 93       	push	r23
    29d6:	8f 93       	push	r24
    29d8:	9f 93       	push	r25
    29da:	af 93       	push	r26
    29dc:	bf 93       	push	r27
    29de:	ef 93       	push	r30
    29e0:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    29e2:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <tc_tccr3_ovf_callback>
    29e6:	f0 91 9c 05 	lds	r31, 0x059C	; 0x80059c <tc_tccr3_ovf_callback+0x1>
    29ea:	30 97       	sbiw	r30, 0x00	; 0
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    29ee:	19 95       	eicall
	}
}
    29f0:	ff 91       	pop	r31
    29f2:	ef 91       	pop	r30
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0b be       	out	0x3b, r0	; 59
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti

00002a16 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	0b b6       	in	r0, 0x3b	; 59
    2a22:	0f 92       	push	r0
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	ef 93       	push	r30
    2a3a:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2a3c:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <tc_tccr3_compa_callback>
    2a40:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <tc_tccr3_compa_callback+0x1>
    2a44:	30 97       	sbiw	r30, 0x00	; 0
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2a48:	19 95       	eicall
	}
}
    2a4a:	ff 91       	pop	r31
    2a4c:	ef 91       	pop	r30
    2a4e:	bf 91       	pop	r27
    2a50:	af 91       	pop	r26
    2a52:	9f 91       	pop	r25
    2a54:	8f 91       	pop	r24
    2a56:	7f 91       	pop	r23
    2a58:	6f 91       	pop	r22
    2a5a:	5f 91       	pop	r21
    2a5c:	4f 91       	pop	r20
    2a5e:	3f 91       	pop	r19
    2a60:	2f 91       	pop	r18
    2a62:	0f 90       	pop	r0
    2a64:	0b be       	out	0x3b, r0	; 59
    2a66:	0f 90       	pop	r0
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	0f 90       	pop	r0
    2a6c:	1f 90       	pop	r1
    2a6e:	18 95       	reti

00002a70 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2a70:	1f 92       	push	r1
    2a72:	0f 92       	push	r0
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	0f 92       	push	r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	0b b6       	in	r0, 0x3b	; 59
    2a7c:	0f 92       	push	r0
    2a7e:	2f 93       	push	r18
    2a80:	3f 93       	push	r19
    2a82:	4f 93       	push	r20
    2a84:	5f 93       	push	r21
    2a86:	6f 93       	push	r22
    2a88:	7f 93       	push	r23
    2a8a:	8f 93       	push	r24
    2a8c:	9f 93       	push	r25
    2a8e:	af 93       	push	r26
    2a90:	bf 93       	push	r27
    2a92:	ef 93       	push	r30
    2a94:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2a96:	e0 91 97 05 	lds	r30, 0x0597	; 0x800597 <tc_tccr3_compb_callback>
    2a9a:	f0 91 98 05 	lds	r31, 0x0598	; 0x800598 <tc_tccr3_compb_callback+0x1>
    2a9e:	30 97       	sbiw	r30, 0x00	; 0
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    2aa2:	19 95       	eicall
	}
}
    2aa4:	ff 91       	pop	r31
    2aa6:	ef 91       	pop	r30
    2aa8:	bf 91       	pop	r27
    2aaa:	af 91       	pop	r26
    2aac:	9f 91       	pop	r25
    2aae:	8f 91       	pop	r24
    2ab0:	7f 91       	pop	r23
    2ab2:	6f 91       	pop	r22
    2ab4:	5f 91       	pop	r21
    2ab6:	4f 91       	pop	r20
    2ab8:	3f 91       	pop	r19
    2aba:	2f 91       	pop	r18
    2abc:	0f 90       	pop	r0
    2abe:	0b be       	out	0x3b, r0	; 59
    2ac0:	0f 90       	pop	r0
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	0f 90       	pop	r0
    2ac6:	1f 90       	pop	r1
    2ac8:	18 95       	reti

00002aca <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2aca:	1f 92       	push	r1
    2acc:	0f 92       	push	r0
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	0f 92       	push	r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	0b b6       	in	r0, 0x3b	; 59
    2ad6:	0f 92       	push	r0
    2ad8:	2f 93       	push	r18
    2ada:	3f 93       	push	r19
    2adc:	4f 93       	push	r20
    2ade:	5f 93       	push	r21
    2ae0:	6f 93       	push	r22
    2ae2:	7f 93       	push	r23
    2ae4:	8f 93       	push	r24
    2ae6:	9f 93       	push	r25
    2ae8:	af 93       	push	r26
    2aea:	bf 93       	push	r27
    2aec:	ef 93       	push	r30
    2aee:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2af0:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <tc_tccr3_compc_callback>
    2af4:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <tc_tccr3_compc_callback+0x1>
    2af8:	30 97       	sbiw	r30, 0x00	; 0
    2afa:	09 f0       	breq	.+2      	; 0x2afe <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2afc:	19 95       	eicall
	}
}
    2afe:	ff 91       	pop	r31
    2b00:	ef 91       	pop	r30
    2b02:	bf 91       	pop	r27
    2b04:	af 91       	pop	r26
    2b06:	9f 91       	pop	r25
    2b08:	8f 91       	pop	r24
    2b0a:	7f 91       	pop	r23
    2b0c:	6f 91       	pop	r22
    2b0e:	5f 91       	pop	r21
    2b10:	4f 91       	pop	r20
    2b12:	3f 91       	pop	r19
    2b14:	2f 91       	pop	r18
    2b16:	0f 90       	pop	r0
    2b18:	0b be       	out	0x3b, r0	; 59
    2b1a:	0f 90       	pop	r0
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	0f 90       	pop	r0
    2b20:	1f 90       	pop	r1
    2b22:	18 95       	reti

00002b24 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2b24:	1f 92       	push	r1
    2b26:	0f 92       	push	r0
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	0f 92       	push	r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	0b b6       	in	r0, 0x3b	; 59
    2b30:	0f 92       	push	r0
    2b32:	2f 93       	push	r18
    2b34:	3f 93       	push	r19
    2b36:	4f 93       	push	r20
    2b38:	5f 93       	push	r21
    2b3a:	6f 93       	push	r22
    2b3c:	7f 93       	push	r23
    2b3e:	8f 93       	push	r24
    2b40:	9f 93       	push	r25
    2b42:	af 93       	push	r26
    2b44:	bf 93       	push	r27
    2b46:	ef 93       	push	r30
    2b48:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2b4a:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <tc_tccr4_ovf_callback>
    2b4e:	f0 91 94 05 	lds	r31, 0x0594	; 0x800594 <tc_tccr4_ovf_callback+0x1>
    2b52:	30 97       	sbiw	r30, 0x00	; 0
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2b56:	19 95       	eicall
	}
}
    2b58:	ff 91       	pop	r31
    2b5a:	ef 91       	pop	r30
    2b5c:	bf 91       	pop	r27
    2b5e:	af 91       	pop	r26
    2b60:	9f 91       	pop	r25
    2b62:	8f 91       	pop	r24
    2b64:	7f 91       	pop	r23
    2b66:	6f 91       	pop	r22
    2b68:	5f 91       	pop	r21
    2b6a:	4f 91       	pop	r20
    2b6c:	3f 91       	pop	r19
    2b6e:	2f 91       	pop	r18
    2b70:	0f 90       	pop	r0
    2b72:	0b be       	out	0x3b, r0	; 59
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	0f 90       	pop	r0
    2b7a:	1f 90       	pop	r1
    2b7c:	18 95       	reti

00002b7e <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
    2b88:	0b b6       	in	r0, 0x3b	; 59
    2b8a:	0f 92       	push	r0
    2b8c:	2f 93       	push	r18
    2b8e:	3f 93       	push	r19
    2b90:	4f 93       	push	r20
    2b92:	5f 93       	push	r21
    2b94:	6f 93       	push	r22
    2b96:	7f 93       	push	r23
    2b98:	8f 93       	push	r24
    2b9a:	9f 93       	push	r25
    2b9c:	af 93       	push	r26
    2b9e:	bf 93       	push	r27
    2ba0:	ef 93       	push	r30
    2ba2:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    2ba4:	e0 91 91 05 	lds	r30, 0x0591	; 0x800591 <tc_tccr4_compa_callback>
    2ba8:	f0 91 92 05 	lds	r31, 0x0592	; 0x800592 <tc_tccr4_compa_callback+0x1>
    2bac:	30 97       	sbiw	r30, 0x00	; 0
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2bb0:	19 95       	eicall
	}
}
    2bb2:	ff 91       	pop	r31
    2bb4:	ef 91       	pop	r30
    2bb6:	bf 91       	pop	r27
    2bb8:	af 91       	pop	r26
    2bba:	9f 91       	pop	r25
    2bbc:	8f 91       	pop	r24
    2bbe:	7f 91       	pop	r23
    2bc0:	6f 91       	pop	r22
    2bc2:	5f 91       	pop	r21
    2bc4:	4f 91       	pop	r20
    2bc6:	3f 91       	pop	r19
    2bc8:	2f 91       	pop	r18
    2bca:	0f 90       	pop	r0
    2bcc:	0b be       	out	0x3b, r0	; 59
    2bce:	0f 90       	pop	r0
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	0f 90       	pop	r0
    2bd4:	1f 90       	pop	r1
    2bd6:	18 95       	reti

00002bd8 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2bd8:	1f 92       	push	r1
    2bda:	0f 92       	push	r0
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	0f 92       	push	r0
    2be0:	11 24       	eor	r1, r1
    2be2:	0b b6       	in	r0, 0x3b	; 59
    2be4:	0f 92       	push	r0
    2be6:	2f 93       	push	r18
    2be8:	3f 93       	push	r19
    2bea:	4f 93       	push	r20
    2bec:	5f 93       	push	r21
    2bee:	6f 93       	push	r22
    2bf0:	7f 93       	push	r23
    2bf2:	8f 93       	push	r24
    2bf4:	9f 93       	push	r25
    2bf6:	af 93       	push	r26
    2bf8:	bf 93       	push	r27
    2bfa:	ef 93       	push	r30
    2bfc:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    2bfe:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <tc_tccr4_compb_callback>
    2c02:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <tc_tccr4_compb_callback+0x1>
    2c06:	30 97       	sbiw	r30, 0x00	; 0
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2c0a:	19 95       	eicall
	}
}
    2c0c:	ff 91       	pop	r31
    2c0e:	ef 91       	pop	r30
    2c10:	bf 91       	pop	r27
    2c12:	af 91       	pop	r26
    2c14:	9f 91       	pop	r25
    2c16:	8f 91       	pop	r24
    2c18:	7f 91       	pop	r23
    2c1a:	6f 91       	pop	r22
    2c1c:	5f 91       	pop	r21
    2c1e:	4f 91       	pop	r20
    2c20:	3f 91       	pop	r19
    2c22:	2f 91       	pop	r18
    2c24:	0f 90       	pop	r0
    2c26:	0b be       	out	0x3b, r0	; 59
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	0b b6       	in	r0, 0x3b	; 59
    2c3e:	0f 92       	push	r0
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2c58:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <tc_tccr4_compc_callback>
    2c5c:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <tc_tccr4_compc_callback+0x1>
    2c60:	30 97       	sbiw	r30, 0x00	; 0
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2c64:	19 95       	eicall
	}
}
    2c66:	ff 91       	pop	r31
    2c68:	ef 91       	pop	r30
    2c6a:	bf 91       	pop	r27
    2c6c:	af 91       	pop	r26
    2c6e:	9f 91       	pop	r25
    2c70:	8f 91       	pop	r24
    2c72:	7f 91       	pop	r23
    2c74:	6f 91       	pop	r22
    2c76:	5f 91       	pop	r21
    2c78:	4f 91       	pop	r20
    2c7a:	3f 91       	pop	r19
    2c7c:	2f 91       	pop	r18
    2c7e:	0f 90       	pop	r0
    2c80:	0b be       	out	0x3b, r0	; 59
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0
    2c88:	1f 90       	pop	r1
    2c8a:	18 95       	reti

00002c8c <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	0b b6       	in	r0, 0x3b	; 59
    2c98:	0f 92       	push	r0
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    2cb2:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <tc_tccr5_ovf_callback>
    2cb6:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <tc_tccr5_ovf_callback+0x1>
    2cba:	30 97       	sbiw	r30, 0x00	; 0
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    2cbe:	19 95       	eicall
	}
}
    2cc0:	ff 91       	pop	r31
    2cc2:	ef 91       	pop	r30
    2cc4:	bf 91       	pop	r27
    2cc6:	af 91       	pop	r26
    2cc8:	9f 91       	pop	r25
    2cca:	8f 91       	pop	r24
    2ccc:	7f 91       	pop	r23
    2cce:	6f 91       	pop	r22
    2cd0:	5f 91       	pop	r21
    2cd2:	4f 91       	pop	r20
    2cd4:	3f 91       	pop	r19
    2cd6:	2f 91       	pop	r18
    2cd8:	0f 90       	pop	r0
    2cda:	0b be       	out	0x3b, r0	; 59
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	0f 90       	pop	r0
    2ce2:	1f 90       	pop	r1
    2ce4:	18 95       	reti

00002ce6 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2ce6:	1f 92       	push	r1
    2ce8:	0f 92       	push	r0
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	0f 92       	push	r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	0b b6       	in	r0, 0x3b	; 59
    2cf2:	0f 92       	push	r0
    2cf4:	2f 93       	push	r18
    2cf6:	3f 93       	push	r19
    2cf8:	4f 93       	push	r20
    2cfa:	5f 93       	push	r21
    2cfc:	6f 93       	push	r22
    2cfe:	7f 93       	push	r23
    2d00:	8f 93       	push	r24
    2d02:	9f 93       	push	r25
    2d04:	af 93       	push	r26
    2d06:	bf 93       	push	r27
    2d08:	ef 93       	push	r30
    2d0a:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2d0c:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <tc_tccr5_compa_callback>
    2d10:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <tc_tccr5_compa_callback+0x1>
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2d18:	19 95       	eicall
	}
}
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	0f 90       	pop	r0
    2d34:	0b be       	out	0x3b, r0	; 59
    2d36:	0f 90       	pop	r0
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	0f 90       	pop	r0
    2d3c:	1f 90       	pop	r1
    2d3e:	18 95       	reti

00002d40 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2d40:	1f 92       	push	r1
    2d42:	0f 92       	push	r0
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	0f 92       	push	r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	0b b6       	in	r0, 0x3b	; 59
    2d4c:	0f 92       	push	r0
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	4f 93       	push	r20
    2d54:	5f 93       	push	r21
    2d56:	6f 93       	push	r22
    2d58:	7f 93       	push	r23
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	af 93       	push	r26
    2d60:	bf 93       	push	r27
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2d66:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <tc_tccr5_compb_callback>
    2d6a:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <tc_tccr5_compb_callback+0x1>
    2d6e:	30 97       	sbiw	r30, 0x00	; 0
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2d72:	19 95       	eicall
	}
}
    2d74:	ff 91       	pop	r31
    2d76:	ef 91       	pop	r30
    2d78:	bf 91       	pop	r27
    2d7a:	af 91       	pop	r26
    2d7c:	9f 91       	pop	r25
    2d7e:	8f 91       	pop	r24
    2d80:	7f 91       	pop	r23
    2d82:	6f 91       	pop	r22
    2d84:	5f 91       	pop	r21
    2d86:	4f 91       	pop	r20
    2d88:	3f 91       	pop	r19
    2d8a:	2f 91       	pop	r18
    2d8c:	0f 90       	pop	r0
    2d8e:	0b be       	out	0x3b, r0	; 59
    2d90:	0f 90       	pop	r0
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    2d9a:	1f 92       	push	r1
    2d9c:	0f 92       	push	r0
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	0f 92       	push	r0
    2da2:	11 24       	eor	r1, r1
    2da4:	0b b6       	in	r0, 0x3b	; 59
    2da6:	0f 92       	push	r0
    2da8:	2f 93       	push	r18
    2daa:	3f 93       	push	r19
    2dac:	4f 93       	push	r20
    2dae:	5f 93       	push	r21
    2db0:	6f 93       	push	r22
    2db2:	7f 93       	push	r23
    2db4:	8f 93       	push	r24
    2db6:	9f 93       	push	r25
    2db8:	af 93       	push	r26
    2dba:	bf 93       	push	r27
    2dbc:	ef 93       	push	r30
    2dbe:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    2dc0:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <tc_tccr5_compc_callback>
    2dc4:	f0 91 86 05 	lds	r31, 0x0586	; 0x800586 <tc_tccr5_compc_callback+0x1>
    2dc8:	30 97       	sbiw	r30, 0x00	; 0
    2dca:	09 f0       	breq	.+2      	; 0x2dce <__vector_49+0x34>
		tc_tccr5_compc_callback();
    2dcc:	19 95       	eicall
	}
}
    2dce:	ff 91       	pop	r31
    2dd0:	ef 91       	pop	r30
    2dd2:	bf 91       	pop	r27
    2dd4:	af 91       	pop	r26
    2dd6:	9f 91       	pop	r25
    2dd8:	8f 91       	pop	r24
    2dda:	7f 91       	pop	r23
    2ddc:	6f 91       	pop	r22
    2dde:	5f 91       	pop	r21
    2de0:	4f 91       	pop	r20
    2de2:	3f 91       	pop	r19
    2de4:	2f 91       	pop	r18
    2de6:	0f 90       	pop	r0
    2de8:	0b be       	out	0x3b, r0	; 59
    2dea:	0f 90       	pop	r0
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	0f 90       	pop	r0
    2df0:	1f 90       	pop	r1
    2df2:	18 95       	reti

00002df4 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	1f 92       	push	r1
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2e00:	2f b7       	in	r18, 0x3f	; 63
    2e02:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2e04:	f8 94       	cli
	return flags;
    2e06:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <tc_enable+0x1a>
    2e0c:	64 c0       	rjmp	.+200    	; 0x2ed6 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2e0e:	88 37       	cpi	r24, 0x78	; 120
    2e10:	91 05       	cpc	r25, r1
    2e12:	49 f4       	brne	.+18     	; 0x2e26 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2e1c:	60 e1       	ldi	r22, 0x10	; 16
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e24:	58 c0       	rjmp	.+176    	; 0x2ed6 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2e26:	80 3c       	cpi	r24, 0xC0	; 192
    2e28:	91 05       	cpc	r25, r1
    2e2a:	29 f4       	brne	.+10     	; 0x2e36 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e34:	50 c0       	rjmp	.+160    	; 0x2ed6 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2e36:	8c 34       	cpi	r24, 0x4C	; 76
    2e38:	91 05       	cpc	r25, r1
    2e3a:	29 f4       	brne	.+10     	; 0x2e46 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    2e3c:	64 e0       	ldi	r22, 0x04	; 4
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e44:	48 c0       	rjmp	.+144    	; 0x2ed6 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2e46:	80 38       	cpi	r24, 0x80	; 128
    2e48:	91 05       	cpc	r25, r1
    2e4a:	29 f4       	brne	.+10     	; 0x2e56 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2e4c:	68 e0       	ldi	r22, 0x08	; 8
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e54:	40 c0       	rjmp	.+128    	; 0x2ed6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2e56:	84 34       	cpi	r24, 0x44	; 68
    2e58:	91 05       	cpc	r25, r1
    2e5a:	29 f4       	brne	.+10     	; 0x2e66 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    2e5c:	60 e2       	ldi	r22, 0x20	; 32
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e64:	38 c0       	rjmp	.+112    	; 0x2ed6 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2e66:	80 3b       	cpi	r24, 0xB0	; 176
    2e68:	91 05       	cpc	r25, r1
    2e6a:	29 f4       	brne	.+10     	; 0x2e76 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2e6c:	60 e4       	ldi	r22, 0x40	; 64
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e74:	30 c0       	rjmp	.+96     	; 0x2ed6 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2e76:	88 3b       	cpi	r24, 0xB8	; 184
    2e78:	91 05       	cpc	r25, r1
    2e7a:	29 f4       	brne	.+10     	; 0x2e86 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2e7c:	60 e8       	ldi	r22, 0x80	; 128
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e84:	28 c0       	rjmp	.+80     	; 0x2ed6 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2e86:	88 3c       	cpi	r24, 0xC8	; 200
    2e88:	91 05       	cpc	r25, r1
    2e8a:	29 f4       	brne	.+10     	; 0x2e96 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2e94:	20 c0       	rjmp	.+64     	; 0x2ed6 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    2e96:	80 39       	cpi	r24, 0x90	; 144
    2e98:	91 05       	cpc	r25, r1
    2e9a:	29 f4       	brne	.+10     	; 0x2ea6 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    2e9c:	68 e0       	ldi	r22, 0x08	; 8
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2ea4:	18 c0       	rjmp	.+48     	; 0x2ed6 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    2ea6:	80 3a       	cpi	r24, 0xA0	; 160
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	29 f4       	brne	.+10     	; 0x2eb6 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    2eac:	60 e1       	ldi	r22, 0x10	; 16
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2eb4:	10 c0       	rjmp	.+32     	; 0x2ed6 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    2eb6:	80 32       	cpi	r24, 0x20	; 32
    2eb8:	21 e0       	ldi	r18, 0x01	; 1
    2eba:	92 07       	cpc	r25, r18
    2ebc:	29 f4       	brne	.+10     	; 0x2ec8 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    2ebe:	60 e2       	ldi	r22, 0x20	; 32
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
    2ec6:	07 c0       	rjmp	.+14     	; 0x2ed6 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    2ec8:	83 34       	cpi	r24, 0x43	; 67
    2eca:	91 40       	sbci	r25, 0x01	; 1
    2ecc:	21 f4       	brne	.+8      	; 0x2ed6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    2ece:	60 e4       	ldi	r22, 0x40	; 64
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	0e 94 a3 07 	call	0xf46	; 0xf46 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ed6:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	08 95       	ret

00002ee2 <tc_disable>:

void tc_disable(volatile void *tc)
{
    2ee2:	1f 93       	push	r17
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	1f 92       	push	r1
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2eee:	2f b7       	in	r18, 0x3f	; 63
    2ef0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2ef2:	f8 94       	cli
	return flags;
    2ef4:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <tc_disable+0x1a>
    2efa:	64 c0       	rjmp	.+200    	; 0x2fc4 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2efc:	88 37       	cpi	r24, 0x78	; 120
    2efe:	91 05       	cpc	r25, r1
    2f00:	49 f4       	brne	.+18     	; 0x2f14 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    2f0a:	60 e1       	ldi	r22, 0x10	; 16
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f12:	58 c0       	rjmp	.+176    	; 0x2fc4 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2f14:	80 3c       	cpi	r24, 0xC0	; 192
    2f16:	91 05       	cpc	r25, r1
    2f18:	29 f4       	brne	.+10     	; 0x2f24 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    2f1a:	62 e0       	ldi	r22, 0x02	; 2
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f22:	50 c0       	rjmp	.+160    	; 0x2fc4 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2f24:	8c 34       	cpi	r24, 0x4C	; 76
    2f26:	91 05       	cpc	r25, r1
    2f28:	29 f4       	brne	.+10     	; 0x2f34 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    2f2a:	64 e0       	ldi	r22, 0x04	; 4
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f32:	48 c0       	rjmp	.+144    	; 0x2fc4 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2f34:	80 38       	cpi	r24, 0x80	; 128
    2f36:	91 05       	cpc	r25, r1
    2f38:	29 f4       	brne	.+10     	; 0x2f44 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    2f3a:	68 e0       	ldi	r22, 0x08	; 8
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f42:	40 c0       	rjmp	.+128    	; 0x2fc4 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2f44:	84 34       	cpi	r24, 0x44	; 68
    2f46:	91 05       	cpc	r25, r1
    2f48:	29 f4       	brne	.+10     	; 0x2f54 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    2f4a:	60 e2       	ldi	r22, 0x20	; 32
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f52:	38 c0       	rjmp	.+112    	; 0x2fc4 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2f54:	80 3b       	cpi	r24, 0xB0	; 176
    2f56:	91 05       	cpc	r25, r1
    2f58:	29 f4       	brne	.+10     	; 0x2f64 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    2f5a:	60 e4       	ldi	r22, 0x40	; 64
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f62:	30 c0       	rjmp	.+96     	; 0x2fc4 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2f64:	88 3b       	cpi	r24, 0xB8	; 184
    2f66:	91 05       	cpc	r25, r1
    2f68:	29 f4       	brne	.+10     	; 0x2f74 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    2f6a:	60 e8       	ldi	r22, 0x80	; 128
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f72:	28 c0       	rjmp	.+80     	; 0x2fc4 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2f74:	88 3c       	cpi	r24, 0xC8	; 200
    2f76:	91 05       	cpc	r25, r1
    2f78:	29 f4       	brne	.+10     	; 0x2f84 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    2f7a:	61 e0       	ldi	r22, 0x01	; 1
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f82:	20 c0       	rjmp	.+64     	; 0x2fc4 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    2f84:	80 39       	cpi	r24, 0x90	; 144
    2f86:	91 05       	cpc	r25, r1
    2f88:	29 f4       	brne	.+10     	; 0x2f94 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    2f8a:	68 e0       	ldi	r22, 0x08	; 8
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2f92:	18 c0       	rjmp	.+48     	; 0x2fc4 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    2f94:	80 3a       	cpi	r24, 0xA0	; 160
    2f96:	91 05       	cpc	r25, r1
    2f98:	29 f4       	brne	.+10     	; 0x2fa4 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    2f9a:	60 e1       	ldi	r22, 0x10	; 16
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2fa2:	10 c0       	rjmp	.+32     	; 0x2fc4 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    2fa4:	80 32       	cpi	r24, 0x20	; 32
    2fa6:	21 e0       	ldi	r18, 0x01	; 1
    2fa8:	92 07       	cpc	r25, r18
    2faa:	29 f4       	brne	.+10     	; 0x2fb6 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    2fac:	60 e2       	ldi	r22, 0x20	; 32
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    2fb6:	83 34       	cpi	r24, 0x43	; 67
    2fb8:	91 40       	sbci	r25, 0x01	; 1
    2fba:	21 f4       	brne	.+8      	; 0x2fc4 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    2fbc:	60 e4       	ldi	r22, 0x40	; 64
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 bb 07 	call	0xf76	; 0xf76 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fc4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2fc6:	0f 90       	pop	r0
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	1f 91       	pop	r17
    2fce:	08 95       	ret

00002fd0 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2fd0:	80 38       	cpi	r24, 0x80	; 128
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	29 f4       	brne	.+10     	; 0x2fe0 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    2fd6:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <tc_tccr1_ovf_callback+0x1>
    2fda:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <tc_tccr1_ovf_callback>
    2fde:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2fe0:	80 39       	cpi	r24, 0x90	; 144
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	29 f4       	brne	.+10     	; 0x2ff0 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    2fe6:	70 93 9c 05 	sts	0x059C, r23	; 0x80059c <tc_tccr3_ovf_callback+0x1>
    2fea:	60 93 9b 05 	sts	0x059B, r22	; 0x80059b <tc_tccr3_ovf_callback>
    2fee:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2ff0:	80 3a       	cpi	r24, 0xA0	; 160
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2ff6:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <tc_tccr4_ovf_callback+0x1>
    2ffa:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <tc_tccr4_ovf_callback>
    2ffe:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3000:	80 32       	cpi	r24, 0x20	; 32
    3002:	91 40       	sbci	r25, 0x01	; 1
    3004:	21 f4       	brne	.+8      	; 0x300e <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    3006:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <tc_tccr5_ovf_callback+0x1>
    300a:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <tc_tccr5_ovf_callback>
    300e:	08 95       	ret

00003010 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3010:	80 38       	cpi	r24, 0x80	; 128
    3012:	91 05       	cpc	r25, r1
    3014:	29 f4       	brne	.+10     	; 0x3020 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    3016:	70 93 a2 05 	sts	0x05A2, r23	; 0x8005a2 <tc_tccr1_compa_callback+0x1>
    301a:	60 93 a1 05 	sts	0x05A1, r22	; 0x8005a1 <tc_tccr1_compa_callback>
    301e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3020:	80 39       	cpi	r24, 0x90	; 144
    3022:	91 05       	cpc	r25, r1
    3024:	29 f4       	brne	.+10     	; 0x3030 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    3026:	70 93 9a 05 	sts	0x059A, r23	; 0x80059a <tc_tccr3_compa_callback+0x1>
    302a:	60 93 99 05 	sts	0x0599, r22	; 0x800599 <tc_tccr3_compa_callback>
    302e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3030:	80 3a       	cpi	r24, 0xA0	; 160
    3032:	91 05       	cpc	r25, r1
    3034:	29 f4       	brne	.+10     	; 0x3040 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    3036:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <tc_tccr4_compa_callback+0x1>
    303a:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <tc_tccr4_compa_callback>
    303e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3040:	80 32       	cpi	r24, 0x20	; 32
    3042:	91 40       	sbci	r25, 0x01	; 1
    3044:	21 f4       	brne	.+8      	; 0x304e <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    3046:	70 93 8a 05 	sts	0x058A, r23	; 0x80058a <tc_tccr5_compa_callback+0x1>
    304a:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <tc_tccr5_compa_callback>
    304e:	08 95       	ret

00003050 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    3050:	0e 94 3c 07 	call	0xe78	; 0xe78 <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    3054:	0e 94 86 07 	call	0xf0c	; 0xf0c <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    3058:	0e 94 78 09 	call	0x12f0	; 0x12f0 <pal_task>
	tal_task();
    305c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    3060:	0e 94 b1 05 	call	0xb62	; 0xb62 <usr_wireless_app_task>
    3064:	f9 cf       	rjmp	.-14     	; 0x3058 <main+0x8>

00003066 <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    3066:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <usr_frame_transmitted_cb>
    306a:	08 95       	ret

0000306c <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    3072:	0e 94 77 04 	call	0x8ee	; 0x8ee <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	0e 94 a4 09 	call	0x1348	; 0x1348 <bmm_buffer_free>
}
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	08 95       	ret

00003084 <__subsf3>:
    3084:	50 58       	subi	r21, 0x80	; 128

00003086 <__addsf3>:
    3086:	bb 27       	eor	r27, r27
    3088:	aa 27       	eor	r26, r26
    308a:	0e d0       	rcall	.+28     	; 0x30a8 <__addsf3x>
    308c:	e5 c0       	rjmp	.+458    	; 0x3258 <__fp_round>
    308e:	d6 d0       	rcall	.+428    	; 0x323c <__fp_pscA>
    3090:	30 f0       	brcs	.+12     	; 0x309e <__addsf3+0x18>
    3092:	db d0       	rcall	.+438    	; 0x324a <__fp_pscB>
    3094:	20 f0       	brcs	.+8      	; 0x309e <__addsf3+0x18>
    3096:	31 f4       	brne	.+12     	; 0x30a4 <__addsf3+0x1e>
    3098:	9f 3f       	cpi	r25, 0xFF	; 255
    309a:	11 f4       	brne	.+4      	; 0x30a0 <__addsf3+0x1a>
    309c:	1e f4       	brtc	.+6      	; 0x30a4 <__addsf3+0x1e>
    309e:	cb c0       	rjmp	.+406    	; 0x3236 <__fp_nan>
    30a0:	0e f4       	brtc	.+2      	; 0x30a4 <__addsf3+0x1e>
    30a2:	e0 95       	com	r30
    30a4:	e7 fb       	bst	r30, 7
    30a6:	c1 c0       	rjmp	.+386    	; 0x322a <__fp_inf>

000030a8 <__addsf3x>:
    30a8:	e9 2f       	mov	r30, r25
    30aa:	e7 d0       	rcall	.+462    	; 0x327a <__fp_split3>
    30ac:	80 f3       	brcs	.-32     	; 0x308e <__addsf3+0x8>
    30ae:	ba 17       	cp	r27, r26
    30b0:	62 07       	cpc	r22, r18
    30b2:	73 07       	cpc	r23, r19
    30b4:	84 07       	cpc	r24, r20
    30b6:	95 07       	cpc	r25, r21
    30b8:	18 f0       	brcs	.+6      	; 0x30c0 <__addsf3x+0x18>
    30ba:	71 f4       	brne	.+28     	; 0x30d8 <__addsf3x+0x30>
    30bc:	9e f5       	brtc	.+102    	; 0x3124 <__addsf3x+0x7c>
    30be:	ff c0       	rjmp	.+510    	; 0x32be <__fp_zero>
    30c0:	0e f4       	brtc	.+2      	; 0x30c4 <__addsf3x+0x1c>
    30c2:	e0 95       	com	r30
    30c4:	0b 2e       	mov	r0, r27
    30c6:	ba 2f       	mov	r27, r26
    30c8:	a0 2d       	mov	r26, r0
    30ca:	0b 01       	movw	r0, r22
    30cc:	b9 01       	movw	r22, r18
    30ce:	90 01       	movw	r18, r0
    30d0:	0c 01       	movw	r0, r24
    30d2:	ca 01       	movw	r24, r20
    30d4:	a0 01       	movw	r20, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	ff 27       	eor	r31, r31
    30da:	59 1b       	sub	r21, r25
    30dc:	99 f0       	breq	.+38     	; 0x3104 <__addsf3x+0x5c>
    30de:	59 3f       	cpi	r21, 0xF9	; 249
    30e0:	50 f4       	brcc	.+20     	; 0x30f6 <__addsf3x+0x4e>
    30e2:	50 3e       	cpi	r21, 0xE0	; 224
    30e4:	68 f1       	brcs	.+90     	; 0x3140 <__addsf3x+0x98>
    30e6:	1a 16       	cp	r1, r26
    30e8:	f0 40       	sbci	r31, 0x00	; 0
    30ea:	a2 2f       	mov	r26, r18
    30ec:	23 2f       	mov	r18, r19
    30ee:	34 2f       	mov	r19, r20
    30f0:	44 27       	eor	r20, r20
    30f2:	58 5f       	subi	r21, 0xF8	; 248
    30f4:	f3 cf       	rjmp	.-26     	; 0x30dc <__addsf3x+0x34>
    30f6:	46 95       	lsr	r20
    30f8:	37 95       	ror	r19
    30fa:	27 95       	ror	r18
    30fc:	a7 95       	ror	r26
    30fe:	f0 40       	sbci	r31, 0x00	; 0
    3100:	53 95       	inc	r21
    3102:	c9 f7       	brne	.-14     	; 0x30f6 <__addsf3x+0x4e>
    3104:	7e f4       	brtc	.+30     	; 0x3124 <__addsf3x+0x7c>
    3106:	1f 16       	cp	r1, r31
    3108:	ba 0b       	sbc	r27, r26
    310a:	62 0b       	sbc	r22, r18
    310c:	73 0b       	sbc	r23, r19
    310e:	84 0b       	sbc	r24, r20
    3110:	ba f0       	brmi	.+46     	; 0x3140 <__addsf3x+0x98>
    3112:	91 50       	subi	r25, 0x01	; 1
    3114:	a1 f0       	breq	.+40     	; 0x313e <__addsf3x+0x96>
    3116:	ff 0f       	add	r31, r31
    3118:	bb 1f       	adc	r27, r27
    311a:	66 1f       	adc	r22, r22
    311c:	77 1f       	adc	r23, r23
    311e:	88 1f       	adc	r24, r24
    3120:	c2 f7       	brpl	.-16     	; 0x3112 <__addsf3x+0x6a>
    3122:	0e c0       	rjmp	.+28     	; 0x3140 <__addsf3x+0x98>
    3124:	ba 0f       	add	r27, r26
    3126:	62 1f       	adc	r22, r18
    3128:	73 1f       	adc	r23, r19
    312a:	84 1f       	adc	r24, r20
    312c:	48 f4       	brcc	.+18     	; 0x3140 <__addsf3x+0x98>
    312e:	87 95       	ror	r24
    3130:	77 95       	ror	r23
    3132:	67 95       	ror	r22
    3134:	b7 95       	ror	r27
    3136:	f7 95       	ror	r31
    3138:	9e 3f       	cpi	r25, 0xFE	; 254
    313a:	08 f0       	brcs	.+2      	; 0x313e <__addsf3x+0x96>
    313c:	b3 cf       	rjmp	.-154    	; 0x30a4 <__addsf3+0x1e>
    313e:	93 95       	inc	r25
    3140:	88 0f       	add	r24, r24
    3142:	08 f0       	brcs	.+2      	; 0x3146 <__addsf3x+0x9e>
    3144:	99 27       	eor	r25, r25
    3146:	ee 0f       	add	r30, r30
    3148:	97 95       	ror	r25
    314a:	87 95       	ror	r24
    314c:	08 95       	ret

0000314e <__fixsfsi>:
    314e:	04 d0       	rcall	.+8      	; 0x3158 <__fixunssfsi>
    3150:	68 94       	set
    3152:	b1 11       	cpse	r27, r1
    3154:	b5 c0       	rjmp	.+362    	; 0x32c0 <__fp_szero>
    3156:	08 95       	ret

00003158 <__fixunssfsi>:
    3158:	98 d0       	rcall	.+304    	; 0x328a <__fp_splitA>
    315a:	88 f0       	brcs	.+34     	; 0x317e <__fixunssfsi+0x26>
    315c:	9f 57       	subi	r25, 0x7F	; 127
    315e:	90 f0       	brcs	.+36     	; 0x3184 <__fixunssfsi+0x2c>
    3160:	b9 2f       	mov	r27, r25
    3162:	99 27       	eor	r25, r25
    3164:	b7 51       	subi	r27, 0x17	; 23
    3166:	a0 f0       	brcs	.+40     	; 0x3190 <__fixunssfsi+0x38>
    3168:	d1 f0       	breq	.+52     	; 0x319e <__fixunssfsi+0x46>
    316a:	66 0f       	add	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	1a f0       	brmi	.+6      	; 0x317a <__fixunssfsi+0x22>
    3174:	ba 95       	dec	r27
    3176:	c9 f7       	brne	.-14     	; 0x316a <__fixunssfsi+0x12>
    3178:	12 c0       	rjmp	.+36     	; 0x319e <__fixunssfsi+0x46>
    317a:	b1 30       	cpi	r27, 0x01	; 1
    317c:	81 f0       	breq	.+32     	; 0x319e <__fixunssfsi+0x46>
    317e:	9f d0       	rcall	.+318    	; 0x32be <__fp_zero>
    3180:	b1 e0       	ldi	r27, 0x01	; 1
    3182:	08 95       	ret
    3184:	9c c0       	rjmp	.+312    	; 0x32be <__fp_zero>
    3186:	67 2f       	mov	r22, r23
    3188:	78 2f       	mov	r23, r24
    318a:	88 27       	eor	r24, r24
    318c:	b8 5f       	subi	r27, 0xF8	; 248
    318e:	39 f0       	breq	.+14     	; 0x319e <__fixunssfsi+0x46>
    3190:	b9 3f       	cpi	r27, 0xF9	; 249
    3192:	cc f3       	brlt	.-14     	; 0x3186 <__fixunssfsi+0x2e>
    3194:	86 95       	lsr	r24
    3196:	77 95       	ror	r23
    3198:	67 95       	ror	r22
    319a:	b3 95       	inc	r27
    319c:	d9 f7       	brne	.-10     	; 0x3194 <__fixunssfsi+0x3c>
    319e:	3e f4       	brtc	.+14     	; 0x31ae <__fixunssfsi+0x56>
    31a0:	90 95       	com	r25
    31a2:	80 95       	com	r24
    31a4:	70 95       	com	r23
    31a6:	61 95       	neg	r22
    31a8:	7f 4f       	sbci	r23, 0xFF	; 255
    31aa:	8f 4f       	sbci	r24, 0xFF	; 255
    31ac:	9f 4f       	sbci	r25, 0xFF	; 255
    31ae:	08 95       	ret

000031b0 <__floatunsisf>:
    31b0:	e8 94       	clt
    31b2:	09 c0       	rjmp	.+18     	; 0x31c6 <__floatsisf+0x12>

000031b4 <__floatsisf>:
    31b4:	97 fb       	bst	r25, 7
    31b6:	3e f4       	brtc	.+14     	; 0x31c6 <__floatsisf+0x12>
    31b8:	90 95       	com	r25
    31ba:	80 95       	com	r24
    31bc:	70 95       	com	r23
    31be:	61 95       	neg	r22
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255
    31c2:	8f 4f       	sbci	r24, 0xFF	; 255
    31c4:	9f 4f       	sbci	r25, 0xFF	; 255
    31c6:	99 23       	and	r25, r25
    31c8:	a9 f0       	breq	.+42     	; 0x31f4 <__floatsisf+0x40>
    31ca:	f9 2f       	mov	r31, r25
    31cc:	96 e9       	ldi	r25, 0x96	; 150
    31ce:	bb 27       	eor	r27, r27
    31d0:	93 95       	inc	r25
    31d2:	f6 95       	lsr	r31
    31d4:	87 95       	ror	r24
    31d6:	77 95       	ror	r23
    31d8:	67 95       	ror	r22
    31da:	b7 95       	ror	r27
    31dc:	f1 11       	cpse	r31, r1
    31de:	f8 cf       	rjmp	.-16     	; 0x31d0 <__floatsisf+0x1c>
    31e0:	fa f4       	brpl	.+62     	; 0x3220 <__floatsisf+0x6c>
    31e2:	bb 0f       	add	r27, r27
    31e4:	11 f4       	brne	.+4      	; 0x31ea <__floatsisf+0x36>
    31e6:	60 ff       	sbrs	r22, 0
    31e8:	1b c0       	rjmp	.+54     	; 0x3220 <__floatsisf+0x6c>
    31ea:	6f 5f       	subi	r22, 0xFF	; 255
    31ec:	7f 4f       	sbci	r23, 0xFF	; 255
    31ee:	8f 4f       	sbci	r24, 0xFF	; 255
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	16 c0       	rjmp	.+44     	; 0x3220 <__floatsisf+0x6c>
    31f4:	88 23       	and	r24, r24
    31f6:	11 f0       	breq	.+4      	; 0x31fc <__floatsisf+0x48>
    31f8:	96 e9       	ldi	r25, 0x96	; 150
    31fa:	11 c0       	rjmp	.+34     	; 0x321e <__floatsisf+0x6a>
    31fc:	77 23       	and	r23, r23
    31fe:	21 f0       	breq	.+8      	; 0x3208 <__floatsisf+0x54>
    3200:	9e e8       	ldi	r25, 0x8E	; 142
    3202:	87 2f       	mov	r24, r23
    3204:	76 2f       	mov	r23, r22
    3206:	05 c0       	rjmp	.+10     	; 0x3212 <__floatsisf+0x5e>
    3208:	66 23       	and	r22, r22
    320a:	71 f0       	breq	.+28     	; 0x3228 <__floatsisf+0x74>
    320c:	96 e8       	ldi	r25, 0x86	; 134
    320e:	86 2f       	mov	r24, r22
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	2a f0       	brmi	.+10     	; 0x3220 <__floatsisf+0x6c>
    3216:	9a 95       	dec	r25
    3218:	66 0f       	add	r22, r22
    321a:	77 1f       	adc	r23, r23
    321c:	88 1f       	adc	r24, r24
    321e:	da f7       	brpl	.-10     	; 0x3216 <__floatsisf+0x62>
    3220:	88 0f       	add	r24, r24
    3222:	96 95       	lsr	r25
    3224:	87 95       	ror	r24
    3226:	97 f9       	bld	r25, 7
    3228:	08 95       	ret

0000322a <__fp_inf>:
    322a:	97 f9       	bld	r25, 7
    322c:	9f 67       	ori	r25, 0x7F	; 127
    322e:	80 e8       	ldi	r24, 0x80	; 128
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	08 95       	ret

00003236 <__fp_nan>:
    3236:	9f ef       	ldi	r25, 0xFF	; 255
    3238:	80 ec       	ldi	r24, 0xC0	; 192
    323a:	08 95       	ret

0000323c <__fp_pscA>:
    323c:	00 24       	eor	r0, r0
    323e:	0a 94       	dec	r0
    3240:	16 16       	cp	r1, r22
    3242:	17 06       	cpc	r1, r23
    3244:	18 06       	cpc	r1, r24
    3246:	09 06       	cpc	r0, r25
    3248:	08 95       	ret

0000324a <__fp_pscB>:
    324a:	00 24       	eor	r0, r0
    324c:	0a 94       	dec	r0
    324e:	12 16       	cp	r1, r18
    3250:	13 06       	cpc	r1, r19
    3252:	14 06       	cpc	r1, r20
    3254:	05 06       	cpc	r0, r21
    3256:	08 95       	ret

00003258 <__fp_round>:
    3258:	09 2e       	mov	r0, r25
    325a:	03 94       	inc	r0
    325c:	00 0c       	add	r0, r0
    325e:	11 f4       	brne	.+4      	; 0x3264 <__fp_round+0xc>
    3260:	88 23       	and	r24, r24
    3262:	52 f0       	brmi	.+20     	; 0x3278 <__fp_round+0x20>
    3264:	bb 0f       	add	r27, r27
    3266:	40 f4       	brcc	.+16     	; 0x3278 <__fp_round+0x20>
    3268:	bf 2b       	or	r27, r31
    326a:	11 f4       	brne	.+4      	; 0x3270 <__fp_round+0x18>
    326c:	60 ff       	sbrs	r22, 0
    326e:	04 c0       	rjmp	.+8      	; 0x3278 <__fp_round+0x20>
    3270:	6f 5f       	subi	r22, 0xFF	; 255
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	8f 4f       	sbci	r24, 0xFF	; 255
    3276:	9f 4f       	sbci	r25, 0xFF	; 255
    3278:	08 95       	ret

0000327a <__fp_split3>:
    327a:	57 fd       	sbrc	r21, 7
    327c:	90 58       	subi	r25, 0x80	; 128
    327e:	44 0f       	add	r20, r20
    3280:	55 1f       	adc	r21, r21
    3282:	59 f0       	breq	.+22     	; 0x329a <__fp_splitA+0x10>
    3284:	5f 3f       	cpi	r21, 0xFF	; 255
    3286:	71 f0       	breq	.+28     	; 0x32a4 <__fp_splitA+0x1a>
    3288:	47 95       	ror	r20

0000328a <__fp_splitA>:
    328a:	88 0f       	add	r24, r24
    328c:	97 fb       	bst	r25, 7
    328e:	99 1f       	adc	r25, r25
    3290:	61 f0       	breq	.+24     	; 0x32aa <__fp_splitA+0x20>
    3292:	9f 3f       	cpi	r25, 0xFF	; 255
    3294:	79 f0       	breq	.+30     	; 0x32b4 <__fp_splitA+0x2a>
    3296:	87 95       	ror	r24
    3298:	08 95       	ret
    329a:	12 16       	cp	r1, r18
    329c:	13 06       	cpc	r1, r19
    329e:	14 06       	cpc	r1, r20
    32a0:	55 1f       	adc	r21, r21
    32a2:	f2 cf       	rjmp	.-28     	; 0x3288 <__fp_split3+0xe>
    32a4:	46 95       	lsr	r20
    32a6:	f1 df       	rcall	.-30     	; 0x328a <__fp_splitA>
    32a8:	08 c0       	rjmp	.+16     	; 0x32ba <__fp_splitA+0x30>
    32aa:	16 16       	cp	r1, r22
    32ac:	17 06       	cpc	r1, r23
    32ae:	18 06       	cpc	r1, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	f1 cf       	rjmp	.-30     	; 0x3296 <__fp_splitA+0xc>
    32b4:	86 95       	lsr	r24
    32b6:	71 05       	cpc	r23, r1
    32b8:	61 05       	cpc	r22, r1
    32ba:	08 94       	sec
    32bc:	08 95       	ret

000032be <__fp_zero>:
    32be:	e8 94       	clt

000032c0 <__fp_szero>:
    32c0:	bb 27       	eor	r27, r27
    32c2:	66 27       	eor	r22, r22
    32c4:	77 27       	eor	r23, r23
    32c6:	cb 01       	movw	r24, r22
    32c8:	97 f9       	bld	r25, 7
    32ca:	08 95       	ret

000032cc <__mulsf3>:
    32cc:	0b d0       	rcall	.+22     	; 0x32e4 <__mulsf3x>
    32ce:	c4 cf       	rjmp	.-120    	; 0x3258 <__fp_round>
    32d0:	b5 df       	rcall	.-150    	; 0x323c <__fp_pscA>
    32d2:	28 f0       	brcs	.+10     	; 0x32de <__mulsf3+0x12>
    32d4:	ba df       	rcall	.-140    	; 0x324a <__fp_pscB>
    32d6:	18 f0       	brcs	.+6      	; 0x32de <__mulsf3+0x12>
    32d8:	95 23       	and	r25, r21
    32da:	09 f0       	breq	.+2      	; 0x32de <__mulsf3+0x12>
    32dc:	a6 cf       	rjmp	.-180    	; 0x322a <__fp_inf>
    32de:	ab cf       	rjmp	.-170    	; 0x3236 <__fp_nan>
    32e0:	11 24       	eor	r1, r1
    32e2:	ee cf       	rjmp	.-36     	; 0x32c0 <__fp_szero>

000032e4 <__mulsf3x>:
    32e4:	ca df       	rcall	.-108    	; 0x327a <__fp_split3>
    32e6:	a0 f3       	brcs	.-24     	; 0x32d0 <__mulsf3+0x4>

000032e8 <__mulsf3_pse>:
    32e8:	95 9f       	mul	r25, r21
    32ea:	d1 f3       	breq	.-12     	; 0x32e0 <__mulsf3+0x14>
    32ec:	95 0f       	add	r25, r21
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	55 1f       	adc	r21, r21
    32f2:	62 9f       	mul	r22, r18
    32f4:	f0 01       	movw	r30, r0
    32f6:	72 9f       	mul	r23, r18
    32f8:	bb 27       	eor	r27, r27
    32fa:	f0 0d       	add	r31, r0
    32fc:	b1 1d       	adc	r27, r1
    32fe:	63 9f       	mul	r22, r19
    3300:	aa 27       	eor	r26, r26
    3302:	f0 0d       	add	r31, r0
    3304:	b1 1d       	adc	r27, r1
    3306:	aa 1f       	adc	r26, r26
    3308:	64 9f       	mul	r22, r20
    330a:	66 27       	eor	r22, r22
    330c:	b0 0d       	add	r27, r0
    330e:	a1 1d       	adc	r26, r1
    3310:	66 1f       	adc	r22, r22
    3312:	82 9f       	mul	r24, r18
    3314:	22 27       	eor	r18, r18
    3316:	b0 0d       	add	r27, r0
    3318:	a1 1d       	adc	r26, r1
    331a:	62 1f       	adc	r22, r18
    331c:	73 9f       	mul	r23, r19
    331e:	b0 0d       	add	r27, r0
    3320:	a1 1d       	adc	r26, r1
    3322:	62 1f       	adc	r22, r18
    3324:	83 9f       	mul	r24, r19
    3326:	a0 0d       	add	r26, r0
    3328:	61 1d       	adc	r22, r1
    332a:	22 1f       	adc	r18, r18
    332c:	74 9f       	mul	r23, r20
    332e:	33 27       	eor	r19, r19
    3330:	a0 0d       	add	r26, r0
    3332:	61 1d       	adc	r22, r1
    3334:	23 1f       	adc	r18, r19
    3336:	84 9f       	mul	r24, r20
    3338:	60 0d       	add	r22, r0
    333a:	21 1d       	adc	r18, r1
    333c:	82 2f       	mov	r24, r18
    333e:	76 2f       	mov	r23, r22
    3340:	6a 2f       	mov	r22, r26
    3342:	11 24       	eor	r1, r1
    3344:	9f 57       	subi	r25, 0x7F	; 127
    3346:	50 40       	sbci	r21, 0x00	; 0
    3348:	8a f0       	brmi	.+34     	; 0x336c <__mulsf3_pse+0x84>
    334a:	e1 f0       	breq	.+56     	; 0x3384 <__mulsf3_pse+0x9c>
    334c:	88 23       	and	r24, r24
    334e:	4a f0       	brmi	.+18     	; 0x3362 <__mulsf3_pse+0x7a>
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	bb 1f       	adc	r27, r27
    3356:	66 1f       	adc	r22, r22
    3358:	77 1f       	adc	r23, r23
    335a:	88 1f       	adc	r24, r24
    335c:	91 50       	subi	r25, 0x01	; 1
    335e:	50 40       	sbci	r21, 0x00	; 0
    3360:	a9 f7       	brne	.-22     	; 0x334c <__mulsf3_pse+0x64>
    3362:	9e 3f       	cpi	r25, 0xFE	; 254
    3364:	51 05       	cpc	r21, r1
    3366:	70 f0       	brcs	.+28     	; 0x3384 <__mulsf3_pse+0x9c>
    3368:	60 cf       	rjmp	.-320    	; 0x322a <__fp_inf>
    336a:	aa cf       	rjmp	.-172    	; 0x32c0 <__fp_szero>
    336c:	5f 3f       	cpi	r21, 0xFF	; 255
    336e:	ec f3       	brlt	.-6      	; 0x336a <__mulsf3_pse+0x82>
    3370:	98 3e       	cpi	r25, 0xE8	; 232
    3372:	dc f3       	brlt	.-10     	; 0x336a <__mulsf3_pse+0x82>
    3374:	86 95       	lsr	r24
    3376:	77 95       	ror	r23
    3378:	67 95       	ror	r22
    337a:	b7 95       	ror	r27
    337c:	f7 95       	ror	r31
    337e:	e7 95       	ror	r30
    3380:	9f 5f       	subi	r25, 0xFF	; 255
    3382:	c1 f7       	brne	.-16     	; 0x3374 <__mulsf3_pse+0x8c>
    3384:	fe 2b       	or	r31, r30
    3386:	88 0f       	add	r24, r24
    3388:	91 1d       	adc	r25, r1
    338a:	96 95       	lsr	r25
    338c:	87 95       	ror	r24
    338e:	97 f9       	bld	r25, 7
    3390:	08 95       	ret

00003392 <pow>:
    3392:	fa 01       	movw	r30, r20
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	30 96       	adiw	r30, 0x00	; 0
    339a:	21 05       	cpc	r18, r1
    339c:	31 05       	cpc	r19, r1
    339e:	99 f1       	breq	.+102    	; 0x3406 <pow+0x74>
    33a0:	61 15       	cp	r22, r1
    33a2:	71 05       	cpc	r23, r1
    33a4:	61 f4       	brne	.+24     	; 0x33be <pow+0x2c>
    33a6:	80 38       	cpi	r24, 0x80	; 128
    33a8:	bf e3       	ldi	r27, 0x3F	; 63
    33aa:	9b 07       	cpc	r25, r27
    33ac:	49 f1       	breq	.+82     	; 0x3400 <pow+0x6e>
    33ae:	68 94       	set
    33b0:	90 38       	cpi	r25, 0x80	; 128
    33b2:	81 05       	cpc	r24, r1
    33b4:	61 f0       	breq	.+24     	; 0x33ce <pow+0x3c>
    33b6:	80 38       	cpi	r24, 0x80	; 128
    33b8:	bf ef       	ldi	r27, 0xFF	; 255
    33ba:	9b 07       	cpc	r25, r27
    33bc:	41 f0       	breq	.+16     	; 0x33ce <pow+0x3c>
    33be:	99 23       	and	r25, r25
    33c0:	42 f5       	brpl	.+80     	; 0x3412 <pow+0x80>
    33c2:	ff 3f       	cpi	r31, 0xFF	; 255
    33c4:	e1 05       	cpc	r30, r1
    33c6:	31 05       	cpc	r19, r1
    33c8:	21 05       	cpc	r18, r1
    33ca:	11 f1       	breq	.+68     	; 0x3410 <pow+0x7e>
    33cc:	e8 94       	clt
    33ce:	08 94       	sec
    33d0:	e7 95       	ror	r30
    33d2:	d9 01       	movw	r26, r18
    33d4:	aa 23       	and	r26, r26
    33d6:	29 f4       	brne	.+10     	; 0x33e2 <pow+0x50>
    33d8:	ab 2f       	mov	r26, r27
    33da:	be 2f       	mov	r27, r30
    33dc:	f8 5f       	subi	r31, 0xF8	; 248
    33de:	d0 f3       	brcs	.-12     	; 0x33d4 <pow+0x42>
    33e0:	10 c0       	rjmp	.+32     	; 0x3402 <pow+0x70>
    33e2:	ff 5f       	subi	r31, 0xFF	; 255
    33e4:	70 f4       	brcc	.+28     	; 0x3402 <pow+0x70>
    33e6:	a6 95       	lsr	r26
    33e8:	e0 f7       	brcc	.-8      	; 0x33e2 <pow+0x50>
    33ea:	f7 39       	cpi	r31, 0x97	; 151
    33ec:	50 f0       	brcs	.+20     	; 0x3402 <pow+0x70>
    33ee:	19 f0       	breq	.+6      	; 0x33f6 <pow+0x64>
    33f0:	ff 3a       	cpi	r31, 0xAF	; 175
    33f2:	38 f4       	brcc	.+14     	; 0x3402 <pow+0x70>
    33f4:	9f 77       	andi	r25, 0x7F	; 127
    33f6:	9f 93       	push	r25
    33f8:	0c d0       	rcall	.+24     	; 0x3412 <pow+0x80>
    33fa:	0f 90       	pop	r0
    33fc:	07 fc       	sbrc	r0, 7
    33fe:	90 58       	subi	r25, 0x80	; 128
    3400:	08 95       	ret
    3402:	3e f0       	brts	.+14     	; 0x3412 <pow+0x80>
    3404:	18 cf       	rjmp	.-464    	; 0x3236 <__fp_nan>
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	80 e8       	ldi	r24, 0x80	; 128
    340c:	9f e3       	ldi	r25, 0x3F	; 63
    340e:	08 95       	ret
    3410:	4f e7       	ldi	r20, 0x7F	; 127
    3412:	9f 77       	andi	r25, 0x7F	; 127
    3414:	5f 93       	push	r21
    3416:	4f 93       	push	r20
    3418:	3f 93       	push	r19
    341a:	2f 93       	push	r18
    341c:	9e d0       	rcall	.+316    	; 0x355a <log>
    341e:	2f 91       	pop	r18
    3420:	3f 91       	pop	r19
    3422:	4f 91       	pop	r20
    3424:	5f 91       	pop	r21
    3426:	52 df       	rcall	.-348    	; 0x32cc <__mulsf3>
    3428:	05 c0       	rjmp	.+10     	; 0x3434 <exp>
    342a:	19 f4       	brne	.+6      	; 0x3432 <pow+0xa0>
    342c:	0e f0       	brts	.+2      	; 0x3430 <pow+0x9e>
    342e:	fd ce       	rjmp	.-518    	; 0x322a <__fp_inf>
    3430:	46 cf       	rjmp	.-372    	; 0x32be <__fp_zero>
    3432:	01 cf       	rjmp	.-510    	; 0x3236 <__fp_nan>

00003434 <exp>:
    3434:	2a df       	rcall	.-428    	; 0x328a <__fp_splitA>
    3436:	c8 f3       	brcs	.-14     	; 0x342a <pow+0x98>
    3438:	96 38       	cpi	r25, 0x86	; 134
    343a:	c0 f7       	brcc	.-16     	; 0x342c <pow+0x9a>
    343c:	07 f8       	bld	r0, 7
    343e:	0f 92       	push	r0
    3440:	e8 94       	clt
    3442:	2b e3       	ldi	r18, 0x3B	; 59
    3444:	3a ea       	ldi	r19, 0xAA	; 170
    3446:	48 eb       	ldi	r20, 0xB8	; 184
    3448:	5f e7       	ldi	r21, 0x7F	; 127
    344a:	4e df       	rcall	.-356    	; 0x32e8 <__mulsf3_pse>
    344c:	0f 92       	push	r0
    344e:	0f 92       	push	r0
    3450:	0f 92       	push	r0
    3452:	4d b7       	in	r20, 0x3d	; 61
    3454:	5e b7       	in	r21, 0x3e	; 62
    3456:	0f 92       	push	r0
    3458:	c0 d0       	rcall	.+384    	; 0x35da <modf>
    345a:	e2 e6       	ldi	r30, 0x62	; 98
    345c:	f1 e0       	ldi	r31, 0x01	; 1
    345e:	16 d0       	rcall	.+44     	; 0x348c <__fp_powser>
    3460:	4f 91       	pop	r20
    3462:	5f 91       	pop	r21
    3464:	ef 91       	pop	r30
    3466:	ff 91       	pop	r31
    3468:	e5 95       	asr	r30
    346a:	ee 1f       	adc	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	49 f0       	breq	.+18     	; 0x3482 <exp+0x4e>
    3470:	fe 57       	subi	r31, 0x7E	; 126
    3472:	e0 68       	ori	r30, 0x80	; 128
    3474:	44 27       	eor	r20, r20
    3476:	ee 0f       	add	r30, r30
    3478:	44 1f       	adc	r20, r20
    347a:	fa 95       	dec	r31
    347c:	e1 f7       	brne	.-8      	; 0x3476 <exp+0x42>
    347e:	41 95       	neg	r20
    3480:	55 0b       	sbc	r21, r21
    3482:	32 d0       	rcall	.+100    	; 0x34e8 <ldexp>
    3484:	0f 90       	pop	r0
    3486:	07 fe       	sbrs	r0, 7
    3488:	26 c0       	rjmp	.+76     	; 0x34d6 <inverse>
    348a:	08 95       	ret

0000348c <__fp_powser>:
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	1f 93       	push	r17
    3492:	0f 93       	push	r16
    3494:	ff 92       	push	r15
    3496:	ef 92       	push	r14
    3498:	df 92       	push	r13
    349a:	7b 01       	movw	r14, r22
    349c:	8c 01       	movw	r16, r24
    349e:	68 94       	set
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac <__fp_powser+0x20>
    34a2:	da 2e       	mov	r13, r26
    34a4:	ef 01       	movw	r28, r30
    34a6:	1e df       	rcall	.-452    	; 0x32e4 <__mulsf3x>
    34a8:	fe 01       	movw	r30, r28
    34aa:	e8 94       	clt
    34ac:	a5 91       	lpm	r26, Z+
    34ae:	25 91       	lpm	r18, Z+
    34b0:	35 91       	lpm	r19, Z+
    34b2:	45 91       	lpm	r20, Z+
    34b4:	55 91       	lpm	r21, Z+
    34b6:	ae f3       	brts	.-22     	; 0x34a2 <__fp_powser+0x16>
    34b8:	ef 01       	movw	r28, r30
    34ba:	f6 dd       	rcall	.-1044   	; 0x30a8 <__addsf3x>
    34bc:	fe 01       	movw	r30, r28
    34be:	97 01       	movw	r18, r14
    34c0:	a8 01       	movw	r20, r16
    34c2:	da 94       	dec	r13
    34c4:	79 f7       	brne	.-34     	; 0x34a4 <__fp_powser+0x18>
    34c6:	df 90       	pop	r13
    34c8:	ef 90       	pop	r14
    34ca:	ff 90       	pop	r15
    34cc:	0f 91       	pop	r16
    34ce:	1f 91       	pop	r17
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <inverse>:
    34d6:	9b 01       	movw	r18, r22
    34d8:	ac 01       	movw	r20, r24
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	70 e0       	ldi	r23, 0x00	; 0
    34de:	80 e8       	ldi	r24, 0x80	; 128
    34e0:	9f e3       	ldi	r25, 0x3F	; 63
    34e2:	ae c0       	rjmp	.+348    	; 0x3640 <__divsf3>
    34e4:	a2 ce       	rjmp	.-700    	; 0x322a <__fp_inf>
    34e6:	14 c1       	rjmp	.+552    	; 0x3710 <__fp_mpack>

000034e8 <ldexp>:
    34e8:	d0 de       	rcall	.-608    	; 0x328a <__fp_splitA>
    34ea:	e8 f3       	brcs	.-6      	; 0x34e6 <inverse+0x10>
    34ec:	99 23       	and	r25, r25
    34ee:	d9 f3       	breq	.-10     	; 0x34e6 <inverse+0x10>
    34f0:	94 0f       	add	r25, r20
    34f2:	51 1d       	adc	r21, r1
    34f4:	bb f3       	brvs	.-18     	; 0x34e4 <inverse+0xe>
    34f6:	91 50       	subi	r25, 0x01	; 1
    34f8:	50 40       	sbci	r21, 0x00	; 0
    34fa:	94 f0       	brlt	.+36     	; 0x3520 <ldexp+0x38>
    34fc:	59 f0       	breq	.+22     	; 0x3514 <ldexp+0x2c>
    34fe:	88 23       	and	r24, r24
    3500:	32 f0       	brmi	.+12     	; 0x350e <ldexp+0x26>
    3502:	66 0f       	add	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	88 1f       	adc	r24, r24
    3508:	91 50       	subi	r25, 0x01	; 1
    350a:	50 40       	sbci	r21, 0x00	; 0
    350c:	c1 f7       	brne	.-16     	; 0x34fe <ldexp+0x16>
    350e:	9e 3f       	cpi	r25, 0xFE	; 254
    3510:	51 05       	cpc	r21, r1
    3512:	44 f7       	brge	.-48     	; 0x34e4 <inverse+0xe>
    3514:	88 0f       	add	r24, r24
    3516:	91 1d       	adc	r25, r1
    3518:	96 95       	lsr	r25
    351a:	87 95       	ror	r24
    351c:	97 f9       	bld	r25, 7
    351e:	08 95       	ret
    3520:	5f 3f       	cpi	r21, 0xFF	; 255
    3522:	ac f0       	brlt	.+42     	; 0x354e <ldexp+0x66>
    3524:	98 3e       	cpi	r25, 0xE8	; 232
    3526:	9c f0       	brlt	.+38     	; 0x354e <ldexp+0x66>
    3528:	bb 27       	eor	r27, r27
    352a:	86 95       	lsr	r24
    352c:	77 95       	ror	r23
    352e:	67 95       	ror	r22
    3530:	b7 95       	ror	r27
    3532:	08 f4       	brcc	.+2      	; 0x3536 <ldexp+0x4e>
    3534:	b1 60       	ori	r27, 0x01	; 1
    3536:	93 95       	inc	r25
    3538:	c1 f7       	brne	.-16     	; 0x352a <ldexp+0x42>
    353a:	bb 0f       	add	r27, r27
    353c:	58 f7       	brcc	.-42     	; 0x3514 <ldexp+0x2c>
    353e:	11 f4       	brne	.+4      	; 0x3544 <ldexp+0x5c>
    3540:	60 ff       	sbrs	r22, 0
    3542:	e8 cf       	rjmp	.-48     	; 0x3514 <ldexp+0x2c>
    3544:	6f 5f       	subi	r22, 0xFF	; 255
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	8f 4f       	sbci	r24, 0xFF	; 255
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	e3 cf       	rjmp	.-58     	; 0x3514 <ldexp+0x2c>
    354e:	b8 ce       	rjmp	.-656    	; 0x32c0 <__fp_szero>
    3550:	0e f0       	brts	.+2      	; 0x3554 <ldexp+0x6c>
    3552:	de c0       	rjmp	.+444    	; 0x3710 <__fp_mpack>
    3554:	70 ce       	rjmp	.-800    	; 0x3236 <__fp_nan>
    3556:	68 94       	set
    3558:	68 ce       	rjmp	.-816    	; 0x322a <__fp_inf>

0000355a <log>:
    355a:	97 de       	rcall	.-722    	; 0x328a <__fp_splitA>
    355c:	c8 f3       	brcs	.-14     	; 0x3550 <ldexp+0x68>
    355e:	99 23       	and	r25, r25
    3560:	d1 f3       	breq	.-12     	; 0x3556 <ldexp+0x6e>
    3562:	c6 f3       	brts	.-16     	; 0x3554 <ldexp+0x6c>
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	1f 93       	push	r17
    356a:	0f 93       	push	r16
    356c:	ff 92       	push	r15
    356e:	c9 2f       	mov	r28, r25
    3570:	dd 27       	eor	r29, r29
    3572:	88 23       	and	r24, r24
    3574:	2a f0       	brmi	.+10     	; 0x3580 <log+0x26>
    3576:	21 97       	sbiw	r28, 0x01	; 1
    3578:	66 0f       	add	r22, r22
    357a:	77 1f       	adc	r23, r23
    357c:	88 1f       	adc	r24, r24
    357e:	da f7       	brpl	.-10     	; 0x3576 <log+0x1c>
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e8       	ldi	r20, 0x80	; 128
    3586:	5f eb       	ldi	r21, 0xBF	; 191
    3588:	9f e3       	ldi	r25, 0x3F	; 63
    358a:	88 39       	cpi	r24, 0x98	; 152
    358c:	20 f0       	brcs	.+8      	; 0x3596 <log+0x3c>
    358e:	80 3e       	cpi	r24, 0xE0	; 224
    3590:	30 f0       	brcs	.+12     	; 0x359e <log+0x44>
    3592:	21 96       	adiw	r28, 0x01	; 1
    3594:	8f 77       	andi	r24, 0x7F	; 127
    3596:	77 dd       	rcall	.-1298   	; 0x3086 <__addsf3>
    3598:	ea e8       	ldi	r30, 0x8A	; 138
    359a:	f1 e0       	ldi	r31, 0x01	; 1
    359c:	03 c0       	rjmp	.+6      	; 0x35a4 <log+0x4a>
    359e:	73 dd       	rcall	.-1306   	; 0x3086 <__addsf3>
    35a0:	e7 eb       	ldi	r30, 0xB7	; 183
    35a2:	f1 e0       	ldi	r31, 0x01	; 1
    35a4:	73 df       	rcall	.-282    	; 0x348c <__fp_powser>
    35a6:	8b 01       	movw	r16, r22
    35a8:	be 01       	movw	r22, r28
    35aa:	ec 01       	movw	r28, r24
    35ac:	fb 2e       	mov	r15, r27
    35ae:	6f 57       	subi	r22, 0x7F	; 127
    35b0:	71 09       	sbc	r23, r1
    35b2:	75 95       	asr	r23
    35b4:	77 1f       	adc	r23, r23
    35b6:	88 0b       	sbc	r24, r24
    35b8:	99 0b       	sbc	r25, r25
    35ba:	fc dd       	rcall	.-1032   	; 0x31b4 <__floatsisf>
    35bc:	28 e1       	ldi	r18, 0x18	; 24
    35be:	32 e7       	ldi	r19, 0x72	; 114
    35c0:	41 e3       	ldi	r20, 0x31	; 49
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	8f de       	rcall	.-738    	; 0x32e4 <__mulsf3x>
    35c6:	af 2d       	mov	r26, r15
    35c8:	98 01       	movw	r18, r16
    35ca:	ae 01       	movw	r20, r28
    35cc:	ff 90       	pop	r15
    35ce:	0f 91       	pop	r16
    35d0:	1f 91       	pop	r17
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	68 dd       	rcall	.-1328   	; 0x30a8 <__addsf3x>
    35d8:	3f ce       	rjmp	.-898    	; 0x3258 <__fp_round>

000035da <modf>:
    35da:	fa 01       	movw	r30, r20
    35dc:	dc 01       	movw	r26, r24
    35de:	aa 0f       	add	r26, r26
    35e0:	bb 1f       	adc	r27, r27
    35e2:	9b 01       	movw	r18, r22
    35e4:	ac 01       	movw	r20, r24
    35e6:	bf 57       	subi	r27, 0x7F	; 127
    35e8:	28 f4       	brcc	.+10     	; 0x35f4 <modf+0x1a>
    35ea:	22 27       	eor	r18, r18
    35ec:	33 27       	eor	r19, r19
    35ee:	44 27       	eor	r20, r20
    35f0:	50 78       	andi	r21, 0x80	; 128
    35f2:	1f c0       	rjmp	.+62     	; 0x3632 <modf+0x58>
    35f4:	b7 51       	subi	r27, 0x17	; 23
    35f6:	88 f4       	brcc	.+34     	; 0x361a <modf+0x40>
    35f8:	ab 2f       	mov	r26, r27
    35fa:	00 24       	eor	r0, r0
    35fc:	46 95       	lsr	r20
    35fe:	37 95       	ror	r19
    3600:	27 95       	ror	r18
    3602:	01 1c       	adc	r0, r1
    3604:	a3 95       	inc	r26
    3606:	d2 f3       	brmi	.-12     	; 0x35fc <modf+0x22>
    3608:	00 20       	and	r0, r0
    360a:	69 f0       	breq	.+26     	; 0x3626 <modf+0x4c>
    360c:	22 0f       	add	r18, r18
    360e:	33 1f       	adc	r19, r19
    3610:	44 1f       	adc	r20, r20
    3612:	b3 95       	inc	r27
    3614:	da f3       	brmi	.-10     	; 0x360c <modf+0x32>
    3616:	0d d0       	rcall	.+26     	; 0x3632 <modf+0x58>
    3618:	35 cd       	rjmp	.-1430   	; 0x3084 <__subsf3>
    361a:	61 30       	cpi	r22, 0x01	; 1
    361c:	71 05       	cpc	r23, r1
    361e:	a0 e8       	ldi	r26, 0x80	; 128
    3620:	8a 07       	cpc	r24, r26
    3622:	b9 46       	sbci	r27, 0x69	; 105
    3624:	30 f4       	brcc	.+12     	; 0x3632 <modf+0x58>
    3626:	9b 01       	movw	r18, r22
    3628:	ac 01       	movw	r20, r24
    362a:	66 27       	eor	r22, r22
    362c:	77 27       	eor	r23, r23
    362e:	88 27       	eor	r24, r24
    3630:	90 78       	andi	r25, 0x80	; 128
    3632:	30 96       	adiw	r30, 0x00	; 0
    3634:	21 f0       	breq	.+8      	; 0x363e <modf+0x64>
    3636:	20 83       	st	Z, r18
    3638:	31 83       	std	Z+1, r19	; 0x01
    363a:	42 83       	std	Z+2, r20	; 0x02
    363c:	53 83       	std	Z+3, r21	; 0x03
    363e:	08 95       	ret

00003640 <__divsf3>:
    3640:	0c d0       	rcall	.+24     	; 0x365a <__divsf3x>
    3642:	0a ce       	rjmp	.-1004   	; 0x3258 <__fp_round>
    3644:	02 de       	rcall	.-1020   	; 0x324a <__fp_pscB>
    3646:	40 f0       	brcs	.+16     	; 0x3658 <__divsf3+0x18>
    3648:	f9 dd       	rcall	.-1038   	; 0x323c <__fp_pscA>
    364a:	30 f0       	brcs	.+12     	; 0x3658 <__divsf3+0x18>
    364c:	21 f4       	brne	.+8      	; 0x3656 <__divsf3+0x16>
    364e:	5f 3f       	cpi	r21, 0xFF	; 255
    3650:	19 f0       	breq	.+6      	; 0x3658 <__divsf3+0x18>
    3652:	eb cd       	rjmp	.-1066   	; 0x322a <__fp_inf>
    3654:	51 11       	cpse	r21, r1
    3656:	34 ce       	rjmp	.-920    	; 0x32c0 <__fp_szero>
    3658:	ee cd       	rjmp	.-1060   	; 0x3236 <__fp_nan>

0000365a <__divsf3x>:
    365a:	0f de       	rcall	.-994    	; 0x327a <__fp_split3>
    365c:	98 f3       	brcs	.-26     	; 0x3644 <__divsf3+0x4>

0000365e <__divsf3_pse>:
    365e:	99 23       	and	r25, r25
    3660:	c9 f3       	breq	.-14     	; 0x3654 <__divsf3+0x14>
    3662:	55 23       	and	r21, r21
    3664:	b1 f3       	breq	.-20     	; 0x3652 <__divsf3+0x12>
    3666:	95 1b       	sub	r25, r21
    3668:	55 0b       	sbc	r21, r21
    366a:	bb 27       	eor	r27, r27
    366c:	aa 27       	eor	r26, r26
    366e:	62 17       	cp	r22, r18
    3670:	73 07       	cpc	r23, r19
    3672:	84 07       	cpc	r24, r20
    3674:	38 f0       	brcs	.+14     	; 0x3684 <__divsf3_pse+0x26>
    3676:	9f 5f       	subi	r25, 0xFF	; 255
    3678:	5f 4f       	sbci	r21, 0xFF	; 255
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	44 1f       	adc	r20, r20
    3680:	aa 1f       	adc	r26, r26
    3682:	a9 f3       	breq	.-22     	; 0x366e <__divsf3_pse+0x10>
    3684:	33 d0       	rcall	.+102    	; 0x36ec <__divsf3_pse+0x8e>
    3686:	0e 2e       	mov	r0, r30
    3688:	3a f0       	brmi	.+14     	; 0x3698 <__divsf3_pse+0x3a>
    368a:	e0 e8       	ldi	r30, 0x80	; 128
    368c:	30 d0       	rcall	.+96     	; 0x36ee <__divsf3_pse+0x90>
    368e:	91 50       	subi	r25, 0x01	; 1
    3690:	50 40       	sbci	r21, 0x00	; 0
    3692:	e6 95       	lsr	r30
    3694:	00 1c       	adc	r0, r0
    3696:	ca f7       	brpl	.-14     	; 0x368a <__divsf3_pse+0x2c>
    3698:	29 d0       	rcall	.+82     	; 0x36ec <__divsf3_pse+0x8e>
    369a:	fe 2f       	mov	r31, r30
    369c:	27 d0       	rcall	.+78     	; 0x36ec <__divsf3_pse+0x8e>
    369e:	66 0f       	add	r22, r22
    36a0:	77 1f       	adc	r23, r23
    36a2:	88 1f       	adc	r24, r24
    36a4:	bb 1f       	adc	r27, r27
    36a6:	26 17       	cp	r18, r22
    36a8:	37 07       	cpc	r19, r23
    36aa:	48 07       	cpc	r20, r24
    36ac:	ab 07       	cpc	r26, r27
    36ae:	b0 e8       	ldi	r27, 0x80	; 128
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <__divsf3_pse+0x56>
    36b2:	bb 0b       	sbc	r27, r27
    36b4:	80 2d       	mov	r24, r0
    36b6:	bf 01       	movw	r22, r30
    36b8:	ff 27       	eor	r31, r31
    36ba:	93 58       	subi	r25, 0x83	; 131
    36bc:	5f 4f       	sbci	r21, 0xFF	; 255
    36be:	2a f0       	brmi	.+10     	; 0x36ca <__divsf3_pse+0x6c>
    36c0:	9e 3f       	cpi	r25, 0xFE	; 254
    36c2:	51 05       	cpc	r21, r1
    36c4:	68 f0       	brcs	.+26     	; 0x36e0 <__divsf3_pse+0x82>
    36c6:	b1 cd       	rjmp	.-1182   	; 0x322a <__fp_inf>
    36c8:	fb cd       	rjmp	.-1034   	; 0x32c0 <__fp_szero>
    36ca:	5f 3f       	cpi	r21, 0xFF	; 255
    36cc:	ec f3       	brlt	.-6      	; 0x36c8 <__divsf3_pse+0x6a>
    36ce:	98 3e       	cpi	r25, 0xE8	; 232
    36d0:	dc f3       	brlt	.-10     	; 0x36c8 <__divsf3_pse+0x6a>
    36d2:	86 95       	lsr	r24
    36d4:	77 95       	ror	r23
    36d6:	67 95       	ror	r22
    36d8:	b7 95       	ror	r27
    36da:	f7 95       	ror	r31
    36dc:	9f 5f       	subi	r25, 0xFF	; 255
    36de:	c9 f7       	brne	.-14     	; 0x36d2 <__divsf3_pse+0x74>
    36e0:	88 0f       	add	r24, r24
    36e2:	91 1d       	adc	r25, r1
    36e4:	96 95       	lsr	r25
    36e6:	87 95       	ror	r24
    36e8:	97 f9       	bld	r25, 7
    36ea:	08 95       	ret
    36ec:	e1 e0       	ldi	r30, 0x01	; 1
    36ee:	66 0f       	add	r22, r22
    36f0:	77 1f       	adc	r23, r23
    36f2:	88 1f       	adc	r24, r24
    36f4:	bb 1f       	adc	r27, r27
    36f6:	62 17       	cp	r22, r18
    36f8:	73 07       	cpc	r23, r19
    36fa:	84 07       	cpc	r24, r20
    36fc:	ba 07       	cpc	r27, r26
    36fe:	20 f0       	brcs	.+8      	; 0x3708 <__divsf3_pse+0xaa>
    3700:	62 1b       	sub	r22, r18
    3702:	73 0b       	sbc	r23, r19
    3704:	84 0b       	sbc	r24, r20
    3706:	ba 0b       	sbc	r27, r26
    3708:	ee 1f       	adc	r30, r30
    370a:	88 f7       	brcc	.-30     	; 0x36ee <__divsf3_pse+0x90>
    370c:	e0 95       	com	r30
    370e:	08 95       	ret

00003710 <__fp_mpack>:
    3710:	9f 3f       	cpi	r25, 0xFF	; 255
    3712:	31 f0       	breq	.+12     	; 0x3720 <__fp_mpack_finite+0xc>

00003714 <__fp_mpack_finite>:
    3714:	91 50       	subi	r25, 0x01	; 1
    3716:	20 f4       	brcc	.+8      	; 0x3720 <__fp_mpack_finite+0xc>
    3718:	87 95       	ror	r24
    371a:	77 95       	ror	r23
    371c:	67 95       	ror	r22
    371e:	b7 95       	ror	r27
    3720:	88 0f       	add	r24, r24
    3722:	91 1d       	adc	r25, r1
    3724:	96 95       	lsr	r25
    3726:	87 95       	ror	r24
    3728:	97 f9       	bld	r25, 7
    372a:	08 95       	ret

0000372c <__mulsi3>:
    372c:	db 01       	movw	r26, r22
    372e:	8f 93       	push	r24
    3730:	9f 93       	push	r25
    3732:	6b d0       	rcall	.+214    	; 0x380a <__muluhisi3>
    3734:	bf 91       	pop	r27
    3736:	af 91       	pop	r26
    3738:	a2 9f       	mul	r26, r18
    373a:	80 0d       	add	r24, r0
    373c:	91 1d       	adc	r25, r1
    373e:	a3 9f       	mul	r26, r19
    3740:	90 0d       	add	r25, r0
    3742:	b2 9f       	mul	r27, r18
    3744:	90 0d       	add	r25, r0
    3746:	11 24       	eor	r1, r1
    3748:	08 95       	ret

0000374a <__udivmodhi4>:
    374a:	aa 1b       	sub	r26, r26
    374c:	bb 1b       	sub	r27, r27
    374e:	51 e1       	ldi	r21, 0x11	; 17
    3750:	07 c0       	rjmp	.+14     	; 0x3760 <__udivmodhi4_ep>

00003752 <__udivmodhi4_loop>:
    3752:	aa 1f       	adc	r26, r26
    3754:	bb 1f       	adc	r27, r27
    3756:	a6 17       	cp	r26, r22
    3758:	b7 07       	cpc	r27, r23
    375a:	10 f0       	brcs	.+4      	; 0x3760 <__udivmodhi4_ep>
    375c:	a6 1b       	sub	r26, r22
    375e:	b7 0b       	sbc	r27, r23

00003760 <__udivmodhi4_ep>:
    3760:	88 1f       	adc	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	5a 95       	dec	r21
    3766:	a9 f7       	brne	.-22     	; 0x3752 <__udivmodhi4_loop>
    3768:	80 95       	com	r24
    376a:	90 95       	com	r25
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	08 95       	ret

00003772 <__divmodhi4>:
    3772:	97 fb       	bst	r25, 7
    3774:	07 2e       	mov	r0, r23
    3776:	16 f4       	brtc	.+4      	; 0x377c <__divmodhi4+0xa>
    3778:	00 94       	com	r0
    377a:	06 d0       	rcall	.+12     	; 0x3788 <__divmodhi4_neg1>
    377c:	77 fd       	sbrc	r23, 7
    377e:	08 d0       	rcall	.+16     	; 0x3790 <__divmodhi4_neg2>
    3780:	e4 df       	rcall	.-56     	; 0x374a <__udivmodhi4>
    3782:	07 fc       	sbrc	r0, 7
    3784:	05 d0       	rcall	.+10     	; 0x3790 <__divmodhi4_neg2>
    3786:	3e f4       	brtc	.+14     	; 0x3796 <__divmodhi4_exit>

00003788 <__divmodhi4_neg1>:
    3788:	90 95       	com	r25
    378a:	81 95       	neg	r24
    378c:	9f 4f       	sbci	r25, 0xFF	; 255
    378e:	08 95       	ret

00003790 <__divmodhi4_neg2>:
    3790:	70 95       	com	r23
    3792:	61 95       	neg	r22
    3794:	7f 4f       	sbci	r23, 0xFF	; 255

00003796 <__divmodhi4_exit>:
    3796:	08 95       	ret

00003798 <__udivmodsi4>:
    3798:	a1 e2       	ldi	r26, 0x21	; 33
    379a:	1a 2e       	mov	r1, r26
    379c:	aa 1b       	sub	r26, r26
    379e:	bb 1b       	sub	r27, r27
    37a0:	fd 01       	movw	r30, r26
    37a2:	0d c0       	rjmp	.+26     	; 0x37be <__udivmodsi4_ep>

000037a4 <__udivmodsi4_loop>:
    37a4:	aa 1f       	adc	r26, r26
    37a6:	bb 1f       	adc	r27, r27
    37a8:	ee 1f       	adc	r30, r30
    37aa:	ff 1f       	adc	r31, r31
    37ac:	a2 17       	cp	r26, r18
    37ae:	b3 07       	cpc	r27, r19
    37b0:	e4 07       	cpc	r30, r20
    37b2:	f5 07       	cpc	r31, r21
    37b4:	20 f0       	brcs	.+8      	; 0x37be <__udivmodsi4_ep>
    37b6:	a2 1b       	sub	r26, r18
    37b8:	b3 0b       	sbc	r27, r19
    37ba:	e4 0b       	sbc	r30, r20
    37bc:	f5 0b       	sbc	r31, r21

000037be <__udivmodsi4_ep>:
    37be:	66 1f       	adc	r22, r22
    37c0:	77 1f       	adc	r23, r23
    37c2:	88 1f       	adc	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	1a 94       	dec	r1
    37c8:	69 f7       	brne	.-38     	; 0x37a4 <__udivmodsi4_loop>
    37ca:	60 95       	com	r22
    37cc:	70 95       	com	r23
    37ce:	80 95       	com	r24
    37d0:	90 95       	com	r25
    37d2:	9b 01       	movw	r18, r22
    37d4:	ac 01       	movw	r20, r24
    37d6:	bd 01       	movw	r22, r26
    37d8:	cf 01       	movw	r24, r30
    37da:	08 95       	ret

000037dc <__tablejump2__>:
    37dc:	ee 0f       	add	r30, r30
    37de:	ff 1f       	adc	r31, r31
    37e0:	88 1f       	adc	r24, r24
    37e2:	8b bf       	out	0x3b, r24	; 59
    37e4:	07 90       	elpm	r0, Z+
    37e6:	f6 91       	elpm	r31, Z
    37e8:	e0 2d       	mov	r30, r0
    37ea:	19 94       	eijmp

000037ec <__umulhisi3>:
    37ec:	a2 9f       	mul	r26, r18
    37ee:	b0 01       	movw	r22, r0
    37f0:	b3 9f       	mul	r27, r19
    37f2:	c0 01       	movw	r24, r0
    37f4:	a3 9f       	mul	r26, r19
    37f6:	70 0d       	add	r23, r0
    37f8:	81 1d       	adc	r24, r1
    37fa:	11 24       	eor	r1, r1
    37fc:	91 1d       	adc	r25, r1
    37fe:	b2 9f       	mul	r27, r18
    3800:	70 0d       	add	r23, r0
    3802:	81 1d       	adc	r24, r1
    3804:	11 24       	eor	r1, r1
    3806:	91 1d       	adc	r25, r1
    3808:	08 95       	ret

0000380a <__muluhisi3>:
    380a:	f0 df       	rcall	.-32     	; 0x37ec <__umulhisi3>
    380c:	a5 9f       	mul	r26, r21
    380e:	90 0d       	add	r25, r0
    3810:	b4 9f       	mul	r27, r20
    3812:	90 0d       	add	r25, r0
    3814:	a4 9f       	mul	r26, r20
    3816:	80 0d       	add	r24, r0
    3818:	91 1d       	adc	r25, r1
    381a:	11 24       	eor	r1, r1
    381c:	08 95       	ret

0000381e <__adddi3_s8>:
    381e:	00 24       	eor	r0, r0
    3820:	a7 fd       	sbrc	r26, 7
    3822:	00 94       	com	r0
    3824:	2a 0f       	add	r18, r26
    3826:	30 1d       	adc	r19, r0
    3828:	40 1d       	adc	r20, r0
    382a:	50 1d       	adc	r21, r0
    382c:	60 1d       	adc	r22, r0
    382e:	70 1d       	adc	r23, r0
    3830:	80 1d       	adc	r24, r0
    3832:	90 1d       	adc	r25, r0
    3834:	08 95       	ret

00003836 <__cmpdi2_s8>:
    3836:	00 24       	eor	r0, r0
    3838:	a7 fd       	sbrc	r26, 7
    383a:	00 94       	com	r0
    383c:	2a 17       	cp	r18, r26
    383e:	30 05       	cpc	r19, r0
    3840:	40 05       	cpc	r20, r0
    3842:	50 05       	cpc	r21, r0
    3844:	60 05       	cpc	r22, r0
    3846:	70 05       	cpc	r23, r0
    3848:	80 05       	cpc	r24, r0
    384a:	90 05       	cpc	r25, r0
    384c:	08 95       	ret

0000384e <do_rand>:
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	ec 01       	movw	r28, r24
    3864:	68 81       	ld	r22, Y
    3866:	79 81       	ldd	r23, Y+1	; 0x01
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	61 15       	cp	r22, r1
    386e:	71 05       	cpc	r23, r1
    3870:	81 05       	cpc	r24, r1
    3872:	91 05       	cpc	r25, r1
    3874:	21 f4       	brne	.+8      	; 0x387e <do_rand+0x30>
    3876:	64 e2       	ldi	r22, 0x24	; 36
    3878:	79 ed       	ldi	r23, 0xD9	; 217
    387a:	8b e5       	ldi	r24, 0x5B	; 91
    387c:	97 e0       	ldi	r25, 0x07	; 7
    387e:	2d e1       	ldi	r18, 0x1D	; 29
    3880:	33 ef       	ldi	r19, 0xF3	; 243
    3882:	41 e0       	ldi	r20, 0x01	; 1
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	cd d1       	rcall	.+922    	; 0x3c22 <__divmodsi4>
    3888:	49 01       	movw	r8, r18
    388a:	5a 01       	movw	r10, r20
    388c:	9b 01       	movw	r18, r22
    388e:	ac 01       	movw	r20, r24
    3890:	a7 ea       	ldi	r26, 0xA7	; 167
    3892:	b1 e4       	ldi	r27, 0x41	; 65
    3894:	ba df       	rcall	.-140    	; 0x380a <__muluhisi3>
    3896:	6b 01       	movw	r12, r22
    3898:	7c 01       	movw	r14, r24
    389a:	ac ee       	ldi	r26, 0xEC	; 236
    389c:	b4 ef       	ldi	r27, 0xF4	; 244
    389e:	a5 01       	movw	r20, r10
    38a0:	94 01       	movw	r18, r8
    38a2:	dd d1       	rcall	.+954    	; 0x3c5e <__mulohisi3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	8c 0d       	add	r24, r12
    38aa:	9d 1d       	adc	r25, r13
    38ac:	ae 1d       	adc	r26, r14
    38ae:	bf 1d       	adc	r27, r15
    38b0:	b7 ff       	sbrs	r27, 7
    38b2:	03 c0       	rjmp	.+6      	; 0x38ba <do_rand+0x6c>
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	a1 09       	sbc	r26, r1
    38b8:	b0 48       	sbci	r27, 0x80	; 128
    38ba:	88 83       	st	Y, r24
    38bc:	99 83       	std	Y+1, r25	; 0x01
    38be:	aa 83       	std	Y+2, r26	; 0x02
    38c0:	bb 83       	std	Y+3, r27	; 0x03
    38c2:	9f 77       	andi	r25, 0x7F	; 127
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	ff 90       	pop	r15
    38ca:	ef 90       	pop	r14
    38cc:	df 90       	pop	r13
    38ce:	cf 90       	pop	r12
    38d0:	bf 90       	pop	r11
    38d2:	af 90       	pop	r10
    38d4:	9f 90       	pop	r9
    38d6:	8f 90       	pop	r8
    38d8:	08 95       	ret

000038da <rand_r>:
    38da:	b9 cf       	rjmp	.-142    	; 0x384e <do_rand>

000038dc <rand>:
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	92 e0       	ldi	r25, 0x02	; 2
    38e0:	b6 cf       	rjmp	.-148    	; 0x384e <do_rand>

000038e2 <srand>:
    38e2:	a0 e0       	ldi	r26, 0x00	; 0
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    38ea:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    38ee:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    38f2:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    38f6:	08 95       	ret

000038f8 <memcpy>:
    38f8:	fb 01       	movw	r30, r22
    38fa:	dc 01       	movw	r26, r24
    38fc:	02 c0       	rjmp	.+4      	; 0x3902 <memcpy+0xa>
    38fe:	01 90       	ld	r0, Z+
    3900:	0d 92       	st	X+, r0
    3902:	41 50       	subi	r20, 0x01	; 1
    3904:	50 40       	sbci	r21, 0x00	; 0
    3906:	d8 f7       	brcc	.-10     	; 0x38fe <memcpy+0x6>
    3908:	08 95       	ret

0000390a <fdevopen>:
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	31 f4       	brne	.+12     	; 0x3922 <fdevopen+0x18>
    3916:	61 15       	cp	r22, r1
    3918:	71 05       	cpc	r23, r1
    391a:	19 f4       	brne	.+6      	; 0x3922 <fdevopen+0x18>
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	39 c0       	rjmp	.+114    	; 0x3994 <fdevopen+0x8a>
    3922:	8b 01       	movw	r16, r22
    3924:	ec 01       	movw	r28, r24
    3926:	6e e0       	ldi	r22, 0x0E	; 14
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	37 d0       	rcall	.+110    	; 0x399e <calloc>
    3930:	fc 01       	movw	r30, r24
    3932:	89 2b       	or	r24, r25
    3934:	99 f3       	breq	.-26     	; 0x391c <fdevopen+0x12>
    3936:	80 e8       	ldi	r24, 0x80	; 128
    3938:	83 83       	std	Z+3, r24	; 0x03
    393a:	01 15       	cp	r16, r1
    393c:	11 05       	cpc	r17, r1
    393e:	71 f0       	breq	.+28     	; 0x395c <fdevopen+0x52>
    3940:	13 87       	std	Z+11, r17	; 0x0b
    3942:	02 87       	std	Z+10, r16	; 0x0a
    3944:	81 e8       	ldi	r24, 0x81	; 129
    3946:	83 83       	std	Z+3, r24	; 0x03
    3948:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <__iob>
    394c:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <__iob+0x1>
    3950:	89 2b       	or	r24, r25
    3952:	21 f4       	brne	.+8      	; 0x395c <fdevopen+0x52>
    3954:	f0 93 a0 06 	sts	0x06A0, r31	; 0x8006a0 <__iob+0x1>
    3958:	e0 93 9f 06 	sts	0x069F, r30	; 0x80069f <__iob>
    395c:	20 97       	sbiw	r28, 0x00	; 0
    395e:	c9 f0       	breq	.+50     	; 0x3992 <fdevopen+0x88>
    3960:	d1 87       	std	Z+9, r29	; 0x09
    3962:	c0 87       	std	Z+8, r28	; 0x08
    3964:	83 81       	ldd	r24, Z+3	; 0x03
    3966:	82 60       	ori	r24, 0x02	; 2
    3968:	83 83       	std	Z+3, r24	; 0x03
    396a:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <__iob+0x2>
    396e:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <__iob+0x3>
    3972:	89 2b       	or	r24, r25
    3974:	71 f4       	brne	.+28     	; 0x3992 <fdevopen+0x88>
    3976:	f0 93 a2 06 	sts	0x06A2, r31	; 0x8006a2 <__iob+0x3>
    397a:	e0 93 a1 06 	sts	0x06A1, r30	; 0x8006a1 <__iob+0x2>
    397e:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <__iob+0x4>
    3982:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <__iob+0x5>
    3986:	89 2b       	or	r24, r25
    3988:	21 f4       	brne	.+8      	; 0x3992 <fdevopen+0x88>
    398a:	f0 93 a4 06 	sts	0x06A4, r31	; 0x8006a4 <__iob+0x5>
    398e:	e0 93 a3 06 	sts	0x06A3, r30	; 0x8006a3 <__iob+0x4>
    3992:	cf 01       	movw	r24, r30
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	1f 91       	pop	r17
    399a:	0f 91       	pop	r16
    399c:	08 95       	ret

0000399e <calloc>:
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	86 9f       	mul	r24, r22
    39a8:	80 01       	movw	r16, r0
    39aa:	87 9f       	mul	r24, r23
    39ac:	10 0d       	add	r17, r0
    39ae:	96 9f       	mul	r25, r22
    39b0:	10 0d       	add	r17, r0
    39b2:	11 24       	eor	r1, r1
    39b4:	c8 01       	movw	r24, r16
    39b6:	0d d0       	rcall	.+26     	; 0x39d2 <malloc>
    39b8:	ec 01       	movw	r28, r24
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	21 f0       	breq	.+8      	; 0x39c6 <calloc+0x28>
    39be:	a8 01       	movw	r20, r16
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	27 d1       	rcall	.+590    	; 0x3c14 <memset>
    39c6:	ce 01       	movw	r24, r28
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <malloc>:
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	91 05       	cpc	r25, r1
    39de:	10 f4       	brcc	.+4      	; 0x39e4 <malloc+0x12>
    39e0:	82 e0       	ldi	r24, 0x02	; 2
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <__flp>
    39e8:	f0 91 a8 06 	lds	r31, 0x06A8	; 0x8006a8 <__flp+0x1>
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	a0 e0       	ldi	r26, 0x00	; 0
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	30 97       	sbiw	r30, 0x00	; 0
    39f6:	19 f1       	breq	.+70     	; 0x3a3e <malloc+0x6c>
    39f8:	40 81       	ld	r20, Z
    39fa:	51 81       	ldd	r21, Z+1	; 0x01
    39fc:	02 81       	ldd	r16, Z+2	; 0x02
    39fe:	13 81       	ldd	r17, Z+3	; 0x03
    3a00:	48 17       	cp	r20, r24
    3a02:	59 07       	cpc	r21, r25
    3a04:	c8 f0       	brcs	.+50     	; 0x3a38 <malloc+0x66>
    3a06:	84 17       	cp	r24, r20
    3a08:	95 07       	cpc	r25, r21
    3a0a:	69 f4       	brne	.+26     	; 0x3a26 <malloc+0x54>
    3a0c:	10 97       	sbiw	r26, 0x00	; 0
    3a0e:	31 f0       	breq	.+12     	; 0x3a1c <malloc+0x4a>
    3a10:	12 96       	adiw	r26, 0x02	; 2
    3a12:	0c 93       	st	X, r16
    3a14:	12 97       	sbiw	r26, 0x02	; 2
    3a16:	13 96       	adiw	r26, 0x03	; 3
    3a18:	1c 93       	st	X, r17
    3a1a:	27 c0       	rjmp	.+78     	; 0x3a6a <malloc+0x98>
    3a1c:	00 93 a7 06 	sts	0x06A7, r16	; 0x8006a7 <__flp>
    3a20:	10 93 a8 06 	sts	0x06A8, r17	; 0x8006a8 <__flp+0x1>
    3a24:	22 c0       	rjmp	.+68     	; 0x3a6a <malloc+0x98>
    3a26:	21 15       	cp	r18, r1
    3a28:	31 05       	cpc	r19, r1
    3a2a:	19 f0       	breq	.+6      	; 0x3a32 <malloc+0x60>
    3a2c:	42 17       	cp	r20, r18
    3a2e:	53 07       	cpc	r21, r19
    3a30:	18 f4       	brcc	.+6      	; 0x3a38 <malloc+0x66>
    3a32:	9a 01       	movw	r18, r20
    3a34:	bd 01       	movw	r22, r26
    3a36:	ef 01       	movw	r28, r30
    3a38:	df 01       	movw	r26, r30
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	db cf       	rjmp	.-74     	; 0x39f4 <malloc+0x22>
    3a3e:	21 15       	cp	r18, r1
    3a40:	31 05       	cpc	r19, r1
    3a42:	f9 f0       	breq	.+62     	; 0x3a82 <malloc+0xb0>
    3a44:	28 1b       	sub	r18, r24
    3a46:	39 0b       	sbc	r19, r25
    3a48:	24 30       	cpi	r18, 0x04	; 4
    3a4a:	31 05       	cpc	r19, r1
    3a4c:	80 f4       	brcc	.+32     	; 0x3a6e <malloc+0x9c>
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	9b 81       	ldd	r25, Y+3	; 0x03
    3a52:	61 15       	cp	r22, r1
    3a54:	71 05       	cpc	r23, r1
    3a56:	21 f0       	breq	.+8      	; 0x3a60 <malloc+0x8e>
    3a58:	fb 01       	movw	r30, r22
    3a5a:	93 83       	std	Z+3, r25	; 0x03
    3a5c:	82 83       	std	Z+2, r24	; 0x02
    3a5e:	04 c0       	rjmp	.+8      	; 0x3a68 <malloc+0x96>
    3a60:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <__flp+0x1>
    3a64:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__flp>
    3a68:	fe 01       	movw	r30, r28
    3a6a:	32 96       	adiw	r30, 0x02	; 2
    3a6c:	44 c0       	rjmp	.+136    	; 0x3af6 <malloc+0x124>
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e2 0f       	add	r30, r18
    3a72:	f3 1f       	adc	r31, r19
    3a74:	81 93       	st	Z+, r24
    3a76:	91 93       	st	Z+, r25
    3a78:	22 50       	subi	r18, 0x02	; 2
    3a7a:	31 09       	sbc	r19, r1
    3a7c:	39 83       	std	Y+1, r19	; 0x01
    3a7e:	28 83       	st	Y, r18
    3a80:	3a c0       	rjmp	.+116    	; 0x3af6 <malloc+0x124>
    3a82:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <__brkval>
    3a86:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <__brkval+0x1>
    3a8a:	23 2b       	or	r18, r19
    3a8c:	41 f4       	brne	.+16     	; 0x3a9e <malloc+0xcc>
    3a8e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    3a92:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    3a96:	30 93 a6 06 	sts	0x06A6, r19	; 0x8006a6 <__brkval+0x1>
    3a9a:	20 93 a5 06 	sts	0x06A5, r18	; 0x8006a5 <__brkval>
    3a9e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    3aa2:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    3aa6:	21 15       	cp	r18, r1
    3aa8:	31 05       	cpc	r19, r1
    3aaa:	41 f4       	brne	.+16     	; 0x3abc <malloc+0xea>
    3aac:	2d b7       	in	r18, 0x3d	; 61
    3aae:	3e b7       	in	r19, 0x3e	; 62
    3ab0:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    3ab4:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    3ab8:	24 1b       	sub	r18, r20
    3aba:	35 0b       	sbc	r19, r21
    3abc:	e0 91 a5 06 	lds	r30, 0x06A5	; 0x8006a5 <__brkval>
    3ac0:	f0 91 a6 06 	lds	r31, 0x06A6	; 0x8006a6 <__brkval+0x1>
    3ac4:	e2 17       	cp	r30, r18
    3ac6:	f3 07       	cpc	r31, r19
    3ac8:	a0 f4       	brcc	.+40     	; 0x3af2 <malloc+0x120>
    3aca:	2e 1b       	sub	r18, r30
    3acc:	3f 0b       	sbc	r19, r31
    3ace:	28 17       	cp	r18, r24
    3ad0:	39 07       	cpc	r19, r25
    3ad2:	78 f0       	brcs	.+30     	; 0x3af2 <malloc+0x120>
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	4e 5f       	subi	r20, 0xFE	; 254
    3ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    3ada:	24 17       	cp	r18, r20
    3adc:	35 07       	cpc	r19, r21
    3ade:	48 f0       	brcs	.+18     	; 0x3af2 <malloc+0x120>
    3ae0:	4e 0f       	add	r20, r30
    3ae2:	5f 1f       	adc	r21, r31
    3ae4:	50 93 a6 06 	sts	0x06A6, r21	; 0x8006a6 <__brkval+0x1>
    3ae8:	40 93 a5 06 	sts	0x06A5, r20	; 0x8006a5 <__brkval>
    3aec:	81 93       	st	Z+, r24
    3aee:	91 93       	st	Z+, r25
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <malloc+0x124>
    3af2:	e0 e0       	ldi	r30, 0x00	; 0
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	cf 01       	movw	r24, r30
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	08 95       	ret

00003b02 <free>:
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	00 97       	sbiw	r24, 0x00	; 0
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <free+0xa>
    3b0a:	81 c0       	rjmp	.+258    	; 0x3c0e <free+0x10c>
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	32 97       	sbiw	r30, 0x02	; 2
    3b10:	13 82       	std	Z+3, r1	; 0x03
    3b12:	12 82       	std	Z+2, r1	; 0x02
    3b14:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <__flp>
    3b18:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <__flp+0x1>
    3b1c:	10 97       	sbiw	r26, 0x00	; 0
    3b1e:	81 f4       	brne	.+32     	; 0x3b40 <free+0x3e>
    3b20:	20 81       	ld	r18, Z
    3b22:	31 81       	ldd	r19, Z+1	; 0x01
    3b24:	82 0f       	add	r24, r18
    3b26:	93 1f       	adc	r25, r19
    3b28:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <__brkval>
    3b2c:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <__brkval+0x1>
    3b30:	28 17       	cp	r18, r24
    3b32:	39 07       	cpc	r19, r25
    3b34:	51 f5       	brne	.+84     	; 0x3b8a <free+0x88>
    3b36:	f0 93 a6 06 	sts	0x06A6, r31	; 0x8006a6 <__brkval+0x1>
    3b3a:	e0 93 a5 06 	sts	0x06A5, r30	; 0x8006a5 <__brkval>
    3b3e:	67 c0       	rjmp	.+206    	; 0x3c0e <free+0x10c>
    3b40:	ed 01       	movw	r28, r26
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	ce 17       	cp	r28, r30
    3b48:	df 07       	cpc	r29, r31
    3b4a:	40 f4       	brcc	.+16     	; 0x3b5c <free+0x5a>
    3b4c:	4a 81       	ldd	r20, Y+2	; 0x02
    3b4e:	5b 81       	ldd	r21, Y+3	; 0x03
    3b50:	9e 01       	movw	r18, r28
    3b52:	41 15       	cp	r20, r1
    3b54:	51 05       	cpc	r21, r1
    3b56:	f1 f0       	breq	.+60     	; 0x3b94 <free+0x92>
    3b58:	ea 01       	movw	r28, r20
    3b5a:	f5 cf       	rjmp	.-22     	; 0x3b46 <free+0x44>
    3b5c:	d3 83       	std	Z+3, r29	; 0x03
    3b5e:	c2 83       	std	Z+2, r28	; 0x02
    3b60:	40 81       	ld	r20, Z
    3b62:	51 81       	ldd	r21, Z+1	; 0x01
    3b64:	84 0f       	add	r24, r20
    3b66:	95 1f       	adc	r25, r21
    3b68:	c8 17       	cp	r28, r24
    3b6a:	d9 07       	cpc	r29, r25
    3b6c:	59 f4       	brne	.+22     	; 0x3b84 <free+0x82>
    3b6e:	88 81       	ld	r24, Y
    3b70:	99 81       	ldd	r25, Y+1	; 0x01
    3b72:	84 0f       	add	r24, r20
    3b74:	95 1f       	adc	r25, r21
    3b76:	02 96       	adiw	r24, 0x02	; 2
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	80 83       	st	Z, r24
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b80:	93 83       	std	Z+3, r25	; 0x03
    3b82:	82 83       	std	Z+2, r24	; 0x02
    3b84:	21 15       	cp	r18, r1
    3b86:	31 05       	cpc	r19, r1
    3b88:	29 f4       	brne	.+10     	; 0x3b94 <free+0x92>
    3b8a:	f0 93 a8 06 	sts	0x06A8, r31	; 0x8006a8 <__flp+0x1>
    3b8e:	e0 93 a7 06 	sts	0x06A7, r30	; 0x8006a7 <__flp>
    3b92:	3d c0       	rjmp	.+122    	; 0x3c0e <free+0x10c>
    3b94:	e9 01       	movw	r28, r18
    3b96:	fb 83       	std	Y+3, r31	; 0x03
    3b98:	ea 83       	std	Y+2, r30	; 0x02
    3b9a:	49 91       	ld	r20, Y+
    3b9c:	59 91       	ld	r21, Y+
    3b9e:	c4 0f       	add	r28, r20
    3ba0:	d5 1f       	adc	r29, r21
    3ba2:	ec 17       	cp	r30, r28
    3ba4:	fd 07       	cpc	r31, r29
    3ba6:	61 f4       	brne	.+24     	; 0x3bc0 <free+0xbe>
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	84 0f       	add	r24, r20
    3bae:	95 1f       	adc	r25, r21
    3bb0:	02 96       	adiw	r24, 0x02	; 2
    3bb2:	e9 01       	movw	r28, r18
    3bb4:	99 83       	std	Y+1, r25	; 0x01
    3bb6:	88 83       	st	Y, r24
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	9b 83       	std	Y+3, r25	; 0x03
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
    3bc0:	e0 e0       	ldi	r30, 0x00	; 0
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	12 96       	adiw	r26, 0x02	; 2
    3bc6:	8d 91       	ld	r24, X+
    3bc8:	9c 91       	ld	r25, X
    3bca:	13 97       	sbiw	r26, 0x03	; 3
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	19 f0       	breq	.+6      	; 0x3bd6 <free+0xd4>
    3bd0:	fd 01       	movw	r30, r26
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	f7 cf       	rjmp	.-18     	; 0x3bc4 <free+0xc2>
    3bd6:	8d 91       	ld	r24, X+
    3bd8:	9c 91       	ld	r25, X
    3bda:	11 97       	sbiw	r26, 0x01	; 1
    3bdc:	9d 01       	movw	r18, r26
    3bde:	2e 5f       	subi	r18, 0xFE	; 254
    3be0:	3f 4f       	sbci	r19, 0xFF	; 255
    3be2:	82 0f       	add	r24, r18
    3be4:	93 1f       	adc	r25, r19
    3be6:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <__brkval>
    3bea:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <__brkval+0x1>
    3bee:	28 17       	cp	r18, r24
    3bf0:	39 07       	cpc	r19, r25
    3bf2:	69 f4       	brne	.+26     	; 0x3c0e <free+0x10c>
    3bf4:	30 97       	sbiw	r30, 0x00	; 0
    3bf6:	29 f4       	brne	.+10     	; 0x3c02 <free+0x100>
    3bf8:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <__flp+0x1>
    3bfc:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <__flp>
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <free+0x104>
    3c02:	13 82       	std	Z+3, r1	; 0x03
    3c04:	12 82       	std	Z+2, r1	; 0x02
    3c06:	b0 93 a6 06 	sts	0x06A6, r27	; 0x8006a6 <__brkval+0x1>
    3c0a:	a0 93 a5 06 	sts	0x06A5, r26	; 0x8006a5 <__brkval>
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	08 95       	ret

00003c14 <memset>:
    3c14:	dc 01       	movw	r26, r24
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <memset+0x6>
    3c18:	6d 93       	st	X+, r22
    3c1a:	41 50       	subi	r20, 0x01	; 1
    3c1c:	50 40       	sbci	r21, 0x00	; 0
    3c1e:	e0 f7       	brcc	.-8      	; 0x3c18 <memset+0x4>
    3c20:	08 95       	ret

00003c22 <__divmodsi4>:
    3c22:	05 2e       	mov	r0, r21
    3c24:	97 fb       	bst	r25, 7
    3c26:	16 f4       	brtc	.+4      	; 0x3c2c <__divmodsi4+0xa>
    3c28:	00 94       	com	r0
    3c2a:	0f d0       	rcall	.+30     	; 0x3c4a <__negsi2>
    3c2c:	57 fd       	sbrc	r21, 7
    3c2e:	05 d0       	rcall	.+10     	; 0x3c3a <__divmodsi4_neg2>
    3c30:	b3 dd       	rcall	.-1178   	; 0x3798 <__udivmodsi4>
    3c32:	07 fc       	sbrc	r0, 7
    3c34:	02 d0       	rcall	.+4      	; 0x3c3a <__divmodsi4_neg2>
    3c36:	46 f4       	brtc	.+16     	; 0x3c48 <__divmodsi4_exit>
    3c38:	08 c0       	rjmp	.+16     	; 0x3c4a <__negsi2>

00003c3a <__divmodsi4_neg2>:
    3c3a:	50 95       	com	r21
    3c3c:	40 95       	com	r20
    3c3e:	30 95       	com	r19
    3c40:	21 95       	neg	r18
    3c42:	3f 4f       	sbci	r19, 0xFF	; 255
    3c44:	4f 4f       	sbci	r20, 0xFF	; 255
    3c46:	5f 4f       	sbci	r21, 0xFF	; 255

00003c48 <__divmodsi4_exit>:
    3c48:	08 95       	ret

00003c4a <__negsi2>:
    3c4a:	90 95       	com	r25
    3c4c:	80 95       	com	r24
    3c4e:	70 95       	com	r23
    3c50:	61 95       	neg	r22
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255
    3c54:	8f 4f       	sbci	r24, 0xFF	; 255
    3c56:	9f 4f       	sbci	r25, 0xFF	; 255
    3c58:	08 95       	ret

00003c5a <__mulshisi3>:
    3c5a:	b7 ff       	sbrs	r27, 7
    3c5c:	d6 cd       	rjmp	.-1108   	; 0x380a <__muluhisi3>

00003c5e <__mulohisi3>:
    3c5e:	d5 dd       	rcall	.-1110   	; 0x380a <__muluhisi3>
    3c60:	82 1b       	sub	r24, r18
    3c62:	93 0b       	sbc	r25, r19
    3c64:	08 95       	ret

00003c66 <_exit>:
    3c66:	f8 94       	cli

00003c68 <__stop_program>:
    3c68:	ff cf       	rjmp	.-2      	; 0x3c68 <__stop_program>
